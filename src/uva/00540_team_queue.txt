#include <utility>
#include <memory>

namespace std
{
template<class T, class U = T>
T exchange(T& obj, U&& new_value)
{
    T old_value = std::move(obj);
    obj = std::forward<U>(new_value);
    return old_value;
}

template<class T, class... Args>
std::unique_ptr<T> make_unique(Args&&... args)
{
	return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
}
}

#include <cassert>
#include <cstddef>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <sstream>
#include <string>
#include <type_traits>

std::istream* istream;

bool ignore_line()
{
	return !!istream->ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

char peek()
{
	const auto ch = istream->peek();

	assert(istream->good());
	return static_cast<char>(ch);
}

bool read()
{
	return true;
}

template<typename T>
bool read(T& arg)
{
	return !!((*istream) >> arg);
}

template<typename T, typename... Ts>
bool read(T& arg, Ts&... args)
{
	return read(arg) && read(args...);
}

template<typename T1, typename T2>
bool read(std::pair<T1, T2>& pair)
{
	return read(pair.first, pair.second);
}

bool read_ln_non_empty(std::string& str)
{
	return !!std::getline(*istream, str) && !str.empty();
}

bool read_ln(std::string& str)
{
	return !!std::getline(*istream, str);
}

template<typename... Ts>
bool read_ln(Ts&... args)
{
	return read(args...) && ignore_line();
}

template<class T = void, class V, class Fn>
bool read_vec(std::size_t count, V& vec, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename V::value_type, T>::type;

	vec.reserve(vec.size() + count);
	for (std::size_t i = 0; i < count; ++i)
	{
		S y;
		if (!read(y))
			return false;
		vec.push_back(fn(y));
	}
	return true;
}

template<class V>
bool read_vec(std::size_t count, V& vec)
{
	using T = typename V::value_type;
	return read_vec<T>(count, vec, [](T x) { return x; });
}

template<typename T = void, class V, class Fn>
bool read_size_vec(V& vec, Fn fn)
{
	std::size_t size;
	read(size);
	if (size == 0)
		return false;

	vec.clear();
	return read_vec<T>(size, vec, fn);
}

template<class V>
bool read_size_vec(V& vec)
{
	std::size_t size;

	vec.clear();
	if (!read(size) || size == 0)
		return false;

	return read_vec(size, vec);
}

template<class V>
bool read_vec_ln(V& vec)
{
	using T = typename V::value_type;

	std::string str;
	if (!read_ln(str))
		return false;

	std::istringstream ss(str);

	T x;
	while (ss >> x)
		vec.push_back(x);

	return !vec.empty();
}

void write()
{}

template<typename T>
void write(const T& arg)
{
	std::cout << arg;
}

template<typename T, typename... Ts>
void write(const T& arg, const Ts&... args)
{
	write(arg);
	write(args...);
}

template<typename... Ts>
void write_ln(const Ts&... args)
{
	write(args..., '\n');
}

template<class It, class Fn, typename Join>
void write_range(It first, It last, Fn fn, Join join)
{
	if (first == last)
		return;

	write(fn(*first++));
	while (first != last)
		write(join, fn(*first++));
}

template<class It, typename Join>
void write_range(It first, It last, Join join)
{
	using T = typename std::iterator_traits<It>::value_type;
	write_range(first, last, [](const T& x) { return x; }, join);
}

template<class Vec, class... Args>
void write_vec(const Vec& vec, Args... args)
{
	write_range(vec.begin(), vec.end(), args...);
}

#include <cassert>
#include <fstream>
#include <iostream>
#include <string>
#include <type_traits>
#include <utility>

class CP0
{
public:
	CP0()
	{
		std::ios_base::sync_with_stdio(false);

#ifdef OFFLINE_JUDGE
		file_.open("input.txt");
		assert(file_);
		istream = &file_;

		std::cout << std::unitbuf;
#else
		istream = &std::cin;
#endif
	}

private:
#ifdef OFFLINE_JUDGE
	std::ifstream file_;
#endif
};

class CP1 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int n_test_cases;
		(*istream) >> n_test_cases;
		ignore_line();

		for (unsigned int i = 1; i <= n_test_cases; ++i)
		{
			read_input();
			assert(!istream->bad());
			solve(i);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP2 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int i = 1;
		while (read_input())
		{
			assert(!istream->bad());
			solve(i++);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual bool read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP3 : public CP0
{
public:
	int run()
	{
		init();

		read_input();
		assert(!istream->bad());
		solve();

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve() = 0;
	virtual void end()
	{}
};

#define MAIN                                                                                                           \
	int main()                                                                                                         \
	{                                                                                                                  \
		CP app;                                                                                                        \
		return app.run();                                                                                              \
	}

#include <cassert>
#include <queue>
#include <string>
#include <unordered_map>
#include <vector>

class CP : public CP2
{
private:
	using T = unsigned int;
	using El_to_team_map = std::unordered_map<T, std::size_t>;
	static constexpr auto invalid_element = static_cast<T>(-1);

	enum class Command_type
	{
		ENQUEUE,
		DEQUEUE
	};

	struct Command
	{
		Command(Command_type type, T arg = invalid_element) : type(type), arg(arg)
		{}

		Command_type type;
		T arg;
	};

	class Queue
	{
	private:
	public:
		Queue(std::size_t n_teams, const El_to_team_map& el_to_team_map) :
			n_teams_(n_teams), el_to_team_map_(el_to_team_map)
		{}

		void push(T value)
		{
			const auto team = el_to_team_map_.at(value);
			assert(team < n_teams_);

			for (auto& q : queues_)
				if (q.first == team)
				{
					q.second.push(value);
					return;
				}

			queues_.push_back({team, {}});
			queues_.back().second.push(value);
		}

		T pop()
		{
			for (auto it = queues_.begin(); it != queues_.end(); ++it)
				if (!it->second.empty())
				{
					auto value = it->second.front();
					it->second.pop();
					if (it->second.empty())
						queues_.erase(it);

					return value;
				}

			return invalid_element;
		}

	private:
		const std::size_t n_teams_;
		const El_to_team_map& el_to_team_map_;
		std::vector<std::pair<std::size_t, std::queue<T>>> queues_;
	};

private:
	virtual bool read_input() override
	{
		if (!read(n_teams_) || n_teams_ == 0)
			return false;

		assert(n_teams_ <= 1000);

		teams_.resize(n_teams_);
		for (auto& team : teams_)
			read_size_vec(team);

		std::string command;
		T arg;

		commands_.clear();
		while (read(command) && command != "STOP")
			if (command == "ENQUEUE")
			{
				read(arg);
				commands_.push_back({Command_type::ENQUEUE, arg});
			}
			else if (command == "DEQUEUE")
				commands_.push_back({Command_type::DEQUEUE});

		return true;
	}

	virtual void solve(unsigned int i_case) override
	{
		el_to_team_map_.clear();
		for (std::size_t i = 0; i < n_teams_; ++i)
		{
			const auto& team = teams_[i];
			for (auto element : team)
				el_to_team_map_.insert({element, i});
		}

		Queue q(n_teams_, el_to_team_map_);

		write_ln("Scenario #", i_case);
		for (const auto& command : commands_)
		{
			switch (command.type)
			{
			case Command_type::ENQUEUE:
				q.push(command.arg);
				break;

			case Command_type::DEQUEUE:
				write_ln(q.pop());
			}
		}

		write_ln();
	}

private:
	std::size_t n_teams_;
	std::vector<std::vector<T>> teams_;
	std::vector<Command> commands_;
	El_to_team_map el_to_team_map_;
};

MAIN


