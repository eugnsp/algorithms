#include <utility>
#include <memory>

namespace std
{
template<class T, class U = T>
T exchange(T& obj, U&& new_value)
{
    T old_value = std::move(obj);
    obj = std::forward<U>(new_value);
    return old_value;
}

template<class T, class... Args>
std::unique_ptr<T> make_unique(Args&&... args)
{
	return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
}
}

#include <cassert>
#include <cstddef>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <sstream>
#include <string>
#include <type_traits>

std::istream* istream;

bool ignore_line()
{
	return !!istream->ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

char peek()
{
	const auto ch = istream->peek();

	assert(istream->good());
	return static_cast<char>(ch);
}

bool read()
{
	return true;
}

template<typename T>
bool read(T& arg)
{
	return !!((*istream) >> arg);
}

template<typename T, typename... Ts>
bool read(T& arg, Ts&... args)
{
	return read(arg) && read(args...);
}

template<typename T1, typename T2>
bool read(std::pair<T1, T2>& pair)
{
	return read(pair.first, pair.second);
}

bool read_ln_non_empty(std::string& str)
{
	return !!std::getline(*istream, str) && !str.empty();
}

bool read_ln(std::string& str)
{
	return !!std::getline(*istream, str);
}

template<typename... Ts>
bool read_ln(Ts&... args)
{
	return read(args...) && ignore_line();
}

template<class T = void, class V, class Fn>
bool read_vec(std::size_t count, V& vec, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename V::value_type, T>::type;

	vec.reserve(vec.size() + count);
	for (std::size_t i = 0; i < count; ++i)
	{
		S y;
		if (!read(y))
			return false;
		vec.push_back(fn(y));
	}
	return true;
}

template<class V>
bool read_vec(std::size_t count, V& vec)
{
	using T = typename V::value_type;
	return read_vec<T>(count, vec, [](T x) { return x; });
}

template<typename T = void, class V, class Fn>
bool read_size_vec(V& vec, Fn fn)
{
	std::size_t size;
	read(size);
	if (size == 0)
		return false;

	vec.clear();
	return read_vec<T>(size, vec, fn);
}

template<class V>
bool read_size_vec(V& vec)
{
	std::size_t size;

	vec.clear();
	if (!read(size) || size == 0)
		return false;

	return read_vec(size, vec);
}

template<class V>
bool read_vec_ln(V& vec)
{
	using T = typename V::value_type;

	std::string str;
	if (!read_ln(str))
		return false;

	std::istringstream ss(str);

	T x;
	while (ss >> x)
		vec.push_back(x);

	return !vec.empty();
}

void write()
{}

template<typename T>
void write(const T& arg)
{
	std::cout << arg;
}

template<typename T, typename... Ts>
void write(const T& arg, const Ts&... args)
{
	write(arg);
	write(args...);
}

template<typename... Ts>
void write_ln(const Ts&... args)
{
	write(args..., '\n');
}

template<class It, class Fn, typename Join>
void write_range(It first, It last, Fn fn, Join join)
{
	if (first == last)
		return;

	write(fn(*first++));
	while (first != last)
		write(join, fn(*first++));
}

template<class It, typename Join>
void write_range(It first, It last, Join join)
{
	using T = typename std::iterator_traits<It>::value_type;
	write_range(first, last, [](const T& x) { return x; }, join);
}

template<class Vec, class... Args>
void write_vec(const Vec& vec, Args... args)
{
	write_range(vec.begin(), vec.end(), args...);
}

#include <cassert>
#include <fstream>
#include <iostream>
#include <string>
#include <type_traits>
#include <utility>

class CP0
{
public:
	CP0()
	{
		std::ios_base::sync_with_stdio(false);

#ifdef OFFLINE_JUDGE
		file_.open("input.txt");
		assert(file_);
		istream = &file_;

		std::cout << std::unitbuf;
#else
		istream = &std::cin;
#endif
	}

private:
#ifdef OFFLINE_JUDGE
	std::ifstream file_;
#endif
};

class CP1 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int n_test_cases;
		(*istream) >> n_test_cases;
		ignore_line();

		for (unsigned int i = 1; i <= n_test_cases; ++i)
		{
			read_input();
			assert(!istream->bad());
			solve(i);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP2 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int i = 1;
		while (read_input())
		{
			assert(!istream->bad());
			solve(i++);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual bool read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP3 : public CP0
{
public:
	int run()
	{
		init();

		read_input();
		assert(!istream->bad());
		solve();

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve() = 0;
	virtual void end()
	{}
};

#define MAIN                                                                                                           \
	int main()                                                                                                         \
	{                                                                                                                  \
		CP app;                                                                                                        \
		return app.run();                                                                                              \
	}

#include <cstddef>
#include <utility>

template<typename I = std::size_t>
struct Position
{
	using Type = I;

	I row = 0;
	I col = 0;

	Position() = default;

	constexpr Position(I row, I col) : row(row), col(col)
	{}

	Position& operator+=(const Position& pos)
	{
		row += pos.row;
		col += pos.col;
		return *this;
	}

	Position& operator-=(const Position& pos)
	{
		row -= pos.row;
		col -= pos.col;
		return *this;
	}

	void to_zero_based()
	{
		--row;
		--col;
	}
};

template<typename I>
bool operator==(const Position<I>& pos1, const Position<I>& pos2)
{
	return pos1.row == pos2.row && pos1.col == pos2.col;
}

template<typename I>
bool operator!=(const Position<I>& pos1, const Position<I>& pos2)
{
	return !(pos1 == pos2);
}

template<typename I>
bool operator<(const Position<I>& pos1, const Position<I>& pos2)
{
	return std::make_pair(pos1.row, pos1.col) < std::make_pair(pos2.row, pos2.col);
}

template<typename I>
Position<I> operator+(Position<I> pos1, const Position<I>& pos2)
{
	return (pos1 += pos2);
}

template<typename I>
Position<I> operator-(Position<I> pos1, const Position<I>& pos2)
{
	return (pos1 -= pos2);
}

template<typename I>
bool read(Position<I>& pos)
{
	return read(pos.row, pos.col);
}

#include <type_traits>

template<typename T = void, class Matrix, class Fn>
bool read_matrix(Matrix& mat, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename Matrix::Type, T>::type;

	for (typename Matrix::Size row = 0; row < mat.rows(); ++row)
		for (typename Matrix::Size col = 0; col < mat.cols(); ++col)
		{
			S s;
			if (!read(s))
				return false;
			mat(row, col) = fn(s);
		}

	return true;
}

template<class Matrix>
bool read_matrix(Matrix& mat)
{
	return read_matrix<typename Matrix::Type>(mat,
		[](const typename Matrix::Type& x) { return x; });
}

template<typename T = void, class Matrix, class Fn>
bool read_transposed_matrix(Matrix& mat, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename Matrix::Type, T>::type;

	for (typename Matrix::Size row = 0; row < mat.rows(); ++row)
		for (typename Matrix::Size col = 0; col < mat.cols(); ++col)
		{
			S s;
			if (!read(s))
				return false;
			mat(col, row) = fn(s);
		}

	return true;
}

template<class Matrix>
bool read_transposed_matrix(Matrix& mat)
{
	return read_transposed_matrix<typename Matrix::Type>(mat,
		[](const typename Matrix::Type& x) { return x; });
}

template<class Matrix>
bool write_matrix(Matrix& mat)
{
	for (typename Matrix::Size row = 0; row < mat.rows(); ++row)
	{
		for (typename Matrix::Size col = 0; col < mat.cols(); ++col)
			write(mat(row, col), ' ');
		write_ln();
	}

	return true;
}

#include <array>
#include <cassert>
#include <cstddef>

template<typename T, std::size_t rows_, std::size_t cols_>
class Matrix
{
public:
	using Type = T;
	using Size = std::size_t;

public:
	Matrix() = default;

	Matrix(const Type& value)
	{
		fill(value);
	}

	template<typename... Ts>
	Matrix(const Ts&... values) : data_{values...}
	{}

	Type& operator[](Size index)
	{
		return data_[index];
	}

	const Type& operator[](Size index) const
	{
		assert(index < size());
		return data_[index];
	}

	Type& operator()(Size row, Size col)
	{
		assert(row < rows() && col < cols());
		return data_[index(row, col)];
	}

	const Type& operator()(Size row, Size col) const
	{
		assert(row < rows() && col < cols());
		return data_[index(row, col)];
	}

	Type& operator()(Position<Size> pos)
	{
		return (*this)(pos.row, pos.col);
	}

	const Type& operator()(Position<Size> pos) const
	{
		return (*this)(pos.row, pos.col);
	}

	void fill(const Type& value)
	{
		data_.fill(value);
	}

	static constexpr Size rows()
	{
		return rows_;
	}

	static constexpr Size cols()
	{
		return cols_;
	}

	static constexpr Size size()
	{
		return rows() * cols();
	}

	static Size index(Size row, Size col)
	{
		return row + rows() * col;
	}

	static Size index(Position<Size> pos)
	{
		return index(pos.row, pos.col);
	}

	static Position<Size> pos(Size index)
	{
		return {index % rows(), index / rows()};
	}

private:
	std::array<Type, rows_ * cols_> data_;
};

template<class Matrix>
bool is_inside_extents(Position<typename Matrix::Size> pos)
{
	return pos.row < Matrix::rows() && pos.col < Matrix::cols();
}

#include <cassert>
#include <cstdint>

constexpr std::size_t small_size = 3;
constexpr std::size_t size = small_size * small_size;

using Mask = std::uint16_t;
using Pos = Position<std::size_t>;

enum class Status
{
	ILLEGAL,
	UNIQUE,
	AMBIGUOUS,
	IMPOSSIBLE
};

struct Pattern
{
	Matrix<Mask, size, size> cells;
	Matrix<Mask, size, 1> rows;
	Matrix<Mask, size, 1> cols;
	Matrix<Mask, small_size, small_size> rects;
};

constexpr Mask digit_to_mask(const unsigned int digit)
{
	return digit == 0 ? 0 : static_cast<Mask>(1) << (digit - 1);
}

bool prepare_masks(Pattern& pattern)
{
	pattern.rows.fill(0);
	pattern.cols.fill(0);
	pattern.rects.fill(0);

	for (std::size_t col = 0; col < size; ++col)
		for (std::size_t row = 0; row < size; ++row)
		{
			const auto m = pattern.cells(row, col);

			if (pattern.rows[row] & m)
				return false;
			pattern.rows[row] |= m;

			if (pattern.cols[col] & m)
				return false;
			pattern.cols[col] |= m;

			if (pattern.rects(row / small_size, col / small_size) & m)
				return false;
			pattern.rects(row / small_size, col / small_size) |= m;
		}

	return true;
}

Pos find_first_empty(const Pattern& pattern, const Pos& last)
{
	for (auto i = pattern.cells.index(last) + 1; i < size * size; ++i)
		if (!pattern.cells[i])
			return pattern.cells.pos(i);

	return {size, size};
}

Mask available_digits(const Pattern& pattern, const Pos& pos)
{
	return ~(pattern.rows[pos.row] | pattern.cols[pos.col] | pattern.rects(pos.row / small_size, pos.col / small_size));
}

void toggle(Pattern& pattern, const Pos& pos, const Mask mask)
{
	pattern.cells(pos) ^= mask;
	pattern.rows[pos.row] ^= mask;
	pattern.cols[pos.col] ^= mask;
	pattern.rects(pos.row / small_size, pos.col / small_size) ^= mask;
}

bool solve_sudoku(Pattern& pattern, const Pos last, std::size_t& n_solutions)
{
	const auto next = find_first_empty(pattern, last);
	if (next == Pos{size, size})
	{
		++n_solutions;
		return true;
	}

	const auto available_mask = available_digits(pattern, next);
	for (Mask digit_mask = 1; digit_mask <= digit_to_mask(size); digit_mask <<= 1)
		if (digit_mask & available_mask)
		{
			toggle(pattern, next, digit_mask);
			if (solve_sudoku(pattern, next, n_solutions) && n_solutions > 1)
				return true;

			toggle(pattern, next, digit_mask);
		}

	return false;
}

Status check_sudoku(Pattern& pattern)
{
	if (!prepare_masks(pattern))
		return Status::ILLEGAL;

	std::size_t n_solutions = 0;
	solve_sudoku(pattern, Pos{static_cast<std::size_t>(-1), 0}, n_solutions);

	switch (n_solutions)
	{
	case 0:
		return Status::IMPOSSIBLE;

	case 1:
		return Status::UNIQUE;

	default:
		return Status::AMBIGUOUS;
	}
}

class CP : public CP2
{
private:
	virtual bool read_input() override
	{
		return read_matrix<unsigned int>(board_.cells, digit_to_mask);
	}

	virtual void solve(unsigned int i_case) override
	{
		const auto status = check_sudoku(board_);

		write("Case ", i_case, ": ");
		switch (status)
		{
		case Status::ILLEGAL:
			write_ln("Illegal.");
			break;

		case Status::UNIQUE:
			write_ln("Unique.");
			break;

		case Status::AMBIGUOUS:
			write_ln("Ambiguous.");
			break;

		case Status::IMPOSSIBLE:
			write_ln("Impossible.");
		}
	}

private:
	Pattern board_;
};

MAIN


