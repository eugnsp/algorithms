#include <utility>
#include <memory>

namespace std
{
template<class T, class U = T>
T exchange(T& obj, U&& new_value)
{
    T old_value = std::move(obj);
    obj = std::forward<U>(new_value);
    return old_value;
}

template<class T, class... Args>
std::unique_ptr<T> make_unique(Args&&... args)
{
	return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
}
}

#include <cassert>
#include <cstddef>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <sstream>
#include <string>
#include <type_traits>

std::istream* istream;

bool ignore_line()
{
	return !!istream->ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

char peek()
{
	const auto ch = istream->peek();

	assert(istream->good());
	return static_cast<char>(ch);
}

bool read()
{
	return true;
}

template<typename T>
bool read(T& arg)
{
	return !!((*istream) >> arg);
}

template<typename T, typename... Ts>
bool read(T& arg, Ts&... args)
{
	return read(arg) && read(args...);
}

template<typename T1, typename T2>
bool read(std::pair<T1, T2>& pair)
{
	return read(pair.first, pair.second);
}

bool read_ln_non_empty(std::string& str)
{
	return !!std::getline(*istream, str) && !str.empty();
}

bool read_ln(std::string& str)
{
	return !!std::getline(*istream, str);
}

template<typename... Ts>
bool read_ln(Ts&... args)
{
	return read(args...) && ignore_line();
}

template<class T = void, class V, class Fn>
bool read_vec(std::size_t count, V& vec, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename V::value_type, T>::type;

	vec.reserve(vec.size() + count);
	for (std::size_t i = 0; i < count; ++i)
	{
		S y;
		if (!read(y))
			return false;
		vec.push_back(fn(y));
	}
	return true;
}

template<class V>
bool read_vec(std::size_t count, V& vec)
{
	using T = typename V::value_type;
	return read_vec<T>(count, vec, [](T x) { return x; });
}

template<typename T = void, class V, class Fn>
bool read_size_vec(V& vec, Fn fn)
{
	std::size_t size;
	read(size);
	if (size == 0)
		return false;

	vec.clear();
	return read_vec<T>(size, vec, fn);
}

template<class V>
bool read_size_vec(V& vec)
{
	std::size_t size;

	vec.clear();
	if (!read(size) || size == 0)
		return false;

	return read_vec(size, vec);
}

template<class V>
bool read_vec_ln(V& vec)
{
	using T = typename V::value_type;

	std::string str;
	if (!read_ln(str))
		return false;

	std::istringstream ss(str);

	T x;
	while (ss >> x)
		vec.push_back(x);

	return !vec.empty();
}

void write()
{}

template<typename T>
void write(const T& arg)
{
	std::cout << arg;
}

template<typename T, typename... Ts>
void write(const T& arg, const Ts&... args)
{
	write(arg);
	write(args...);
}

template<typename... Ts>
void write_ln(const Ts&... args)
{
	write(args..., '\n');
}

template<class It, class Fn, typename Join>
void write_range(It first, It last, Fn fn, Join join)
{
	if (first == last)
		return;

	write(fn(*first++));
	while (first != last)
		write(join, fn(*first++));
}

template<class It, typename Join>
void write_range(It first, It last, Join join)
{
	using T = typename std::iterator_traits<It>::value_type;
	write_range(first, last, [](const T& x) { return x; }, join);
}

template<class Vec, class... Args>
void write_vec(const Vec& vec, Args... args)
{
	write_range(vec.begin(), vec.end(), args...);
}

#include <cassert>
#include <fstream>
#include <iostream>
#include <string>
#include <type_traits>
#include <utility>

class CP0
{
public:
	CP0()
	{
		std::ios_base::sync_with_stdio(false);

#ifdef OFFLINE_JUDGE
		file_.open("input.txt");
		assert(file_);
		istream = &file_;

		std::cout << std::unitbuf;
#else
		istream = &std::cin;
#endif
	}

private:
#ifdef OFFLINE_JUDGE
	std::ifstream file_;
#endif
};

class CP1 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int n_test_cases;
		(*istream) >> n_test_cases;
		ignore_line();

		for (unsigned int i = 1; i <= n_test_cases; ++i)
		{
			read_input();
			assert(!istream->bad());
			solve(i);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP2 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int i = 1;
		while (read_input())
		{
			assert(!istream->bad());
			solve(i++);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual bool read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP3 : public CP0
{
public:
	int run()
	{
		init();

		read_input();
		assert(!istream->bad());
		solve();

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve() = 0;
	virtual void end()
	{}
};

#define MAIN                                                                                                           \
	int main()                                                                                                         \
	{                                                                                                                  \
		CP app;                                                                                                        \
		return app.run();                                                                                              \
	}

#include <algorithm>
#include <cassert>
#include <cstddef>
#include <iomanip>
#include <vector>

struct Station
{
	double distance;
	double price;
};

class Budget_travel
{
public:
	Budget_travel(double distance, double tank_capacity, double miles_per_gallon, double cost,
		const std::vector<Station>& stations) :
		distance_(distance),
		tank_capacity_(tank_capacity), miles_per_gallon_(miles_per_gallon), init_cost_(cost), stations_(stations)
	{}

	double min_price() const
	{
		return init_cost_ + min_price(tank_capacity_, 0);
	}

private:
	double min_price(double remaining_fuel, unsigned int station) const
	{
		constexpr auto cents_in_dollar = 100;
		constexpr double snack_price = 2.00;

		remaining_fuel -= get_distance_covered(station) / miles_per_gallon_;
		assert(remaining_fuel >= 0);

		const auto fuel_to_next = get_distance_to_next(station) / miles_per_gallon_;
		const bool enough_fuel_to_next = (remaining_fuel >= fuel_to_next);
		const double fuel_price = (tank_capacity_ - remaining_fuel) * stations_[station].price / cents_in_dollar;

		if (next_station_exists(station))
		{
			const bool no_stop = (remaining_fuel > tank_capacity_ / 2) && enough_fuel_to_next;
			if (no_stop)
				return min_price(remaining_fuel, station + 1);

			const double with_stop = snack_price + fuel_price + min_price(tank_capacity_, station + 1);
			if (!enough_fuel_to_next)
				return with_stop;

			const double without_stop = min_price(remaining_fuel, station + 1);
			return std::min(with_stop, without_stop);
		}
		else
			return enough_fuel_to_next ? 0 : snack_price + fuel_price;
	}

	double get_distance_covered(unsigned int station) const
	{
		if (station == 0)
			return stations_.front().distance;
		else
			return stations_[station].distance - stations_[station - 1].distance;
	}

	double get_distance_to_next(unsigned int station) const
	{
		if (next_station_exists(station))
			return stations_[station + 1].distance - stations_[station].distance;
		else
			return distance_ - stations_.back().distance;
	}

	bool next_station_exists(unsigned int station) const
	{
		return station + 1 < stations_.size();
	}

private:
	const double distance_;
	const double tank_capacity_;
	const double miles_per_gallon_;
	const double init_cost_;
	const std::vector<Station>& stations_;
};

class CP : public CP2
{
private:
	virtual bool read_input() override
	{
		if (!read(distance_) || distance_ < 0)
			return false;

		std::size_t n_stations;
		read(tank_capacity_, miles_per_gallon_, init_cost_, n_stations);

		assert(n_stations <= 50);
		stations_.resize(n_stations);

		for (auto& s : stations_)
		{
			read(s.distance, s.price);
			assert(s.distance <= distance_);
		}

		return true;
	}

	virtual void solve(unsigned int i_case) override
	{
		const Budget_travel travel(distance_, tank_capacity_, miles_per_gallon_, init_cost_, stations_);
		write_ln("Data Set #", i_case);
		write_ln("minimum cost = $", std::fixed, std::setprecision(2), travel.min_price());
	}

private:
	double distance_;
	double tank_capacity_;
	double miles_per_gallon_;
	double init_cost_;
	std::vector<Station> stations_;
};

MAIN


