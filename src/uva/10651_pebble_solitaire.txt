#include <utility>
#include <memory>

namespace std
{
template<class T, class U = T>
T exchange(T& obj, U&& new_value)
{
    T old_value = std::move(obj);
    obj = std::forward<U>(new_value);
    return old_value;
}

template<class T, class... Args>
std::unique_ptr<T> make_unique(Args&&... args)
{
	return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
}
}

#include <cassert>
#include <cstddef>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <sstream>
#include <string>
#include <type_traits>

std::istream* istream;

bool ignore_line()
{
	return !!istream->ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

char peek()
{
	const auto ch = istream->peek();

	assert(istream->good());
	return static_cast<char>(ch);
}

bool read()
{
	return true;
}

template<typename T>
bool read(T& arg)
{
	return !!((*istream) >> arg);
}

template<typename T, typename... Ts>
bool read(T& arg, Ts&... args)
{
	return read(arg) && read(args...);
}

template<typename T1, typename T2>
bool read(std::pair<T1, T2>& pair)
{
	return read(pair.first, pair.second);
}

bool read_ln_non_empty(std::string& str)
{
	return !!std::getline(*istream, str) && !str.empty();
}

bool read_ln(std::string& str)
{
	return !!std::getline(*istream, str);
}

template<typename... Ts>
bool read_ln(Ts&... args)
{
	return read(args...) && ignore_line();
}

template<class T = void, class V, class Fn>
bool read_vec(std::size_t count, V& vec, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename V::value_type, T>::type;

	vec.reserve(vec.size() + count);
	for (std::size_t i = 0; i < count; ++i)
	{
		S y;
		if (!read(y))
			return false;
		vec.push_back(fn(y));
	}
	return true;
}

template<class V>
bool read_vec(std::size_t count, V& vec)
{
	using T = typename V::value_type;
	return read_vec<T>(count, vec, [](T x) { return x; });
}

template<typename T = void, class V, class Fn>
bool read_size_vec(V& vec, Fn fn)
{
	std::size_t size;
	read(size);
	if (size == 0)
		return false;

	vec.clear();
	return read_vec<T>(size, vec, fn);
}

template<class V>
bool read_size_vec(V& vec)
{
	std::size_t size;

	vec.clear();
	if (!read(size) || size == 0)
		return false;

	return read_vec(size, vec);
}

template<class V>
bool read_vec_ln(V& vec)
{
	using T = typename V::value_type;

	std::string str;
	if (!read_ln(str))
		return false;

	std::istringstream ss(str);

	T x;
	while (ss >> x)
		vec.push_back(x);

	return !vec.empty();
}

void write()
{}

template<typename T>
void write(const T& arg)
{
	std::cout << arg;
}

template<typename T, typename... Ts>
void write(const T& arg, const Ts&... args)
{
	write(arg);
	write(args...);
}

template<typename... Ts>
void write_ln(const Ts&... args)
{
	write(args..., '\n');
}

template<class It, class Fn, typename Join>
void write_range(It first, It last, Fn fn, Join join)
{
	if (first == last)
		return;

	write(fn(*first++));
	while (first != last)
		write(join, fn(*first++));
}

template<class It, typename Join>
void write_range(It first, It last, Join join)
{
	using T = typename std::iterator_traits<It>::value_type;
	write_range(first, last, [](const T& x) { return x; }, join);
}

template<class Vec, class... Args>
void write_vec(const Vec& vec, Args... args)
{
	write_range(vec.begin(), vec.end(), args...);
}

#include <cassert>
#include <fstream>
#include <iostream>
#include <string>
#include <type_traits>
#include <utility>

class CP0
{
public:
	CP0()
	{
		std::ios_base::sync_with_stdio(false);

#ifdef OFFLINE_JUDGE
		file_.open("input.txt");
		assert(file_);
		istream = &file_;

		std::cout << std::unitbuf;
#else
		istream = &std::cin;
#endif
	}

private:
#ifdef OFFLINE_JUDGE
	std::ifstream file_;
#endif
};

class CP1 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int n_test_cases;
		(*istream) >> n_test_cases;
		ignore_line();

		for (unsigned int i = 1; i <= n_test_cases; ++i)
		{
			read_input();
			assert(!istream->bad());
			solve(i);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP2 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int i = 1;
		while (read_input())
		{
			assert(!istream->bad());
			solve(i++);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual bool read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP3 : public CP0
{
public:
	int run()
	{
		init();

		read_input();
		assert(!istream->bad());
		solve();

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve() = 0;
	virtual void end()
	{}
};

#define MAIN                                                                                                           \
	int main()                                                                                                         \
	{                                                                                                                  \
		CP app;                                                                                                        \
		return app.run();                                                                                              \
	}

#include <cstddef>
#include <string>
#include <type_traits>
#include <cassert>

class Bit_mask
{
public:
	using Mask = unsigned long;
	using Length = std::size_t;

public:
	explicit Bit_mask(std::size_t length, Mask mask = 0ul) : mask_(mask), length_(length)
	{
		assert(length <= 8 * sizeof(Mask));
		mask_visualization();
	}

	template<
		class Container,
		typename = typename std::enable_if<
			std::is_same<typename Container::value_type, bool>::value>::type>
	explicit Bit_mask(const Container& mask) : Bit_mask(mask.size())
	{
		Mask nth_bit = 1ul;
		for (auto f : mask)
		{
			if (f)
				mask_ |= nth_bit;
			nth_bit <<= 1;
		}
		mask_visualization();
	}

	explicit Bit_mask(const std::string& mask) : Bit_mask(mask.length(), std::stoul(mask, 0, 2))
	{}

	Bit_mask(const Bit_mask& other) : Bit_mask(other.length_, other.mask_)
	{}

	Bit_mask& operator=(const Bit_mask& other)
	{
		assert(length_ == other.length_);
		mask_ = other.mask_;
		mask_visualization();
		return *this;
	};

	operator Mask() const
	{
		return mask_;
	}

	bool operator[](Length i) const
	{
		assert(i < length_);
		return mask_ & ith_bit(i);
	}

	bool all() const
	{
		return mask_ == all_bits(length_);
	}

	bool any() const
	{
		return mask_ != 0;
	}

	bool none() const
	{
		return !any();
	}

	Bit_mask& set(Length i)
	{
		assert(i < length_);
		mask_ |= ith_bit(i);
		mask_visualization();
		return *this;
	}

	Bit_mask& set()
	{
		mask_ = all_bits(length_);
		mask_visualization();
		return *this;
	}

	Bit_mask& reset(Length i)
	{
		assert(i < length_);
		mask_ &= ~ith_bit(i);
		mask_visualization();
		return *this;
	}

	Bit_mask& reset()
	{
		mask_ = 0;
		mask_visualization();
		return *this;
	}

	Bit_mask& flip(Length i)
	{
		assert(i < length_);
		mask_ ^= ith_bit(i);
		mask_visualization();
		return *this;
	}

	Bit_mask& flip()
	{
		mask_ ^= all_bits(length_);
		mask_visualization();
		return *this;
	}

	Bit_mask with_set(Length i) const
	{
		assert(i < length_);
		auto tmp(*this);
		tmp.mask_ |= ith_bit(i);
		return tmp;
	}

	Bit_mask with_reset(Length i) const
	{
		assert(i < length_);
		auto tmp(*this);
		tmp.mask_ &= ~ith_bit(i);
		return tmp;
	}

	Bit_mask with_flipped(Length i) const
	{
		assert(i < length_);
		auto tmp(*this);
		tmp.mask_ ^= ith_bit(i);
		return tmp;
	}

#ifdef __GNUG__
	Length count() const
	{
		return static_cast<Length>(__builtin_popcountl(mask_));
	}
#else
	Length count() const
	{
		Length n = 0;
		auto mask = mask_;
		while (mask != 0)
		{
			mask &= mask - 1; // Reset the right-most bit
			++n;
		}
		return n;
	}
#endif

	Bit_mask& xor_at_pos(Length pos, const Bit_mask& other)
	{
		assert(pos + other.length_ <= length_);
		mask_ ^= (other.mask_ << pos);
		mask_visualization();
		return *this;
	}

	void truncate(Length new_length)
	{
		length_ = new_length;
		mask_ &= all_bits(new_length);
		mask_visualization();
	}

	Length length() const
	{
		return length_;
	}

	Mask size() const
	{
		return 1ul << length_;
	}

	std::string to_string() const
	{
		std::string s(length_, '0');
		for (Length i = 0; i < length_; ++i)
			if ((*this)[i])
				s[length_ - i - 1] = '1';

		return s;
	}

	Bit_mask operator<<(Length shift) const
	{
		auto tmp(*this);
		tmp.mask_ <<= shift;
		return tmp;
	}

	Bit_mask& operator<<=(Length shift)
	{
		mask_ <<= shift;
		mask_visualization();
		return *this;
	}

	Bit_mask operator>>(Length shift) const
	{
		auto tmp(*this);
		tmp.mask_ >>= shift;
		return tmp;
	}

	Bit_mask& operator>>=(Length shift)
	{
		mask_ >>= shift;
		mask_visualization();
		return *this;
	}

	Bit_mask operator&(const Bit_mask& other) const
	{
		assert(length_ == other.length_);
		auto tmp(*this);
		tmp.mask_ &= other.mask_;
		return tmp;
	}

	Bit_mask operator|(const Bit_mask& other) const
	{
		assert(length_ == other.length_);
		auto tmp(*this);
		tmp.mask_ |= other.mask_;
		return tmp;
	}

	Bit_mask operator^(const Bit_mask& other) const
	{
		assert(length_ == other.length_);
		auto tmp(*this);
		tmp.mask_ ^= other.mask_;
		return tmp;
	}

	Bit_mask& operator++()
	{
		++mask_;
		mask_visualization();
		return *this;
	}

	Bit_mask& operator--()
	{
		--mask_;
		mask_visualization();
		return *this;
	}

	bool operator==(const Bit_mask& other) const
	{
		assert(length_ == other.length_);
		return mask_ == other.mask_;
	}

	bool operator!=(const Bit_mask& other) const
	{
		return !(*this == other);
	}

	bool operator<(const Bit_mask& other) const
	{
		assert(length_ == other.length_);
		return mask_ < other.mask_;
	}

	bool operator<=(const Bit_mask& other) const
	{
		assert(length_ == other.length_);
		return mask_ <= other.mask_;
	}

private:
	static Mask ith_bit(Length i)
	{
		return 1ul << i;
	}

	static Mask all_bits(Length length)
	{
		if (length == 8 * sizeof(Mask))
			return static_cast<Mask>(-1);
		else
			return ith_bit(length) - 1ul;
	}

	void mask_visualization()
	{
#ifdef _DEBUG
		mask_str_[length_] = 0;
		for (Length i = 0; i < length_; ++i)
			mask_str_[length_ - i - 1] = (*this)[i] ? '1' : '0';
#endif
	}

private:
	Mask mask_ = 0;
	Length length_ = 0;

#ifdef _DEBUG
	char mask_str_[8 * sizeof(Mask) + 1];
#endif
};

#include <algorithm>
#include <array>
#include <cassert>
#include <cstddef>
#include <vector>

class CP : public CP1
{
private:
	using Number = unsigned int;
	static constexpr auto max_number = static_cast<Number>(-1);
	static constexpr std::size_t n_pebbles = 12;

private:
	virtual void read_input() override
	{
		std::generate_n(pebbles_.begin(), n_pebbles, []() {
			char s;
			read(s);
			assert(s == 'o' || s == '-');
			return (s == 'o');
		});
	}

	virtual void solve(unsigned int) override
	{
		m_.assign(Bit_mask(n_pebbles).size(), +max_number); // rvalue
		write_ln(min_number(Bit_mask(pebbles_)));
	}

	Number min_number(Bit_mask mask)
	{
		auto& m = m_[mask];
		if (m != max_number)
			return m;

		const Bit_mask m111(3, 0b111);
		const Bit_mask m011(3, 0b011);
		const Bit_mask m110(3, 0b110);

		bool move_found = false;
		for (std::size_t i = 0; i < n_pebbles - 2; ++i)
		{
			auto shifted_mask = (mask >> i);
			shifted_mask.truncate(3);

			if (shifted_mask == m011 || shifted_mask == m110)
			{
				auto move_mask = mask;
				move_mask.xor_at_pos(i, m111);

				m = std::min(m, min_number(move_mask));
				move_found = true;
			}
		}

		if (!move_found)
			m = static_cast<std::size_t>(mask.count());

		return m;
	}

private:
	std::array<bool, n_pebbles> pebbles_;
	std::vector<Number> m_;
};

MAIN


