#include <utility>
#include <memory>

namespace std
{
template<class T, class U = T>
T exchange(T& obj, U&& new_value)
{
    T old_value = std::move(obj);
    obj = std::forward<U>(new_value);
    return old_value;
}

template<class T, class... Args>
std::unique_ptr<T> make_unique(Args&&... args)
{
	return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
}
}

#include <cassert>
#include <cstddef>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <sstream>
#include <string>
#include <type_traits>

std::istream* istream;

bool ignore_line()
{
	return !!istream->ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

char peek()
{
	const auto ch = istream->peek();

	assert(istream->good());
	return static_cast<char>(ch);
}

bool read()
{
	return true;
}

template<typename T>
bool read(T& arg)
{
	return !!((*istream) >> arg);
}

template<typename T, typename... Ts>
bool read(T& arg, Ts&... args)
{
	return read(arg) && read(args...);
}

template<typename T1, typename T2>
bool read(std::pair<T1, T2>& pair)
{
	return read(pair.first, pair.second);
}

bool read_ln_non_empty(std::string& str)
{
	return !!std::getline(*istream, str) && !str.empty();
}

bool read_ln(std::string& str)
{
	return !!std::getline(*istream, str);
}

template<typename... Ts>
bool read_ln(Ts&... args)
{
	return read(args...) && ignore_line();
}

template<class T = void, class V, class Fn>
bool read_vec(std::size_t count, V& vec, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename V::value_type, T>::type;

	vec.reserve(vec.size() + count);
	for (std::size_t i = 0; i < count; ++i)
	{
		S y;
		if (!read(y))
			return false;
		vec.push_back(fn(y));
	}
	return true;
}

template<class V>
bool read_vec(std::size_t count, V& vec)
{
	using T = typename V::value_type;
	return read_vec<T>(count, vec, [](T x) { return x; });
}

template<typename T = void, class V, class Fn>
bool read_size_vec(V& vec, Fn fn)
{
	std::size_t size;
	read(size);
	if (size == 0)
		return false;

	vec.clear();
	return read_vec<T>(size, vec, fn);
}

template<class V>
bool read_size_vec(V& vec)
{
	std::size_t size;

	vec.clear();
	if (!read(size) || size == 0)
		return false;

	return read_vec(size, vec);
}

template<class V>
bool read_vec_ln(V& vec)
{
	using T = typename V::value_type;

	std::string str;
	if (!read_ln(str))
		return false;

	std::istringstream ss(str);

	T x;
	while (ss >> x)
		vec.push_back(x);

	return !vec.empty();
}

void write()
{}

template<typename T>
void write(const T& arg)
{
	std::cout << arg;
}

template<typename T, typename... Ts>
void write(const T& arg, const Ts&... args)
{
	write(arg);
	write(args...);
}

template<typename... Ts>
void write_ln(const Ts&... args)
{
	write(args..., '\n');
}

template<class It, class Fn, typename Join>
void write_range(It first, It last, Fn fn, Join join)
{
	if (first == last)
		return;

	write(fn(*first++));
	while (first != last)
		write(join, fn(*first++));
}

template<class It, typename Join>
void write_range(It first, It last, Join join)
{
	using T = typename std::iterator_traits<It>::value_type;
	write_range(first, last, [](const T& x) { return x; }, join);
}

template<class Vec, class... Args>
void write_vec(const Vec& vec, Args... args)
{
	write_range(vec.begin(), vec.end(), args...);
}

#include <cassert>
#include <fstream>
#include <iostream>
#include <string>
#include <type_traits>
#include <utility>

class CP0
{
public:
	CP0()
	{
		std::ios_base::sync_with_stdio(false);

#ifdef OFFLINE_JUDGE
		file_.open("input.txt");
		assert(file_);
		istream = &file_;

		std::cout << std::unitbuf;
#else
		istream = &std::cin;
#endif
	}

private:
#ifdef OFFLINE_JUDGE
	std::ifstream file_;
#endif
};

class CP1 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int n_test_cases;
		(*istream) >> n_test_cases;
		ignore_line();

		for (unsigned int i = 1; i <= n_test_cases; ++i)
		{
			read_input();
			assert(!istream->bad());
			solve(i);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP2 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int i = 1;
		while (read_input())
		{
			assert(!istream->bad());
			solve(i++);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual bool read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP3 : public CP0
{
public:
	int run()
	{
		init();

		read_input();
		assert(!istream->bad());
		solve();

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve() = 0;
	virtual void end()
	{}
};

#define MAIN                                                                                                           \
	int main()                                                                                                         \
	{                                                                                                                  \
		CP app;                                                                                                        \
		return app.run();                                                                                              \
	}

#include <utility>

template<typename T>
struct Identity
{
	using Type = T;
};

template<typename T, typename U>
T exchange(T& value, U&& new_value)
{
	auto old_value = std::move(value);
	value = std::forward<U>(new_value);
	return old_value;
}

template<typename T>
T power(T base, unsigned int exp)
{
	T r = 1;
	while (exp)
	{
		if (exp & 1u)
			r *= base;
		base *= base;
		exp >>= 1;
	}

	return r;
}

template<typename T>
bool between(T value, typename Identity<T>::Type x, typename Identity<T>::Type y)
{
	if (x < y)
		return x <= value && value <= y;
	else
		return y <= value && value <= x;
}

template<typename T>
void sort2(T& x, T& y)
{
	if (y < x)
		std::swap(x, y);
}

template<typename T>
T abs_diff(T x, T y)
{
	return y > x ? y - x : x - y;
}

template<typename T>
std::pair<T, T> minmax(T x, T y)
{
	using P = std::pair<T, T>;
	return (y < x) ? P{y, x} : P{x, y};
}

template<typename T>
char to_lcase_letter(T n)
{
	return static_cast<char>('a' + n);
}

template<typename T>
char to_ucase_letter(T n)
{
	return static_cast<char>('A' + n);
}

template<typename T>
char to_digit(T n)
{
	return static_cast<char>('0' + n);
}

#include <algorithm>
#include <cassert>
#include <cstddef>
#include <iomanip>
#include <queue>
#include <tuple>
#include <utility>
#include <vector>

using Freq = unsigned int;

class Huffman_tree
{
private:
	static constexpr auto fict_letter = static_cast<std::size_t>(-1);

	struct Node
	{
		Node(const std::size_t letter = fict_letter, const Freq freq = 0, std::vector<Node> children = {}) :
			letter(letter), freq(freq), children(children)
		{}

		std::size_t letter;
		Freq freq;
		std::vector<Node> children;

		bool operator<(const Node& other) const
		{
			return other.order() < order();
		}

	private:
		std::tuple<Freq, std::size_t, std::size_t> order() const
		{
			return {freq, letter + 1, children.size()};
		}
	};

public:
	Huffman_tree(const std::size_t radix, const std::vector<Freq>& freqs) : radix_(radix)
	{
		assert(radix >= 1);

		const auto n_letters = freqs.size();
		std::priority_queue<Node> heap;

		const auto n_fict = n_fict_letters(radix, freqs.size());
		for (std::size_t l = 0; l < n_fict; ++l)
			heap.emplace();

		for (std::size_t l = 0; l < n_letters; ++l)
			heap.emplace(l, freqs[l]);

		while (heap.size() >= radix_)
		{
			Node node;
			for (std::size_t r = 0; r < radix_; ++r)
			{
				auto& top = heap.top();
				node.letter = std::min(node.letter, top.letter);
				node.children.push_back(top);
				node.freq += node.children.back().freq;

				heap.pop();
			}
			heap.push(std::move(node));
		}
		assert(heap.size() == 1);

		codes_.resize(n_letters);
		std::vector<std::size_t> current_code;
		dfs_huffman_tree(heap.top(), current_code);

		double total_freq_length = 0;
		double total_freq = 0;
		for (std::size_t l = 0; l < n_letters; ++l)
		{
			total_freq_length += freqs[l] * codes_[l].size();
			total_freq += freqs[l];
		}

		avg_length_ = total_freq_length / total_freq;
	}

	void dfs_huffman_tree(const Node& root, std::vector<std::size_t>& current_code)
	{
		for (std::size_t r = 0; r < root.children.size(); ++r)
		{
			auto& child = root.children[r];
			const auto is_leaf = child.children.empty();

			if (is_leaf)
			{
				if (child.letter != fict_letter)
				{
					codes_[child.letter] = current_code;
					codes_[child.letter].push_back(r);
				}
			}
			else
			{
				current_code.push_back(r);
				dfs_huffman_tree(child, current_code);
				current_code.pop_back();
			}
		}
	}

	double avg_length() const
	{
		return avg_length_;
	}

	const std::vector<std::size_t>& get_code(const std::size_t letter) const
	{
		return codes_[letter];
	}

private:
	static std::size_t n_fict_letters(const std::size_t radix, const std::size_t n_letters)
	{
		assert(radix > 1);
		assert(n_letters > 1);
		return radix - 2 - ((n_letters - 2) % (radix - 1));
	}

	const std::size_t radix_;
	double avg_length_;
	std::vector<std::vector<std::size_t>> codes_;
};

class CP : public CP2
{
private:
	virtual bool read_input() override
	{
		if (!read(radix_) || radix_ == 0)
			return false;

		return read_size_vec(freqs_);
	}

	virtual void solve(unsigned int i_case) override
	{
		Huffman_tree ht(radix_, freqs_);

		write_ln("Set ", i_case, "; average length ", std::fixed, std::setprecision(2), ht.avg_length());

		for (std::size_t l = 0; l < freqs_.size(); ++l)
		{
			auto& code = ht.get_code(l);
			write("    ", to_ucase_letter(l), ": ");
			write_vec(
				code, [](std::size_t c) { return to_digit(c); }, "");
			write_ln();
		}

		write_ln();
	}

private:
	std::size_t radix_;
	std::vector<Freq> freqs_;
};

MAIN


