#include <utility>
#include <memory>

namespace std
{
template<class T, class U = T>
T exchange(T& obj, U&& new_value)
{
    T old_value = std::move(obj);
    obj = std::forward<U>(new_value);
    return old_value;
}

template<class T, class... Args>
std::unique_ptr<T> make_unique(Args&&... args)
{
	return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
}
}

#include <cassert>
#include <cstddef>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <sstream>
#include <string>
#include <type_traits>

std::istream* istream;

bool ignore_line()
{
	return !!istream->ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

char peek()
{
	const auto ch = istream->peek();

	assert(istream->good());
	return static_cast<char>(ch);
}

bool read()
{
	return true;
}

template<typename T>
bool read(T& arg)
{
	return !!((*istream) >> arg);
}

template<typename T, typename... Ts>
bool read(T& arg, Ts&... args)
{
	return read(arg) && read(args...);
}

template<typename T1, typename T2>
bool read(std::pair<T1, T2>& pair)
{
	return read(pair.first, pair.second);
}

bool read_ln_non_empty(std::string& str)
{
	return !!std::getline(*istream, str) && !str.empty();
}

bool read_ln(std::string& str)
{
	return !!std::getline(*istream, str);
}

template<typename... Ts>
bool read_ln(Ts&... args)
{
	return read(args...) && ignore_line();
}

template<class T = void, class V, class Fn>
bool read_vec(std::size_t count, V& vec, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename V::value_type, T>::type;

	vec.reserve(vec.size() + count);
	for (std::size_t i = 0; i < count; ++i)
	{
		S y;
		if (!read(y))
			return false;
		vec.push_back(fn(y));
	}
	return true;
}

template<class V>
bool read_vec(std::size_t count, V& vec)
{
	using T = typename V::value_type;
	return read_vec<T>(count, vec, [](T x) { return x; });
}

template<typename T = void, class V, class Fn>
bool read_size_vec(V& vec, Fn fn)
{
	std::size_t size;
	read(size);
	if (size == 0)
		return false;

	vec.clear();
	return read_vec<T>(size, vec, fn);
}

template<class V>
bool read_size_vec(V& vec)
{
	std::size_t size;

	vec.clear();
	if (!read(size) || size == 0)
		return false;

	return read_vec(size, vec);
}

template<class V>
bool read_vec_ln(V& vec)
{
	using T = typename V::value_type;

	std::string str;
	if (!read_ln(str))
		return false;

	std::istringstream ss(str);

	T x;
	while (ss >> x)
		vec.push_back(x);

	return !vec.empty();
}

void write()
{}

template<typename T>
void write(const T& arg)
{
	std::cout << arg;
}

template<typename T, typename... Ts>
void write(const T& arg, const Ts&... args)
{
	write(arg);
	write(args...);
}

template<typename... Ts>
void write_ln(const Ts&... args)
{
	write(args..., '\n');
}

template<class It, class Fn, typename Join>
void write_range(It first, It last, Fn fn, Join join)
{
	if (first == last)
		return;

	write(fn(*first++));
	while (first != last)
		write(join, fn(*first++));
}

template<class It, typename Join>
void write_range(It first, It last, Join join)
{
	using T = typename std::iterator_traits<It>::value_type;
	write_range(first, last, [](const T& x) { return x; }, join);
}

template<class Vec, class... Args>
void write_vec(const Vec& vec, Args... args)
{
	write_range(vec.begin(), vec.end(), args...);
}

#include <cassert>
#include <fstream>
#include <iostream>
#include <string>
#include <type_traits>
#include <utility>

class CP0
{
public:
	CP0()
	{
		std::ios_base::sync_with_stdio(false);

#ifdef OFFLINE_JUDGE
		file_.open("input.txt");
		assert(file_);
		istream = &file_;

		std::cout << std::unitbuf;
#else
		istream = &std::cin;
#endif
	}

private:
#ifdef OFFLINE_JUDGE
	std::ifstream file_;
#endif
};

class CP1 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int n_test_cases;
		(*istream) >> n_test_cases;
		ignore_line();

		for (unsigned int i = 1; i <= n_test_cases; ++i)
		{
			read_input();
			assert(!istream->bad());
			solve(i);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP2 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int i = 1;
		while (read_input())
		{
			assert(!istream->bad());
			solve(i++);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual bool read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP3 : public CP0
{
public:
	int run()
	{
		init();

		read_input();
		assert(!istream->bad());
		solve();

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve() = 0;
	virtual void end()
	{}
};

#define MAIN                                                                                                           \
	int main()                                                                                                         \
	{                                                                                                                  \
		CP app;                                                                                                        \
		return app.run();                                                                                              \
	}

#include <algorithm>
#include <cassert>
#include <vector>

using Size = unsigned int;
using Capacity = unsigned int;

struct Crossing
{
	Size street;
	Size avenue;
};

class Two_sat
{
public:
	struct Var
	{
		Size index;
		bool flag;

		Var operator~() const
		{
			return {index, !flag};
		}
	};

public:
	Two_sat(Size n_vars)
	{
		implication_graph_.resize(2 * n_vars);
	}

	void add_clause(Var a)
	{
		implication_graph_[index(~a)].push_back(index(a));
	}

	void add_clause(Var a, Var b)
	{
		implication_graph_[index(~a)].push_back(index(b));
		implication_graph_[index(~b)].push_back(index(a));
	}

	bool is_satisfiable() const
	{
		return !has_a_and_not_a_in_same_scc();
	}

private:
	struct Dfs
	{
		static constexpr auto invalid_index = static_cast<Size>(-1);

		Size index = invalid_index;
		Size low_link = invalid_index;
		bool is_on_stack = false;
	};

private:
	static Size index(Var a)
	{
		return 2 * a.index + a.flag;
	}

	static bool a_and_not_a(Size v, Size w)
	{
		return (v ^ w) == 1;
	}

	bool has_a_and_not_a_in_same_scc() const
	{
		Size dfs_index = 0;
		std::vector<Dfs> dfs(implication_graph_.size());
		std::vector<Size> sccs;

		for (Size v = 0; v < implication_graph_.size(); ++v)
			if (dfs[v].index == Dfs::invalid_index)
				if (has_a_and_not_a_in_same_scc(v, dfs_index, dfs, sccs))
					return true;

		return false;
	}

	bool has_a_and_not_a_in_same_scc(Size at, Size& dfs_index, std::vector<Dfs>& dfs, std::vector<Size>& sccs) const
	{
		sccs.push_back(at);
		dfs[at].is_on_stack = true;
		dfs[at].index = dfs[at].low_link = dfs_index++;

		for (auto to : implication_graph_[at])
		{
			if (dfs[to].index == Dfs::invalid_index)
				has_a_and_not_a_in_same_scc(to, dfs_index, dfs, sccs);
			if (dfs[to].is_on_stack)
				dfs[at].low_link = std::min(dfs[at].low_link, dfs[to].low_link);
		}

		if (dfs[at].low_link == dfs[at].index)
		{
			const auto r_root = std::find(sccs.rbegin(), sccs.rend(), at);
			assert(r_root != sccs.rend());

			const auto root = (r_root + 1).base();
			std::sort(root, sccs.end());

			if (std::adjacent_find(root, sccs.end(), a_and_not_a) != sccs.end())
				return true;

			std::for_each(root, sccs.end(), [&dfs](Size w) { dfs[w].is_on_stack = false; });
			sccs.erase(root, sccs.end());
		}

		return false;
	}

private:
	std::vector<std::vector<Size>> implication_graph_;
};

class CP : public CP1
{
private:
	virtual void read_input() override
	{
		Size n_routes;
		read(n_streets_, n_avenues_, n_routes);

		routes_.clear();
		for (Size i = 0; i < n_routes; ++i)
		{
			Crossing from, to;
			read(from.street, from.avenue, to.street, to.avenue);
			--from.street, --from.avenue; // To zero-based indexing
			--to.street, --to.avenue;
			assert(from.street < n_streets_ && to.street < n_streets_);
			assert(from.avenue < n_avenues_ && to.avenue < n_avenues_);

			routes_.push_back({from, to});
		}
	}

	virtual void solve(unsigned int) override
	{
		Two_sat two_sat(n_streets_ + n_avenues_);
		for (auto& route : routes_)
		{
			const auto& from = route.first;
			const auto& to = route.second;

			if (from.street == to.street)
			{
				assert(from.avenue != to.avenue);

				Two_sat::Var v = {from.street, to.avenue > from.avenue};
				two_sat.add_clause(v);
			}
			else if (from.avenue == to.avenue)
			{
				assert(from.street != to.street);

				Two_sat::Var v = {from.avenue + n_streets_, to.street > from.street};
				two_sat.add_clause(v);
			}
			else
			{
				assert(from.street != to.street && from.avenue != to.avenue);

				Two_sat::Var vs1 = {from.street, to.avenue > from.avenue};
				Two_sat::Var va1 = {to.avenue + n_streets_, to.street > from.street};

				Two_sat::Var vs2 = {from.avenue + n_streets_, to.street > from.street};
				Two_sat::Var va2 = {to.street, to.avenue > from.avenue};

				two_sat.add_clause(vs1, vs2);
				two_sat.add_clause(vs1, va2);
				two_sat.add_clause(va1, vs2);
				two_sat.add_clause(va1, va2);
			}
		}

		write_ln(two_sat.is_satisfiable() ? "Yes" : "No");
	}

private:
	Size n_streets_, n_avenues_;
	std::vector<std::pair<Crossing, Crossing>> routes_;
};

MAIN


