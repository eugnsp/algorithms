#include <utility>
#include <memory>

namespace std
{
template<class T, class U = T>
T exchange(T& obj, U&& new_value)
{
    T old_value = std::move(obj);
    obj = std::forward<U>(new_value);
    return old_value;
}

template<class T, class... Args>
std::unique_ptr<T> make_unique(Args&&... args)
{
	return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
}
}

#include <cassert>
#include <cstddef>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <sstream>
#include <string>
#include <type_traits>

std::istream* istream;

bool ignore_line()
{
	return !!istream->ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

char peek()
{
	const auto ch = istream->peek();

	assert(istream->good());
	return static_cast<char>(ch);
}

bool read()
{
	return true;
}

template<typename T>
bool read(T& arg)
{
	return !!((*istream) >> arg);
}

template<typename T, typename... Ts>
bool read(T& arg, Ts&... args)
{
	return read(arg) && read(args...);
}

template<typename T1, typename T2>
bool read(std::pair<T1, T2>& pair)
{
	return read(pair.first, pair.second);
}

bool read_ln_non_empty(std::string& str)
{
	return !!std::getline(*istream, str) && !str.empty();
}

bool read_ln(std::string& str)
{
	return !!std::getline(*istream, str);
}

template<typename... Ts>
bool read_ln(Ts&... args)
{
	return read(args...) && ignore_line();
}

template<class T = void, class V, class Fn>
bool read_vec(std::size_t count, V& vec, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename V::value_type, T>::type;

	vec.reserve(vec.size() + count);
	for (std::size_t i = 0; i < count; ++i)
	{
		S y;
		if (!read(y))
			return false;
		vec.push_back(fn(y));
	}
	return true;
}

template<class V>
bool read_vec(std::size_t count, V& vec)
{
	using T = typename V::value_type;
	return read_vec<T>(count, vec, [](T x) { return x; });
}

template<typename T = void, class V, class Fn>
bool read_size_vec(V& vec, Fn fn)
{
	std::size_t size;
	read(size);
	if (size == 0)
		return false;

	vec.clear();
	return read_vec<T>(size, vec, fn);
}

template<class V>
bool read_size_vec(V& vec)
{
	std::size_t size;

	vec.clear();
	if (!read(size) || size == 0)
		return false;

	return read_vec(size, vec);
}

template<class V>
bool read_vec_ln(V& vec)
{
	using T = typename V::value_type;

	std::string str;
	if (!read_ln(str))
		return false;

	std::istringstream ss(str);

	T x;
	while (ss >> x)
		vec.push_back(x);

	return !vec.empty();
}

void write()
{}

template<typename T>
void write(const T& arg)
{
	std::cout << arg;
}

template<typename T, typename... Ts>
void write(const T& arg, const Ts&... args)
{
	write(arg);
	write(args...);
}

template<typename... Ts>
void write_ln(const Ts&... args)
{
	write(args..., '\n');
}

template<class It, class Fn, typename Join>
void write_range(It first, It last, Fn fn, Join join)
{
	if (first == last)
		return;

	write(fn(*first++));
	while (first != last)
		write(join, fn(*first++));
}

template<class It, typename Join>
void write_range(It first, It last, Join join)
{
	using T = typename std::iterator_traits<It>::value_type;
	write_range(first, last, [](const T& x) { return x; }, join);
}

template<class Vec, class... Args>
void write_vec(const Vec& vec, Args... args)
{
	write_range(vec.begin(), vec.end(), args...);
}

#include <cassert>
#include <fstream>
#include <iostream>
#include <string>
#include <type_traits>
#include <utility>

class CP0
{
public:
	CP0()
	{
		std::ios_base::sync_with_stdio(false);

#ifdef OFFLINE_JUDGE
		file_.open("input.txt");
		assert(file_);
		istream = &file_;

		std::cout << std::unitbuf;
#else
		istream = &std::cin;
#endif
	}

private:
#ifdef OFFLINE_JUDGE
	std::ifstream file_;
#endif
};

class CP1 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int n_test_cases;
		(*istream) >> n_test_cases;
		ignore_line();

		for (unsigned int i = 1; i <= n_test_cases; ++i)
		{
			read_input();
			assert(!istream->bad());
			solve(i);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP2 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int i = 1;
		while (read_input())
		{
			assert(!istream->bad());
			solve(i++);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual bool read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP3 : public CP0
{
public:
	int run()
	{
		init();

		read_input();
		assert(!istream->bad());
		solve();

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve() = 0;
	virtual void end()
	{}
};

#define MAIN                                                                                                           \
	int main()                                                                                                         \
	{                                                                                                                  \
		CP app;                                                                                                        \
		return app.run();                                                                                              \
	}

#include <iosfwd>

template<typename T>
struct Range
{
	T begin;
	T end;
};

template<typename T>
T mid(const Range<T>& range)
{
	return (range.begin + range.end) / 2;
}

template<typename T>
Range<T> left_half(const Range<T>& range)
{
	return {range.begin, mid(range)};
}

template<typename T>
Range<T> right_half(const Range<T>& range)
{
	return {mid(range), range.end};
}

template<typename T>
T size(const Range<T>& range)
{
	return range.end - range.begin;
}

template<typename T>
bool is_empty(const Range<T>& range)
{
	return range.begin == range.end;
}

template<typename T>
bool intersects(const Range<T>& range1, const Range<T>& range2)
{
	if (is_empty(range1) || is_empty(range2))
		return false;

	return range1.begin < range2.end && range2.begin < range1.end;
}

template<typename T>
bool includes(const Range<T>& range1, const Range<T>& range2)
{
	return (is_empty(range2) || (range2.begin <= range1.begin && range1.end <= range2.end));
}

template<typename T>
std::istream& operator>>(std::istream& in, Range<T>& range)
{
	in >> range.begin >> range.end;
	return in;
}

#include <algorithm>
#include <cassert>
#include <cstddef>
#include <utility>
#include <vector>

using Seg = Range<std::size_t>;

class Segment_tree
{
public:
	Segment_tree(const std::vector<std::size_t>& data) : data_(data)
	{
		tree_.resize(get_tree_size());
		build({0, data_.size()});
	}

	std::size_t max_element(Seg query) const
	{
		return max_element(query, {0, data_.size()});
	}

private:
	std::size_t get_tree_size() const
	{
		std::size_t n_nodes = 1;
		while (n_nodes < data_.size())
			n_nodes *= 2;
		return 2 * n_nodes;
	}

	void build(Seg range, std::size_t root_index = 1)
	{
		if (size(range) == 1)
			tree_[root_index] = data_[range.begin];
		else
		{
			const auto left_index = 2 * root_index;
			const auto right_index = left_index + 1;

			build(left_half(range), left_index);
			build(right_half(range), right_index);

			tree_[root_index] = std::max(tree_[left_index], tree_[right_index]);
		}
	}

	std::size_t max_element(Seg query, Seg current, std::size_t root_index = 1) const
	{
		if (!intersects(current, query))
			return 0;

		if (includes(current, query))
			return tree_[root_index];

		const auto left_index = 2 * root_index;
		const auto right_index = left_index + 1;

		const auto left = max_element(query, left_half(current), left_index);
		const auto right = max_element(query, right_half(current), right_index);

		return std::max(left, right);
	}

private:
	const std::vector<std::size_t>& data_;
	std::vector<std::size_t> tree_;
};

class CP : public CP2
{
private:
	virtual bool read_input() override
	{
		std::size_t n;
		if (!read(n) || n == 0)
			return false;

		read_size_vec(an_);
		assert(std::is_sorted(an_.begin(), an_.end()));

		queries_.clear();
		for (std::size_t i = 0; i < an_.size(); ++i)
		{
			std::size_t begin, end;
			read(begin, end);
			assert(begin > 0 && begin <= end && end <= n);
			queries_.push_back({--begin, end}); // To zero-based indexing
		}

		return true;
	}

	virtual void solve(unsigned int) override
	{
		std::vector<std::size_t> n_adj_eq_vals(an_.size());

		n_adj_eq_vals[0] = 1;
		for (std::size_t i = 1, count = 1; i < an_.size(); ++i)
			n_adj_eq_vals[i] = (an_[i] == an_[i - 1]) ? ++count : (count = 1);

		const Segment_tree seg_tree(n_adj_eq_vals);
		for (const auto& q : queries_)
		{
			const auto begin = q.begin;
			const auto first_a = an_[begin];
			const std::size_t new_begin = std::find_if(an_.begin() + q.begin, an_.begin() + q.end, [first_a](int v) {
				return v != first_a;
			}) - an_.begin();

			const auto n_head = new_begin - begin;
			const auto n_tail = seg_tree.max_element({new_begin, q.end});

			write_ln(std::max(n_head, n_tail));
		}
	}

private:
	std::vector<int> an_;
	std::vector<Seg> queries_;
};

MAIN


