#include <utility>
#include <memory>

namespace std
{
template<class T, class U = T>
T exchange(T& obj, U&& new_value)
{
    T old_value = std::move(obj);
    obj = std::forward<U>(new_value);
    return old_value;
}

template<class T, class... Args>
std::unique_ptr<T> make_unique(Args&&... args)
{
	return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
}
}

#include <cassert>
#include <cstddef>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <sstream>
#include <string>
#include <type_traits>

std::istream* istream;

bool ignore_line()
{
	return !!istream->ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

char peek()
{
	const auto ch = istream->peek();

	assert(istream->good());
	return static_cast<char>(ch);
}

bool read()
{
	return true;
}

template<typename T>
bool read(T& arg)
{
	return !!((*istream) >> arg);
}

template<typename T, typename... Ts>
bool read(T& arg, Ts&... args)
{
	return read(arg) && read(args...);
}

template<typename T1, typename T2>
bool read(std::pair<T1, T2>& pair)
{
	return read(pair.first, pair.second);
}

bool read_ln_non_empty(std::string& str)
{
	return !!std::getline(*istream, str) && !str.empty();
}

bool read_ln(std::string& str)
{
	return !!std::getline(*istream, str);
}

template<typename... Ts>
bool read_ln(Ts&... args)
{
	return read(args...) && ignore_line();
}

template<class T = void, class V, class Fn>
bool read_vec(std::size_t count, V& vec, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename V::value_type, T>::type;

	vec.reserve(vec.size() + count);
	for (std::size_t i = 0; i < count; ++i)
	{
		S y;
		if (!read(y))
			return false;
		vec.push_back(fn(y));
	}
	return true;
}

template<class V>
bool read_vec(std::size_t count, V& vec)
{
	using T = typename V::value_type;
	return read_vec<T>(count, vec, [](T x) { return x; });
}

template<typename T = void, class V, class Fn>
bool read_size_vec(V& vec, Fn fn)
{
	std::size_t size;
	read(size);
	if (size == 0)
		return false;

	vec.clear();
	return read_vec<T>(size, vec, fn);
}

template<class V>
bool read_size_vec(V& vec)
{
	std::size_t size;

	vec.clear();
	if (!read(size) || size == 0)
		return false;

	return read_vec(size, vec);
}

template<class V>
bool read_vec_ln(V& vec)
{
	using T = typename V::value_type;

	std::string str;
	if (!read_ln(str))
		return false;

	std::istringstream ss(str);

	T x;
	while (ss >> x)
		vec.push_back(x);

	return !vec.empty();
}

void write()
{}

template<typename T>
void write(const T& arg)
{
	std::cout << arg;
}

template<typename T, typename... Ts>
void write(const T& arg, const Ts&... args)
{
	write(arg);
	write(args...);
}

template<typename... Ts>
void write_ln(const Ts&... args)
{
	write(args..., '\n');
}

template<class It, class Fn, typename Join>
void write_range(It first, It last, Fn fn, Join join)
{
	if (first == last)
		return;

	write(fn(*first++));
	while (first != last)
		write(join, fn(*first++));
}

template<class It, typename Join>
void write_range(It first, It last, Join join)
{
	using T = typename std::iterator_traits<It>::value_type;
	write_range(first, last, [](const T& x) { return x; }, join);
}

template<class Vec, class... Args>
void write_vec(const Vec& vec, Args... args)
{
	write_range(vec.begin(), vec.end(), args...);
}

#include <cassert>
#include <fstream>
#include <iostream>
#include <string>
#include <type_traits>
#include <utility>

class CP0
{
public:
	CP0()
	{
		std::ios_base::sync_with_stdio(false);

#ifdef OFFLINE_JUDGE
		file_.open("input.txt");
		assert(file_);
		istream = &file_;

		std::cout << std::unitbuf;
#else
		istream = &std::cin;
#endif
	}

private:
#ifdef OFFLINE_JUDGE
	std::ifstream file_;
#endif
};

class CP1 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int n_test_cases;
		(*istream) >> n_test_cases;
		ignore_line();

		for (unsigned int i = 1; i <= n_test_cases; ++i)
		{
			read_input();
			assert(!istream->bad());
			solve(i);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP2 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int i = 1;
		while (read_input())
		{
			assert(!istream->bad());
			solve(i++);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual bool read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP3 : public CP0
{
public:
	int run()
	{
		init();

		read_input();
		assert(!istream->bad());
		solve();

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve() = 0;
	virtual void end()
	{}
};

#define MAIN                                                                                                           \
	int main()                                                                                                         \
	{                                                                                                                  \
		CP app;                                                                                                        \
		return app.run();                                                                                              \
	}

#include <utility>

template<typename T>
struct Identity
{
	using Type = T;
};

template<typename T, typename U>
T exchange(T& value, U&& new_value)
{
	auto old_value = std::move(value);
	value = std::forward<U>(new_value);
	return old_value;
}

template<typename T>
T power(T base, unsigned int exp)
{
	T r = 1;
	while (exp)
	{
		if (exp & 1u)
			r *= base;
		base *= base;
		exp >>= 1;
	}

	return r;
}

template<typename T>
bool between(T value, typename Identity<T>::Type x, typename Identity<T>::Type y)
{
	if (x < y)
		return x <= value && value <= y;
	else
		return y <= value && value <= x;
}

template<typename T>
void sort2(T& x, T& y)
{
	if (y < x)
		std::swap(x, y);
}

template<typename T>
T abs_diff(T x, T y)
{
	return y > x ? y - x : x - y;
}

template<typename T>
std::pair<T, T> minmax(T x, T y)
{
	using P = std::pair<T, T>;
	return (y < x) ? P{y, x} : P{x, y};
}

template<typename T>
char to_lcase_letter(T n)
{
	return static_cast<char>('a' + n);
}

template<typename T>
char to_ucase_letter(T n)
{
	return static_cast<char>('A' + n);
}

template<typename T>
char to_digit(T n)
{
	return static_cast<char>('0' + n);
}

#include <algorithm>
#include <cassert>
#include <limits>
#include <queue>
#include <utility>
#include <vector>

using Time = unsigned int;
using Size = unsigned int;

constexpr auto max_time = std::numeric_limits<Time>::max();

struct Elevator
{
	Time secs_per_floor;
	std::vector<Size> floors;
};

struct P
{
	Time time;
	Size elevator;
	Size floor_index;
};

struct P_cmp
{
	bool operator()(const P& p1, const P& p2) const
	{
		return p1.time > p2.time;
	}
};

using Queue = std::priority_queue<P, std::vector<P>, P_cmp>;
using Times = std::vector<std::vector<Time>>;

Size binary_find(const std::vector<Size>& vec, Size value)
{
	const auto p = std::lower_bound(vec.begin(), vec.end(), value);
	if (p != vec.end() && *p == value)
		return static_cast<Size>(p - vec.begin());
	else
		return static_cast<Size>(vec.size());
}

Size find_first_elevator(const std::vector<Elevator>& elevators, Size start_floor)
{
	auto first = std::find_if(elevators.begin(), elevators.end(),
		[start_floor](const Elevator& el) { return el.floors.front() == start_floor; });

	if (first != elevators.end())
		return static_cast<Size>(first - elevators.begin());
	else
		return static_cast<Size>(elevators.size());
}

void relex_and_enqueue(Queue& queue, Times& times, Time time, Size elevator, Size floor_index)
{
	auto& curr_time = times[elevator][floor_index];
	if (time < curr_time)
	{
		curr_time = time;
		queue.push({time, elevator, floor_index});
	}
}

Time minimal_time(Size dest_floor, const std::vector<Elevator>& elevators)
{
	const Size start_floor = 0;
	if (dest_floor == start_floor)
		return 0;

	const auto n_elevators = static_cast<Size>(elevators.size());
	auto first_elevator = find_first_elevator(elevators, start_floor);
	if (first_elevator == n_elevators)
		return max_time;

	Queue queue;
	Times times(n_elevators);
	for (Size el = 0; el < n_elevators; ++el)
		times[el].assign(elevators[el].floors.size(), max_time);

	times[first_elevator][0] = 0;
	queue.push({0, first_elevator, 0});

	while (!queue.empty())
	{
		const auto p = queue.top();
		queue.pop();

		const auto el = p.elevator;
		auto& elevator = elevators[el];

		const auto floor_index = p.floor_index;
		const auto floor = elevator.floors[floor_index];
		const auto time = times[el][floor_index];

		if (p.time > time)
			continue;

		for (auto d : {-1, 1})
		{
			const auto next_floor_index = floor_index + d;
			if (next_floor_index < elevator.floors.size())
			{
				const auto next_floor = elevator.floors[next_floor_index];
				const auto next_time = time + elevator.secs_per_floor * abs_diff(floor, next_floor);
				relex_and_enqueue(queue, times, next_time, el, next_floor_index);
			}
		}

		for (Size next_el = 0; next_el < n_elevators; ++next_el)
			if (next_el != el)
			{
				auto& floors = elevators[next_el].floors;
				const auto next_floor_index = binary_find(floors, floor);
				if (next_floor_index == floors.size())
					continue;

				const auto next_time = time + (floor == 0 ? 0 : 60);
				relex_and_enqueue(queue, times, next_time, next_el, next_floor_index);
			}
	}

	Time min_time = max_time;
	for (Size el = 0; el < n_elevators; ++el)
	{
		auto& floors = elevators[el].floors;
		const auto floor_index = binary_find(floors, dest_floor);
		if (floor_index != floors.size())
			min_time = std::min(min_time, times[el][floor_index]);
	}

	return min_time;
}

class CP : public CP2
{
private:
	virtual bool read_input() override
	{
		Size n_elevators;
		if (!read(n_elevators))
			return false;

		read(dest_floor_);

		assert(1 <= n_elevators && n_elevators <= 5);
		elevators_.resize(n_elevators);

		std::vector<Time> speeds;
		read_vec(n_elevators, speeds);
		ignore_line();

		for (Size el = 0; el < n_elevators; ++el)
		{
			elevators_[el].secs_per_floor = speeds[el];

			std::vector<Size> floors;
			read_vec_ln(floors);

			assert(std::is_sorted(floors.begin(), floors.end()));
			elevators_[el].floors = std::move(floors);
		}

		return true;
	}

	virtual void solve(unsigned int) override
	{
		const auto time = minimal_time(dest_floor_, elevators_);
		if (time != max_time)
			write_ln(time);
		else
			write_ln("IMPOSSIBLE");
	}

private:
	Size dest_floor_;
	std::vector<Elevator> elevators_;
};

MAIN


