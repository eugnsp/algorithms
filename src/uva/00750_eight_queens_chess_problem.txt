#include <utility>
#include <memory>

namespace std
{
template<class T, class U = T>
T exchange(T& obj, U&& new_value)
{
    T old_value = std::move(obj);
    obj = std::forward<U>(new_value);
    return old_value;
}

template<class T, class... Args>
std::unique_ptr<T> make_unique(Args&&... args)
{
	return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
}
}

#include <cassert>
#include <cstddef>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <sstream>
#include <string>
#include <type_traits>

std::istream* istream;

bool ignore_line()
{
	return !!istream->ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

char peek()
{
	const auto ch = istream->peek();

	assert(istream->good());
	return static_cast<char>(ch);
}

bool read()
{
	return true;
}

template<typename T>
bool read(T& arg)
{
	return !!((*istream) >> arg);
}

template<typename T, typename... Ts>
bool read(T& arg, Ts&... args)
{
	return read(arg) && read(args...);
}

template<typename T1, typename T2>
bool read(std::pair<T1, T2>& pair)
{
	return read(pair.first, pair.second);
}

bool read_ln_non_empty(std::string& str)
{
	return !!std::getline(*istream, str) && !str.empty();
}

bool read_ln(std::string& str)
{
	return !!std::getline(*istream, str);
}

template<typename... Ts>
bool read_ln(Ts&... args)
{
	return read(args...) && ignore_line();
}

template<class T = void, class V, class Fn>
bool read_vec(std::size_t count, V& vec, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename V::value_type, T>::type;

	vec.reserve(vec.size() + count);
	for (std::size_t i = 0; i < count; ++i)
	{
		S y;
		if (!read(y))
			return false;
		vec.push_back(fn(y));
	}
	return true;
}

template<class V>
bool read_vec(std::size_t count, V& vec)
{
	using T = typename V::value_type;
	return read_vec<T>(count, vec, [](T x) { return x; });
}

template<typename T = void, class V, class Fn>
bool read_size_vec(V& vec, Fn fn)
{
	std::size_t size;
	read(size);
	if (size == 0)
		return false;

	vec.clear();
	return read_vec<T>(size, vec, fn);
}

template<class V>
bool read_size_vec(V& vec)
{
	std::size_t size;

	vec.clear();
	if (!read(size) || size == 0)
		return false;

	return read_vec(size, vec);
}

template<class V>
bool read_vec_ln(V& vec)
{
	using T = typename V::value_type;

	std::string str;
	if (!read_ln(str))
		return false;

	std::istringstream ss(str);

	T x;
	while (ss >> x)
		vec.push_back(x);

	return !vec.empty();
}

void write()
{}

template<typename T>
void write(const T& arg)
{
	std::cout << arg;
}

template<typename T, typename... Ts>
void write(const T& arg, const Ts&... args)
{
	write(arg);
	write(args...);
}

template<typename... Ts>
void write_ln(const Ts&... args)
{
	write(args..., '\n');
}

template<class It, class Fn, typename Join>
void write_range(It first, It last, Fn fn, Join join)
{
	if (first == last)
		return;

	write(fn(*first++));
	while (first != last)
		write(join, fn(*first++));
}

template<class It, typename Join>
void write_range(It first, It last, Join join)
{
	using T = typename std::iterator_traits<It>::value_type;
	write_range(first, last, [](const T& x) { return x; }, join);
}

template<class Vec, class... Args>
void write_vec(const Vec& vec, Args... args)
{
	write_range(vec.begin(), vec.end(), args...);
}

#include <cassert>
#include <fstream>
#include <iostream>
#include <string>
#include <type_traits>
#include <utility>

class CP0
{
public:
	CP0()
	{
		std::ios_base::sync_with_stdio(false);

#ifdef OFFLINE_JUDGE
		file_.open("input.txt");
		assert(file_);
		istream = &file_;

		std::cout << std::unitbuf;
#else
		istream = &std::cin;
#endif
	}

private:
#ifdef OFFLINE_JUDGE
	std::ifstream file_;
#endif
};

class CP1 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int n_test_cases;
		(*istream) >> n_test_cases;
		ignore_line();

		for (unsigned int i = 1; i <= n_test_cases; ++i)
		{
			read_input();
			assert(!istream->bad());
			solve(i);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP2 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int i = 1;
		while (read_input())
		{
			assert(!istream->bad());
			solve(i++);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual bool read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP3 : public CP0
{
public:
	int run()
	{
		init();

		read_input();
		assert(!istream->bad());
		solve();

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve() = 0;
	virtual void end()
	{}
};

#define MAIN                                                                                                           \
	int main()                                                                                                         \
	{                                                                                                                  \
		CP app;                                                                                                        \
		return app.run();                                                                                              \
	}

#include <cstddef>
#include <utility>

template<typename I = std::size_t>
struct Position
{
	using Type = I;

	I row = 0;
	I col = 0;

	Position() = default;

	constexpr Position(I row, I col) : row(row), col(col)
	{}

	Position& operator+=(const Position& pos)
	{
		row += pos.row;
		col += pos.col;
		return *this;
	}

	Position& operator-=(const Position& pos)
	{
		row -= pos.row;
		col -= pos.col;
		return *this;
	}

	void to_zero_based()
	{
		--row;
		--col;
	}
};

template<typename I>
bool operator==(const Position<I>& pos1, const Position<I>& pos2)
{
	return pos1.row == pos2.row && pos1.col == pos2.col;
}

template<typename I>
bool operator!=(const Position<I>& pos1, const Position<I>& pos2)
{
	return !(pos1 == pos2);
}

template<typename I>
bool operator<(const Position<I>& pos1, const Position<I>& pos2)
{
	return std::make_pair(pos1.row, pos1.col) < std::make_pair(pos2.row, pos2.col);
}

template<typename I>
Position<I> operator+(Position<I> pos1, const Position<I>& pos2)
{
	return (pos1 += pos2);
}

template<typename I>
Position<I> operator-(Position<I> pos1, const Position<I>& pos2)
{
	return (pos1 -= pos2);
}

template<typename I>
bool read(Position<I>& pos)
{
	return read(pos.row, pos.col);
}

#include <array>
#include <cassert>
#include <iomanip>
#include <vector>

using Coord = unsigned int;
using Pos = Position<Coord>;

class Eight_queens
{
private:
	static constexpr Coord board_size = 8;
	using Board = std::array<Coord, board_size>;
	using Boards = std::vector<Board>;

public:
	Eight_queens(Pos fixed_queen) : fixed_queen_(fixed_queen)
	{
		assert(fixed_queen_.row < board_size && fixed_queen_.col < board_size);
	}

	Boards enumerate_boards() const
	{
		Boards boards;
		Board init_board;

		place_queen(init_board, fixed_queen_);
		get_next(boards, init_board, get_next_col(static_cast<Coord>(-1)));
		return boards;
	}

private:
	void get_next(Boards& boards, Board& board, Coord col) const
	{
		for (Coord row = 0; row < board_size; ++row)
		{
			const Pos pos_to_try{row, col};
			if (can_be_placed(board, pos_to_try))
			{
				place_queen(board, pos_to_try);
				const auto next_col = get_next_col(col);
				if (next_col < board_size)
					get_next(boards, board, next_col);
				else
					boards.push_back(board);
			}
		}
	}

	static void place_queen(Board& board, Pos queen)
	{
		board[queen.col] = queen.row;
	}

	unsigned int get_next_col(Coord col) const
	{
		++col;
		if (col == fixed_queen_.col)
			++col;

		return col;
	}

	bool can_be_placed(const Board& board, Pos queen) const
	{
		if (can_capture(queen, fixed_queen_))
			return false;

		for (Coord c = 0; c < queen.col; ++c)
			if (can_capture(queen, {board[c], c}))
				return false;

		return true;
	}

	static bool can_capture(Pos queen1, Pos queen2)
	{
		if (queen1.row == queen2.row || queen1.col == queen2.col)
			return true;

		return abs_diff(queen1.row, queen2.row) == abs_diff(queen1.col, queen2.col);
	}

	template<typename T>
	static T abs_diff(T x, T y)
	{
		return y > x ? y - x : x - y;
	}

private:
	const Pos fixed_queen_;
};

class CP : public CP1
{
private:
	virtual void read_input() override
	{
		read(first_queen_.row, first_queen_.col);
		first_queen_.to_zero_based();
	}

	virtual void solve(unsigned int i_case) override
	{
		const Eight_queens queens(first_queen_);

		if (i_case > 1)
			write_ln();
		write_ln("SOLN       COLUMN");
		write_ln(" #      1 2 3 4 5 6 7 8");
		write_ln();

		unsigned int sol_index = 1;
		for (auto& board : queens.enumerate_boards())
		{
			write_ln(std::setw(2), sol_index++, "      ");

			write_vec(
				board, [](Coord row) { return row + 1; }, ' ');
			write_ln();
		}
	}

private:
	Pos first_queen_;
};

MAIN


