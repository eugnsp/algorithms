#include <utility>
#include <memory>

namespace std
{
template<class T, class U = T>
T exchange(T& obj, U&& new_value)
{
    T old_value = std::move(obj);
    obj = std::forward<U>(new_value);
    return old_value;
}

template<class T, class... Args>
std::unique_ptr<T> make_unique(Args&&... args)
{
	return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
}
}

#include <cassert>
#include <cstddef>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <sstream>
#include <string>
#include <type_traits>

std::istream* istream;

bool ignore_line()
{
	return !!istream->ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

char peek()
{
	const auto ch = istream->peek();

	assert(istream->good());
	return static_cast<char>(ch);
}

bool read()
{
	return true;
}

template<typename T>
bool read(T& arg)
{
	return !!((*istream) >> arg);
}

template<typename T, typename... Ts>
bool read(T& arg, Ts&... args)
{
	return read(arg) && read(args...);
}

template<typename T1, typename T2>
bool read(std::pair<T1, T2>& pair)
{
	return read(pair.first, pair.second);
}

bool read_ln_non_empty(std::string& str)
{
	return !!std::getline(*istream, str) && !str.empty();
}

bool read_ln(std::string& str)
{
	return !!std::getline(*istream, str);
}

template<typename... Ts>
bool read_ln(Ts&... args)
{
	return read(args...) && ignore_line();
}

template<class T = void, class V, class Fn>
bool read_vec(std::size_t count, V& vec, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename V::value_type, T>::type;

	vec.reserve(vec.size() + count);
	for (std::size_t i = 0; i < count; ++i)
	{
		S y;
		if (!read(y))
			return false;
		vec.push_back(fn(y));
	}
	return true;
}

template<class V>
bool read_vec(std::size_t count, V& vec)
{
	using T = typename V::value_type;
	return read_vec<T>(count, vec, [](T x) { return x; });
}

template<typename T = void, class V, class Fn>
bool read_size_vec(V& vec, Fn fn)
{
	std::size_t size;
	read(size);
	if (size == 0)
		return false;

	vec.clear();
	return read_vec<T>(size, vec, fn);
}

template<class V>
bool read_size_vec(V& vec)
{
	std::size_t size;

	vec.clear();
	if (!read(size) || size == 0)
		return false;

	return read_vec(size, vec);
}

template<class V>
bool read_vec_ln(V& vec)
{
	using T = typename V::value_type;

	std::string str;
	if (!read_ln(str))
		return false;

	std::istringstream ss(str);

	T x;
	while (ss >> x)
		vec.push_back(x);

	return !vec.empty();
}

void write()
{}

template<typename T>
void write(const T& arg)
{
	std::cout << arg;
}

template<typename T, typename... Ts>
void write(const T& arg, const Ts&... args)
{
	write(arg);
	write(args...);
}

template<typename... Ts>
void write_ln(const Ts&... args)
{
	write(args..., '\n');
}

template<class It, class Fn, typename Join>
void write_range(It first, It last, Fn fn, Join join)
{
	if (first == last)
		return;

	write(fn(*first++));
	while (first != last)
		write(join, fn(*first++));
}

template<class It, typename Join>
void write_range(It first, It last, Join join)
{
	using T = typename std::iterator_traits<It>::value_type;
	write_range(first, last, [](const T& x) { return x; }, join);
}

template<class Vec, class... Args>
void write_vec(const Vec& vec, Args... args)
{
	write_range(vec.begin(), vec.end(), args...);
}

#include <cassert>
#include <fstream>
#include <iostream>
#include <string>
#include <type_traits>
#include <utility>

class CP0
{
public:
	CP0()
	{
		std::ios_base::sync_with_stdio(false);

#ifdef OFFLINE_JUDGE
		file_.open("input.txt");
		assert(file_);
		istream = &file_;

		std::cout << std::unitbuf;
#else
		istream = &std::cin;
#endif
	}

private:
#ifdef OFFLINE_JUDGE
	std::ifstream file_;
#endif
};

class CP1 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int n_test_cases;
		(*istream) >> n_test_cases;
		ignore_line();

		for (unsigned int i = 1; i <= n_test_cases; ++i)
		{
			read_input();
			assert(!istream->bad());
			solve(i);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP2 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int i = 1;
		while (read_input())
		{
			assert(!istream->bad());
			solve(i++);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual bool read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP3 : public CP0
{
public:
	int run()
	{
		init();

		read_input();
		assert(!istream->bad());
		solve();

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve() = 0;
	virtual void end()
	{}
};

#define MAIN                                                                                                           \
	int main()                                                                                                         \
	{                                                                                                                  \
		CP app;                                                                                                        \
		return app.run();                                                                                              \
	}

#include <algorithm>
#include <cassert>
#include <cstddef>
#include <numeric>
#include <sstream>
#include <string>
#include <vector>

using Index = unsigned int;

enum class Type
{
	CONNECT,
	QUERY
};

struct Log
{
	Type type;
	Index computer1;
	Index computer2;
};

class Disjoint_sets
{
private:
	struct Node
	{
		Index value;
		std::vector<Node>::iterator parent;
	};

	using Nodes = std::vector<Node>;

public:
	Disjoint_sets(const std::vector<Index>& elements)
	{
		nodes_.resize(elements.size());
		for (auto node = nodes_.begin(); node != nodes_.end(); ++node)
		{
			node->value = elements[node - nodes_.begin()];
			node->parent = node;
		}
	}

	void unite(Index x, Index y)
	{
		const auto root_x = find_root(pos(x));
		const auto root_y = find_root(pos(y));
		if (root_x != root_y)
			root_y->parent = root_x;
	}

	bool is_same_set(Index x, Index y)
	{
		const auto root_x = find_root(pos(x));
		const auto root_y = find_root(pos(y));
		return (root_x == root_y);
	}

private:
	Nodes::iterator pos(Index x)
	{
		const auto pos = std::find_if(nodes_.begin(), nodes_.end(), [&x](const Node& node) { return node.value == x; });

		assert(pos != nodes_.end());
		return pos;
	}

	Nodes::iterator find_root(Nodes::iterator pos)
	{
		if (pos->parent != pos)
			pos->parent = find_root(pos->parent);

		return pos->parent;
	}

private:
	Nodes nodes_;
};

class CP : public CP1
{
private:
	virtual void read_input() override
	{
		read_ln(n_computers_);

		std::string line_str;

		log_lines_.clear();
		while (read_ln_non_empty(line_str))
		{
			std::istringstream line(line_str);
			char type;
			Index computer1, computer2;
			line >> type >> computer1 >> computer2;

			--computer1, --computer2; // To zero-based indexing
			log_lines_.push_back({type == 'c' ? Type::CONNECT : Type::QUERY, computer1, computer2});
		}
	}

	virtual void solve(unsigned int i_case) override
	{
		std::vector<Index> computers(n_computers_);
		std::iota(computers.begin(), computers.end(), static_cast<Index>(0));

		std::size_t n_successful = 0;
		std::size_t n_unsuccessful = 0;

		Disjoint_sets network(computers);
		for (const auto& line : log_lines_)
		{
			if (line.type == Type::CONNECT)
				network.unite(line.computer1, line.computer2);
			else
				network.is_same_set(line.computer1, line.computer2) ? ++n_successful : ++n_unsuccessful;
		}

		if (i_case > 1)
			write_ln();
		write_ln(n_successful, ',', n_unsuccessful);
	}

private:
	Index n_computers_;
	std::vector<Log> log_lines_;
};

MAIN


