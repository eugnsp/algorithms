#include <utility>
#include <memory>

namespace std
{
template<class T, class U = T>
T exchange(T& obj, U&& new_value)
{
    T old_value = std::move(obj);
    obj = std::forward<U>(new_value);
    return old_value;
}

template<class T, class... Args>
std::unique_ptr<T> make_unique(Args&&... args)
{
	return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
}
}

#include <cassert>
#include <cstddef>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <sstream>
#include <string>
#include <type_traits>

std::istream* istream;

bool ignore_line()
{
	return !!istream->ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

char peek()
{
	const auto ch = istream->peek();

	assert(istream->good());
	return static_cast<char>(ch);
}

bool read()
{
	return true;
}

template<typename T>
bool read(T& arg)
{
	return !!((*istream) >> arg);
}

template<typename T, typename... Ts>
bool read(T& arg, Ts&... args)
{
	return read(arg) && read(args...);
}

template<typename T1, typename T2>
bool read(std::pair<T1, T2>& pair)
{
	return read(pair.first, pair.second);
}

bool read_ln_non_empty(std::string& str)
{
	return !!std::getline(*istream, str) && !str.empty();
}

bool read_ln(std::string& str)
{
	return !!std::getline(*istream, str);
}

template<typename... Ts>
bool read_ln(Ts&... args)
{
	return read(args...) && ignore_line();
}

template<class T = void, class V, class Fn>
bool read_vec(std::size_t count, V& vec, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename V::value_type, T>::type;

	vec.reserve(vec.size() + count);
	for (std::size_t i = 0; i < count; ++i)
	{
		S y;
		if (!read(y))
			return false;
		vec.push_back(fn(y));
	}
	return true;
}

template<class V>
bool read_vec(std::size_t count, V& vec)
{
	using T = typename V::value_type;
	return read_vec<T>(count, vec, [](T x) { return x; });
}

template<typename T = void, class V, class Fn>
bool read_size_vec(V& vec, Fn fn)
{
	std::size_t size;
	read(size);
	if (size == 0)
		return false;

	vec.clear();
	return read_vec<T>(size, vec, fn);
}

template<class V>
bool read_size_vec(V& vec)
{
	std::size_t size;

	vec.clear();
	if (!read(size) || size == 0)
		return false;

	return read_vec(size, vec);
}

template<class V>
bool read_vec_ln(V& vec)
{
	using T = typename V::value_type;

	std::string str;
	if (!read_ln(str))
		return false;

	std::istringstream ss(str);

	T x;
	while (ss >> x)
		vec.push_back(x);

	return !vec.empty();
}

void write()
{}

template<typename T>
void write(const T& arg)
{
	std::cout << arg;
}

template<typename T, typename... Ts>
void write(const T& arg, const Ts&... args)
{
	write(arg);
	write(args...);
}

template<typename... Ts>
void write_ln(const Ts&... args)
{
	write(args..., '\n');
}

template<class It, class Fn, typename Join>
void write_range(It first, It last, Fn fn, Join join)
{
	if (first == last)
		return;

	write(fn(*first++));
	while (first != last)
		write(join, fn(*first++));
}

template<class It, typename Join>
void write_range(It first, It last, Join join)
{
	using T = typename std::iterator_traits<It>::value_type;
	write_range(first, last, [](const T& x) { return x; }, join);
}

template<class Vec, class... Args>
void write_vec(const Vec& vec, Args... args)
{
	write_range(vec.begin(), vec.end(), args...);
}

#include <cassert>
#include <fstream>
#include <iostream>
#include <string>
#include <type_traits>
#include <utility>

class CP0
{
public:
	CP0()
	{
		std::ios_base::sync_with_stdio(false);

#ifdef OFFLINE_JUDGE
		file_.open("input.txt");
		assert(file_);
		istream = &file_;

		std::cout << std::unitbuf;
#else
		istream = &std::cin;
#endif
	}

private:
#ifdef OFFLINE_JUDGE
	std::ifstream file_;
#endif
};

class CP1 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int n_test_cases;
		(*istream) >> n_test_cases;
		ignore_line();

		for (unsigned int i = 1; i <= n_test_cases; ++i)
		{
			read_input();
			assert(!istream->bad());
			solve(i);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP2 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int i = 1;
		while (read_input())
		{
			assert(!istream->bad());
			solve(i++);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual bool read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP3 : public CP0
{
public:
	int run()
	{
		init();

		read_input();
		assert(!istream->bad());
		solve();

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve() = 0;
	virtual void end()
	{}
};

#define MAIN                                                                                                           \
	int main()                                                                                                         \
	{                                                                                                                  \
		CP app;                                                                                                        \
		return app.run();                                                                                              \
	}

#include <cassert>
#include <cstddef>
#include <memory>
#include <stack>
#include <string>
#include <utility>

struct Node;
using Node_ptr = std::shared_ptr<Node>;

enum class Node_type
{
	VAR,
	NUMBER,
	OPERATOR,
	FUNC,
	EXP
};

enum class Token_type
{
	VAR,
	NUMBER,
	OPERATOR,
	FUNC,
	OPEN_PAREN,
	CLOSE_PAREN,
	NONE
};

struct Node
{
	Node_type type;
	std::string value;
	std::size_t n_parens; // Number of parentheses enclosing this node

	Node_ptr left;
	Node_ptr right;

	Node(Node_type type, std::string value, std::size_t n_parens, Node_ptr left = {}, Node_ptr right = {}) :
		type(type), value(std::move(value)), n_parens(n_parens), left(std::move(left)), right(std::move(right))
	{}

	template<typename... Ts>
	static Node_ptr make(Ts&&... args)
	{
		return std::make_shared<Node>(std::forward<Ts>(args)...);
	}

	template<typename... Ts>
	static Node_ptr make_operator(Ts&&... args)
	{
		return make(Node_type::OPERATOR, std::forward<Ts>(args)...);
	}
};

struct Token
{
	Token_type type;
	std::string value;

	Token(Token_type type, std::string value = {}) : type(type), value(std::move(value))
	{}
};

class Tokenizer
{
public:
	Tokenizer(const std::string& expr) : expr_(expr)
	{}

	template<class Fn>
	void for_each(Fn fn)
	{
		Token_type prev_token = Token_type::NONE;

		auto it = expr_.begin();
		while (it != expr_.end())
		{
			if (*it == 'x')
				fn(Token{prev_token = Token_type::VAR, "x"});
			else if (*it == '(')
				fn(Token{prev_token = Token_type::OPEN_PAREN});
			else if (*it == ')')
				fn(Token{prev_token = Token_type::CLOSE_PAREN});
			else if (*it == 'l')
			{
				++it;
				assert(*it == 'n');
				fn(Token{prev_token = Token_type::FUNC, "ln"});
			}
			else if (can_be_followed_by_operator(prev_token) && is_operator(*it))
				fn(Token{prev_token = Token_type::OPERATOR, {*it}});
			else if (is_digit_or_dot(*it) || *it == '-')
			{
				const auto start = it;
				do
					++it;
				while (it != expr_.end() && is_digit_or_dot(*it));
				fn(Token{prev_token = Token_type::NUMBER, std::string(start, it)});
				continue;
			}

			++it;
		}
	}

private:
	static bool is_digit_or_dot(char ch)
	{
		return ('0' <= ch && ch <= '9') || ch == '.';
	}

	static bool is_operator(char ch)
	{
		return ch == '+' || ch == '-' || ch == '*' || ch == '/';
	}

	static bool can_be_followed_by_operator(Token_type type)
	{
		return type != Token_type::NONE && type != Token_type::OPERATOR && type != Token_type::OPEN_PAREN;
	}

private:
	const std::string& expr_;
};

class Parser
{
public:
	static Node_ptr parse(const std::string& expr)
	{
		Nodes_stack nodes;
		Tokens_stack tokens;

		Tokenizer tokenizer{expr};
		tokenizer.for_each([&](const Token& token) {
			switch (token.type)
			{
			case Token_type::VAR:
				add_node(nodes, Node_type::VAR, token.value, 0);
				break;

			case Token_type::NUMBER:
				add_node(nodes, Node_type::NUMBER, token.value, 0);
				break;

			case Token_type::OPERATOR:
				while (!tokens.empty() && tokens.top().type == Token_type::OPERATOR &&
					   operator_precedence(tokens.top()) >= operator_precedence(token))
					compose_node(nodes, tokens);

				[[fallthrough]];

			case Token_type::FUNC:
				[[fallthrough]];

			case Token_type::OPEN_PAREN:
				tokens.push(token);
				break;

			case Token_type::CLOSE_PAREN:
				while (!tokens.empty() && tokens.top().type != Token_type::OPEN_PAREN)
					compose_node(nodes, tokens);

				assert(!tokens.empty());
				tokens.pop();
				++nodes.top()->n_parens;

				if (!tokens.empty() && tokens.top().type == Token_type::FUNC)
					compose_node(nodes, tokens);
			}
		});

		while (!tokens.empty())
			compose_node(nodes, tokens);

		return std::move(nodes.top());
	}

private:
	using Nodes_stack = std::stack<Node_ptr>;
	using Tokens_stack = std::stack<Token>;

	static unsigned char operator_precedence(const Token& token)
	{
		assert(token.type == Token_type::OPERATOR);
		return (token.value == "*" || token.value == "/");
	}

	template<typename... Ts>
	static void add_node(Nodes_stack& nodes, Ts&&... args)
	{
		nodes.push(Node::make(std::forward<Ts>(args)...));
	}

	static void compose_node(Nodes_stack& nodes, Tokens_stack& tokens)
	{
		const auto& token = tokens.top();
		if (token.type == Token_type::FUNC)
		{
			auto node = std::move(nodes.top());
			nodes.pop();
			add_node(nodes, Node_type::FUNC, token.value, 0, std::move(node));
		}
		else if (token.type == Token_type::OPERATOR)
		{
			auto right = std::move(nodes.top());
			nodes.pop();
			auto left = std::move(nodes.top());
			nodes.pop();
			add_node(nodes, Node_type::OPERATOR, token.value, 0, std::move(left), std::move(right));
		}
		tokens.pop();
	}
};

Node_ptr derivative(const Node& node)
{
	if (node.type == Node_type::VAR)
		return Node::make(Node_type::NUMBER, "1", node.n_parens);

	if (node.type == Node_type::NUMBER)
		return Node::make(Node_type::NUMBER, "0", node.n_parens);

	if (node.value == "+" || node.value == "-")
		return Node::make_operator(node.value, node.n_parens, derivative(*node.left), derivative(*node.right));

	if (node.value == "*" || node.value == "/")
	{
		const auto& a = node.left;
		const auto& b = node.right;

		auto ap_b = Node::make_operator("*", 0, derivative(*a), b);
		auto a_bp = Node::make_operator("*", 0, a, derivative(*b));

		if (node.value == "*")
			return Node::make_operator("+", node.n_parens + 1, std::move(ap_b), std::move(a_bp));
		else
			return Node::make_operator("/", node.n_parens,
				Node::make_operator("-", 1, std::move(ap_b), std::move(a_bp)), Node::make(Node_type::EXP, "2", 0, b));
	}

	if (node.value == "ln")
	{
		const auto& a = node.left;
		return Node::make_operator("/", node.n_parens, derivative(*a), Node::make(*a));
	}

	assert(false);
}

std::string to_string(const Node_ptr& node)
{
	if (!node)
		return {};

	std::string str(node->n_parens, '(');

	if (node->right)
	{
		str += to_string(node->left);
		auto right = to_string(node->right);

		if (node->value == "+" && right.front() == '-')
			str += '-' + right.substr(1);
		else
			str += node->value + right;
	}
	else if (node->type == Node_type::EXP)
		str += to_string(node->left) + '^' + node->value;
	else
		str += node->value + to_string(node->left);

	str.append(node->n_parens, ')');
	return str;
}

class CP : public CP2
{
private:
	virtual bool read_input() override
	{
		return read_ln_non_empty(func_);
	}

	virtual void solve(unsigned int) override
	{
		auto f_tree = Parser::parse(func_);
		auto df_tree = derivative(*f_tree);

		write_ln(to_string(df_tree));
	}

private:
	std::string func_;
};

MAIN


