#include <utility>
#include <memory>

namespace std
{
template<class T, class U = T>
T exchange(T& obj, U&& new_value)
{
    T old_value = std::move(obj);
    obj = std::forward<U>(new_value);
    return old_value;
}

template<class T, class... Args>
std::unique_ptr<T> make_unique(Args&&... args)
{
	return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
}
}

#include <cassert>
#include <cstddef>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <sstream>
#include <string>
#include <type_traits>

std::istream* istream;

bool ignore_line()
{
	return !!istream->ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

char peek()
{
	const auto ch = istream->peek();

	assert(istream->good());
	return static_cast<char>(ch);
}

bool read()
{
	return true;
}

template<typename T>
bool read(T& arg)
{
	return !!((*istream) >> arg);
}

template<typename T, typename... Ts>
bool read(T& arg, Ts&... args)
{
	return read(arg) && read(args...);
}

template<typename T1, typename T2>
bool read(std::pair<T1, T2>& pair)
{
	return read(pair.first, pair.second);
}

bool read_ln_non_empty(std::string& str)
{
	return !!std::getline(*istream, str) && !str.empty();
}

bool read_ln(std::string& str)
{
	return !!std::getline(*istream, str);
}

template<typename... Ts>
bool read_ln(Ts&... args)
{
	return read(args...) && ignore_line();
}

template<class T = void, class V, class Fn>
bool read_vec(std::size_t count, V& vec, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename V::value_type, T>::type;

	vec.reserve(vec.size() + count);
	for (std::size_t i = 0; i < count; ++i)
	{
		S y;
		if (!read(y))
			return false;
		vec.push_back(fn(y));
	}
	return true;
}

template<class V>
bool read_vec(std::size_t count, V& vec)
{
	using T = typename V::value_type;
	return read_vec<T>(count, vec, [](T x) { return x; });
}

template<typename T = void, class V, class Fn>
bool read_size_vec(V& vec, Fn fn)
{
	std::size_t size;
	read(size);
	if (size == 0)
		return false;

	vec.clear();
	return read_vec<T>(size, vec, fn);
}

template<class V>
bool read_size_vec(V& vec)
{
	std::size_t size;

	vec.clear();
	if (!read(size) || size == 0)
		return false;

	return read_vec(size, vec);
}

template<class V>
bool read_vec_ln(V& vec)
{
	using T = typename V::value_type;

	std::string str;
	if (!read_ln(str))
		return false;

	std::istringstream ss(str);

	T x;
	while (ss >> x)
		vec.push_back(x);

	return !vec.empty();
}

void write()
{}

template<typename T>
void write(const T& arg)
{
	std::cout << arg;
}

template<typename T, typename... Ts>
void write(const T& arg, const Ts&... args)
{
	write(arg);
	write(args...);
}

template<typename... Ts>
void write_ln(const Ts&... args)
{
	write(args..., '\n');
}

template<class It, class Fn, typename Join>
void write_range(It first, It last, Fn fn, Join join)
{
	if (first == last)
		return;

	write(fn(*first++));
	while (first != last)
		write(join, fn(*first++));
}

template<class It, typename Join>
void write_range(It first, It last, Join join)
{
	using T = typename std::iterator_traits<It>::value_type;
	write_range(first, last, [](const T& x) { return x; }, join);
}

template<class Vec, class... Args>
void write_vec(const Vec& vec, Args... args)
{
	write_range(vec.begin(), vec.end(), args...);
}

#include <cassert>
#include <fstream>
#include <iostream>
#include <string>
#include <type_traits>
#include <utility>

class CP0
{
public:
	CP0()
	{
		std::ios_base::sync_with_stdio(false);

#ifdef OFFLINE_JUDGE
		file_.open("input.txt");
		assert(file_);
		istream = &file_;

		std::cout << std::unitbuf;
#else
		istream = &std::cin;
#endif
	}

private:
#ifdef OFFLINE_JUDGE
	std::ifstream file_;
#endif
};

class CP1 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int n_test_cases;
		(*istream) >> n_test_cases;
		ignore_line();

		for (unsigned int i = 1; i <= n_test_cases; ++i)
		{
			read_input();
			assert(!istream->bad());
			solve(i);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP2 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int i = 1;
		while (read_input())
		{
			assert(!istream->bad());
			solve(i++);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual bool read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP3 : public CP0
{
public:
	int run()
	{
		init();

		read_input();
		assert(!istream->bad());
		solve();

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve() = 0;
	virtual void end()
	{}
};

#define MAIN                                                                                                           \
	int main()                                                                                                         \
	{                                                                                                                  \
		CP app;                                                                                                        \
		return app.run();                                                                                              \
	}

#include <algorithm>
#include <array>
#include <cassert>
#include <optional>
#include <queue>
#include <sstream>
#include <string>
#include <utility>
#include <vector>

using T = unsigned int;
constexpr auto unvisited_vertex = static_cast<T>(-1);

struct Job
{
	T app;
	T n_users;
	std::vector<T> comps;
};

template<T n_vertices>
class Graph
{
public:
	struct Edge
	{
		T to;
		T flow;
	};

public:
	const std::vector<T>& edges(T vertex) const
	{
		assert(vertex < n_vertices);
		return edge_indices_[vertex];
	}

	Edge& edge(T index)
	{
		return edges_[index];
	}

	Edge& opposite_edge(T index)
	{
		const auto opposite_index = index ^ 1;
		return edges_[opposite_index];
	}

	void add_edge(T from, T to, T flow)
	{
		const auto edge_index = static_cast<T>(edges_.size());

		edges_.push_back({to, flow});
		edge_indices_[from].push_back(edge_index);

		edges_.push_back({from, 0});
		edge_indices_[to].push_back(edge_index + 1);
	}

private:
	std::array<std::vector<T>, n_vertices> edge_indices_;

	std::vector<Edge> edges_;
};

class Software_allocation
{
private:
	static constexpr T n_max_apps = 26;
	static constexpr T n_comps = 10;

	static constexpr T source_vertex_index = 0;
	static constexpr T sink_vertex_index = 1 + n_max_apps + n_comps;
	static constexpr T n_vertices = sink_vertex_index + 1;

	using G = Graph<n_vertices>;

public:
	Software_allocation(const std::vector<Job>& jobs) : jobs_(jobs)
	{}

	std::optional<std::array<T, n_comps>> get() const
	{
		auto graph = make_resudial_graph();

		T max_flow = 0;
		while (bfs_augmenting_path(graph))
			++max_flow;

		if (max_flow == n_apps())
		{
			std::array<T, n_comps> allocation;
			std::fill(allocation.begin(), allocation.end(), unvisited_vertex);

			for (auto& job : jobs_)
				for (auto edge_index : graph.edges(app_vertex_index(job.app)))
					if (graph.opposite_edge(edge_index).flow == 1)
					{
						const auto computer = comp_by_vertex_index(graph.edge(edge_index).to);
						allocation[computer] = job.app;
					}

			return allocation;
		}
		else
			return {};
	}

private:
	static T app_vertex_index(T app)
	{
		assert(app < n_max_apps);
		return app + 1;
	}

	static T comp_vertex_index(T computer)
	{
		assert(computer < n_comps);
		return computer + 1 + n_max_apps;
	}

	static T comp_by_vertex_index(T vertex)
	{
		assert(vertex >= comp_vertex_index(0) && vertex <= comp_vertex_index(9));
		return vertex - (1 + n_max_apps);
	}

	G make_resudial_graph() const
	{
		G graph;

		for (auto& job : jobs_)
		{
			const auto app_vertex = app_vertex_index(job.app);
			graph.add_edge(source_vertex_index, app_vertex, job.n_users);
			for (auto comp : job.comps)
				graph.add_edge(app_vertex, comp_vertex_index(comp), 1);
		}

		for (T comp = 0; comp < n_comps; ++comp)
			graph.add_edge(comp_vertex_index(comp), sink_vertex_index, 1);

		return graph;
	}

	T n_apps() const
	{
		T n = 0;
		for (auto& j : jobs_)
			n += j.n_users;
		return n;
	}

	static bool bfs_augmenting_path(G& graph)
	{
		std::array<std::pair<T, T>, n_vertices> pred;
		std::fill(pred.begin(), pred.end(), std::make_pair(unvisited_vertex, 0));

		std::queue<T> queue;
		queue.push(+source_vertex_index); // Make rvalue

		while (!queue.empty())
		{
			const auto v = queue.front();
			queue.pop();

			if (v == sink_vertex_index)
				break;

			for (auto edge_index : graph.edges(v))
			{
				auto& edge = graph.edge(edge_index);
				if (edge.flow > 0 && pred[edge.to].first == unvisited_vertex)
				{
					pred[edge.to] = {v, edge_index};
					queue.push(edge.to);
				}
			}
		}

		if (pred[sink_vertex_index].first == unvisited_vertex)
			return false;

		auto dest = sink_vertex_index;
		while (true)
		{
			--graph.edge(pred[dest].second).flow;
			++graph.opposite_edge(pred[dest].second).flow;

			if (pred[dest].first == source_vertex_index)
				break;
			else
				dest = pred[dest].first;
		}

		return true;
	}

private:
	const std::vector<Job>& jobs_;
};

class CP : public CP2
{
private:
	virtual bool read_input() override
	{
		jobs_.clear();

		std::string str;
		while (read_ln_non_empty(str))
		{
			std::istringstream s(str);

			const auto read_byte = [&s](char offset) {
				char c;
				s >> c;
				c -= offset;
				return static_cast<T>(c);
			};

			Job job;
			job.app = read_byte('A');
			job.n_users = read_byte('0');

			s.ignore();
			while (true)
			{
				const auto computer = read_byte('0');
				if (computer > 9)
					break;
				else
					job.comps.push_back(computer);
			}

			jobs_.push_back(std::move(job));
		}

		return !jobs_.empty();
	}

	virtual void solve(unsigned int) override
	{
		Software_allocation sa(jobs_);

		const auto allocation = sa.get();
		if (allocation)
			for (const auto a : *allocation)
				write(a == unvisited_vertex ? '_' : static_cast<char>(a + 'A'));
		else
			write('!');

		write_ln();
	}

private:
	std::vector<Job> jobs_;
};

MAIN

