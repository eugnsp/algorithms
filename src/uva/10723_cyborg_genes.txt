#include <utility>
#include <memory>

namespace std
{
template<class T, class U = T>
T exchange(T& obj, U&& new_value)
{
    T old_value = std::move(obj);
    obj = std::forward<U>(new_value);
    return old_value;
}

template<class T, class... Args>
std::unique_ptr<T> make_unique(Args&&... args)
{
	return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
}
}

#include <cassert>
#include <cstddef>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <sstream>
#include <string>
#include <type_traits>

std::istream* istream;

bool ignore_line()
{
	return !!istream->ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

char peek()
{
	const auto ch = istream->peek();

	assert(istream->good());
	return static_cast<char>(ch);
}

bool read()
{
	return true;
}

template<typename T>
bool read(T& arg)
{
	return !!((*istream) >> arg);
}

template<typename T, typename... Ts>
bool read(T& arg, Ts&... args)
{
	return read(arg) && read(args...);
}

template<typename T1, typename T2>
bool read(std::pair<T1, T2>& pair)
{
	return read(pair.first, pair.second);
}

bool read_ln_non_empty(std::string& str)
{
	return !!std::getline(*istream, str) && !str.empty();
}

bool read_ln(std::string& str)
{
	return !!std::getline(*istream, str);
}

template<typename... Ts>
bool read_ln(Ts&... args)
{
	return read(args...) && ignore_line();
}

template<class T = void, class V, class Fn>
bool read_vec(std::size_t count, V& vec, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename V::value_type, T>::type;

	vec.reserve(vec.size() + count);
	for (std::size_t i = 0; i < count; ++i)
	{
		S y;
		if (!read(y))
			return false;
		vec.push_back(fn(y));
	}
	return true;
}

template<class V>
bool read_vec(std::size_t count, V& vec)
{
	using T = typename V::value_type;
	return read_vec<T>(count, vec, [](T x) { return x; });
}

template<typename T = void, class V, class Fn>
bool read_size_vec(V& vec, Fn fn)
{
	std::size_t size;
	read(size);
	if (size == 0)
		return false;

	vec.clear();
	return read_vec<T>(size, vec, fn);
}

template<class V>
bool read_size_vec(V& vec)
{
	std::size_t size;

	vec.clear();
	if (!read(size) || size == 0)
		return false;

	return read_vec(size, vec);
}

template<class V>
bool read_vec_ln(V& vec)
{
	using T = typename V::value_type;

	std::string str;
	if (!read_ln(str))
		return false;

	std::istringstream ss(str);

	T x;
	while (ss >> x)
		vec.push_back(x);

	return !vec.empty();
}

void write()
{}

template<typename T>
void write(const T& arg)
{
	std::cout << arg;
}

template<typename T, typename... Ts>
void write(const T& arg, const Ts&... args)
{
	write(arg);
	write(args...);
}

template<typename... Ts>
void write_ln(const Ts&... args)
{
	write(args..., '\n');
}

template<class It, class Fn, typename Join>
void write_range(It first, It last, Fn fn, Join join)
{
	if (first == last)
		return;

	write(fn(*first++));
	while (first != last)
		write(join, fn(*first++));
}

template<class It, typename Join>
void write_range(It first, It last, Join join)
{
	using T = typename std::iterator_traits<It>::value_type;
	write_range(first, last, [](const T& x) { return x; }, join);
}

template<class Vec, class... Args>
void write_vec(const Vec& vec, Args... args)
{
	write_range(vec.begin(), vec.end(), args...);
}

#include <cassert>
#include <fstream>
#include <iostream>
#include <string>
#include <type_traits>
#include <utility>

class CP0
{
public:
	CP0()
	{
		std::ios_base::sync_with_stdio(false);

#ifdef OFFLINE_JUDGE
		file_.open("input.txt");
		assert(file_);
		istream = &file_;

		std::cout << std::unitbuf;
#else
		istream = &std::cin;
#endif
	}

private:
#ifdef OFFLINE_JUDGE
	std::ifstream file_;
#endif
};

class CP1 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int n_test_cases;
		(*istream) >> n_test_cases;
		ignore_line();

		for (unsigned int i = 1; i <= n_test_cases; ++i)
		{
			read_input();
			assert(!istream->bad());
			solve(i);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP2 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int i = 1;
		while (read_input())
		{
			assert(!istream->bad());
			solve(i++);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual bool read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP3 : public CP0
{
public:
	int run()
	{
		init();

		read_input();
		assert(!istream->bad());
		solve();

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve() = 0;
	virtual void end()
	{}
};

#define MAIN                                                                                                           \
	int main()                                                                                                         \
	{                                                                                                                  \
		CP app;                                                                                                        \
		return app.run();                                                                                              \
	}

#include <algorithm>
#include <cassert>
#include <cstddef>
#include <string>
#include <vector>

class CP : public CP1
{
private:
	struct Scs
	{
		std::size_t length;
		std::size_t count;
	};

private:
	virtual void read_input() override
	{
		read_ln(s1_);
		read_ln(s2_);

		assert(s1_.length() <= 30 && s2_.length() <= 30);
	}

	virtual void solve(unsigned int i_case) override
	{
		/*********************************************************************
		scs(i, j).length is the length of the shortest common supersequence
			(SCS) of the prefixes (s1[0 ... i-1]) and (s2[0 ... j-1]),
		scs(i, j).count is the number of SCS of the prefixes.

		The recurrence relation:
			scs(i, j).length = 1 + scs(i - 1, j - 1).length,
			scs(i, j).count = scs(i - 1, j - 1).count
												if (s1[i - 1] == s2[j - 1]),
			scs(i, j).length = 1 +
						+ min{scs(i - 1, j).length, scs(i, j - 1).length},
												if (s1[i - 1] != s2[j - 1]).
			scs(i, j).count = scs(i - 1, j).count	if min lengths are the same,
			scs(i, j).count = scs(i - 1, j).count + scs(i, j - 1).count
													otherwise.

		The base case:
			scs(i, 0).length = i, scs(i, 0).count = 1	for all (i),
			scs(0, j).length = j, scs(0, j).count = 1	for all (j).
		**********************************************************************/

		const auto len_s1 = s1_.length();
		const auto len_s2 = s2_.length();

		std::vector<Scs> scs_col(len_s1 + 1), scs_prev(len_s1 + 1);
		for (std::size_t i = 0; i <= len_s1; ++i)
		{
			scs_col[i].length = i;
			scs_col[i].count = 1;
		}

		for (std::size_t j = 1; j <= len_s2; ++j)
		{
			std::swap(scs_col, scs_prev);

			scs_col[0].length = j;
			scs_col[0].count = 1;
			for (std::size_t i = 1; i <= len_s1; ++i)
				if (s1_[i - 1] == s2_[j - 1])
				{
					const auto& cs = scs_prev[i - 1];
					scs_col[i].length = 1 + cs.length;
					scs_col[i].count = cs.count;
				}
				else
				{
					const auto& cs1 = scs_col[i - 1];
					const auto& cs2 = scs_prev[i];

					scs_col[i].length = 1 + std::min(cs1.length, cs2.length);
					scs_col[i].count = 0;
					if (scs_col[i].length == cs1.length + 1)
						scs_col[i].count += cs1.count;
					if (scs_col[i].length == cs2.length + 1)
						scs_col[i].count += cs2.count;
				}
		}

		write_ln("Case #", i_case, ": ", scs_col.back().length, ' ', scs_col.back().count);
	}

private:
	std::string s1_;
	std::string s2_;
};

MAIN


