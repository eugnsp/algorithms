#include <utility>
#include <memory>

namespace std
{
template<class T, class U = T>
T exchange(T& obj, U&& new_value)
{
    T old_value = std::move(obj);
    obj = std::forward<U>(new_value);
    return old_value;
}

template<class T, class... Args>
std::unique_ptr<T> make_unique(Args&&... args)
{
	return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
}
}

#include <cassert>
#include <cstddef>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <sstream>
#include <string>
#include <type_traits>

std::istream* istream;

bool ignore_line()
{
	return !!istream->ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

char peek()
{
	const auto ch = istream->peek();

	assert(istream->good());
	return static_cast<char>(ch);
}

bool read()
{
	return true;
}

template<typename T>
bool read(T& arg)
{
	return !!((*istream) >> arg);
}

template<typename T, typename... Ts>
bool read(T& arg, Ts&... args)
{
	return read(arg) && read(args...);
}

template<typename T1, typename T2>
bool read(std::pair<T1, T2>& pair)
{
	return read(pair.first, pair.second);
}

bool read_ln_non_empty(std::string& str)
{
	return !!std::getline(*istream, str) && !str.empty();
}

bool read_ln(std::string& str)
{
	return !!std::getline(*istream, str);
}

template<typename... Ts>
bool read_ln(Ts&... args)
{
	return read(args...) && ignore_line();
}

template<class T = void, class V, class Fn>
bool read_vec(std::size_t count, V& vec, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename V::value_type, T>::type;

	vec.reserve(vec.size() + count);
	for (std::size_t i = 0; i < count; ++i)
	{
		S y;
		if (!read(y))
			return false;
		vec.push_back(fn(y));
	}
	return true;
}

template<class V>
bool read_vec(std::size_t count, V& vec)
{
	using T = typename V::value_type;
	return read_vec<T>(count, vec, [](T x) { return x; });
}

template<typename T = void, class V, class Fn>
bool read_size_vec(V& vec, Fn fn)
{
	std::size_t size;
	read(size);
	if (size == 0)
		return false;

	vec.clear();
	return read_vec<T>(size, vec, fn);
}

template<class V>
bool read_size_vec(V& vec)
{
	std::size_t size;

	vec.clear();
	if (!read(size) || size == 0)
		return false;

	return read_vec(size, vec);
}

template<class V>
bool read_vec_ln(V& vec)
{
	using T = typename V::value_type;

	std::string str;
	if (!read_ln(str))
		return false;

	std::istringstream ss(str);

	T x;
	while (ss >> x)
		vec.push_back(x);

	return !vec.empty();
}

void write()
{}

template<typename T>
void write(const T& arg)
{
	std::cout << arg;
}

template<typename T, typename... Ts>
void write(const T& arg, const Ts&... args)
{
	write(arg);
	write(args...);
}

template<typename... Ts>
void write_ln(const Ts&... args)
{
	write(args..., '\n');
}

template<class It, class Fn, typename Join>
void write_range(It first, It last, Fn fn, Join join)
{
	if (first == last)
		return;

	write(fn(*first++));
	while (first != last)
		write(join, fn(*first++));
}

template<class It, typename Join>
void write_range(It first, It last, Join join)
{
	using T = typename std::iterator_traits<It>::value_type;
	write_range(first, last, [](const T& x) { return x; }, join);
}

template<class Vec, class... Args>
void write_vec(const Vec& vec, Args... args)
{
	write_range(vec.begin(), vec.end(), args...);
}

#include <cassert>
#include <fstream>
#include <iostream>
#include <string>
#include <type_traits>
#include <utility>

class CP0
{
public:
	CP0()
	{
		std::ios_base::sync_with_stdio(false);

#ifdef OFFLINE_JUDGE
		file_.open("input.txt");
		assert(file_);
		istream = &file_;

		std::cout << std::unitbuf;
#else
		istream = &std::cin;
#endif
	}

private:
#ifdef OFFLINE_JUDGE
	std::ifstream file_;
#endif
};

class CP1 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int n_test_cases;
		(*istream) >> n_test_cases;
		ignore_line();

		for (unsigned int i = 1; i <= n_test_cases; ++i)
		{
			read_input();
			assert(!istream->bad());
			solve(i);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP2 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int i = 1;
		while (read_input())
		{
			assert(!istream->bad());
			solve(i++);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual bool read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP3 : public CP0
{
public:
	int run()
	{
		init();

		read_input();
		assert(!istream->bad());
		solve();

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve() = 0;
	virtual void end()
	{}
};

#define MAIN                                                                                                           \
	int main()                                                                                                         \
	{                                                                                                                  \
		CP app;                                                                                                        \
		return app.run();                                                                                              \
	}

#include <cmath>

template<typename T>
struct Point
{
	using Type = T;

	T x;
	T y;

	Point() = default;

	Point(T px, T py) : x(px), y(py)
	{}

	Point& operator+=(const Point& point)
	{
		x += point.x;
		y += point.y;
		return *this;
	}

	Point& operator-=(const Point& point)
	{
		x -= point.x;
		y -= point.y;
		return *this;
	}

	Point& operator*=(T scalar)
	{
		x *= scalar;
		y *= scalar;
		return *this;
	}

	Point& operator/=(T scalar)
	{
		x /= scalar;
		y /= scalar;
		return *this;
	}
};

template<typename T>
bool operator==(const Point<T>& point1, const Point<T>& point2)
{
	return point1.x == point2.x && point1.y == point2.y;
}

template<typename T>
bool operator!=(const Point<T>& point1, const Point<T>& point2)
{
	return !(point1 == point2);
}

template<typename T>
bool less_xy(const Point<T>& point1, const Point<T>& point2)
{
	if (point1.x == point2.x)
		return point1.y < point2.y;
	return point1.x < point2.x;
}

template<typename T>
bool less_yx(const Point<T>& point1, const Point<T>& point2)
{
	if (point1.y == point2.y)
		return point1.x < point2.x;
	return point1.y < point2.y;
}

template<typename T>
bool operator<(const Point<T>& point1, const Point<T>& point2)
{
	return less_yx(point1, point2);
}

template<typename T>
Point<T> operator+(Point<T> point1, const Point<T>& point2)
{
	return (point1 += point2);
}

template<typename T>
Point<T> operator-(Point<T> point1, const Point<T>& point2)
{
	return (point1 -= point2);
}

template<typename T>
Point<T> operator/(Point<T> point, T scalar)
{
	return (point /= scalar);
}

template<typename T>
Point<T> operator*(T scalar, Point<T> point)
{
	return (point *= scalar);
}

template<typename T>
Point<T> operator*(Point<T> point, T scalar)
{
	return scalar * point;
}

template<typename T>
T dot(const Point<T>& point1, const Point<T>& point2)
{
	return point1.x * point2.x + point1.y * point2.y;
}

template<typename T>
T cross(const Point<T>& point1, const Point<T>& point2)
{
	return point1.x * point2.y - point1.y * point2.x;
}

template<typename T>
T norm_sq(const Point<T>& point)
{
	return dot(point, point);
}

template<typename T>
T norm(const Point<T>& point)
{
	return std::sqrt(dot(point, point));
}

template<typename T>
double distance_sq(const Point<T>& point1, const Point<T>& point2)
{
	auto dv = point1 - point2;
	return norm_sq(dv);
}

template<typename T>
double distance(const Point<T>& point1, const Point<T>& point2)
{
	return std::sqrt(distance_sq(point1, point2));
}

template<typename T>
bool read(Point<T>& point)
{
	return read(point.x, point.y);
}

template<typename T>
void write(const Point<T>& point)
{
	return write('(', point.x, ',', point.y, ')');
}

#include <utility>

template<typename T>
struct Identity
{
	using Type = T;
};

template<typename T, typename U>
T exchange(T& value, U&& new_value)
{
	auto old_value = std::move(value);
	value = std::forward<U>(new_value);
	return old_value;
}

template<typename T>
T power(T base, unsigned int exp)
{
	T r = 1;
	while (exp)
	{
		if (exp & 1u)
			r *= base;
		base *= base;
		exp >>= 1;
	}

	return r;
}

template<typename T>
bool between(T value, typename Identity<T>::Type x, typename Identity<T>::Type y)
{
	if (x < y)
		return x <= value && value <= y;
	else
		return y <= value && value <= x;
}

template<typename T>
void sort2(T& x, T& y)
{
	if (y < x)
		std::swap(x, y);
}

template<typename T>
T abs_diff(T x, T y)
{
	return y > x ? y - x : x - y;
}

template<typename T>
std::pair<T, T> minmax(T x, T y)
{
	using P = std::pair<T, T>;
	return (y < x) ? P{y, x} : P{x, y};
}

template<typename T>
char to_lcase_letter(T n)
{
	return static_cast<char>('a' + n);
}

template<typename T>
char to_ucase_letter(T n)
{
	return static_cast<char>('A' + n);
}

template<typename T>
char to_digit(T n)
{
	return static_cast<char>('0' + n);
}

#include <algorithm>
#include <cassert>
#include <iomanip>
#include <utility>
#include <vector>

class CP : public CP2
{
private:
	using T = int;
	using Points = std::vector<Point<T>>;

	class Convex_hull
	{
	public:
		Convex_hull(Points points)
		{
			if (points.size() < 3)
				return;

			std::sort(points.begin(), points.end());

			auto p = points.begin();
			const auto p0 = *p++;

			std::sort(p, points.end(), [&p0](const Point<T>& p1, const Point<T>& p2) {
				const auto cr = cross(p1 - p0, p2 - p0);
				if (cr != 0)
					return cr > 0;
				return norm_sq(p2 - p0) < norm_sq(p1 - p0);
			});

			const auto last = std::unique(
				p, points.end(), [&p0](const Point<T>& p1, const Point<T>& p2) { return is_colinear(p0, p1, p2); });
			points.erase(last, points.end());

			if (points.size() < 3)
			{
				if (points.size() > 1 && points[0] == points[1])
					points.pop_back();

				vertices_ = std::move(points);
				return;
			}

			vertices_.assign({p0, *p++, *p++});
			for (; p != points.end(); ++p)
			{
				while (!is_left_turn(*(vertices_.end() - 2), vertices_.back(), *p))
					vertices_.pop_back();
				vertices_.push_back(*p);
			}

			assert(vertices_.size() >= 3);
		}

		bool contains(const Point<T>& point) const
		{
			const auto n = vertices_.size();
			assert(n != 0);

			if (n == 1)
				return point == vertices_.front();

			if (n == 2)
			{
				if (is_left_turn(vertices_[0], vertices_[1], point) || is_right_turn(vertices_[0], vertices_[1], point))
					return false;

				return (between(point.x, vertices_[0].x, vertices_[1].x) &&
						between(point.y, vertices_[0].y, vertices_[1].y));
			}

			for (std::size_t i = 0; i < n; ++i)
			{
				const auto& vi = vertices_[i];
				const auto& vj = vertices_[(i + 1) % n];

				if (is_right_turn(vi, vj, point))
					return false;
			}

			return true;
		}

	private:
		static bool is_colinear(const Point<T>& p1, const Point<T>& p2, const Point<T>& p3)
		{
			return cross(p3 - p1, p2 - p1) == 0;
		}

		static bool is_left_turn(const Point<T>& p1, const Point<T>& p2, const Point<T>& p3)
		{
			return cross(p3 - p1, p2 - p1) < 0;
		}

		static bool is_right_turn(const Point<T>& p1, const Point<T>& p2, const Point<T>& p3)
		{
			return cross(p3 - p1, p2 - p1) > 0;
		}

	private:
		Points vertices_;
	};

private:
	virtual bool read_input() override
	{
		std::size_t n_cops, n_robbers, n_citizens;
		read(n_cops, n_robbers, n_citizens);

		if (n_cops == 0 && n_robbers == 0 && n_citizens == 0)
			return false;

		cops_.resize(n_cops);
		for (auto& c : cops_)
			read(c.x, c.y);

		robbers_.resize(n_robbers);
		for (auto& r : robbers_)
			read(r.x, r.y);

		citizens_.resize(n_citizens);
		for (auto& c : citizens_)
			read(c.x, c.y);

		return true;
	}

	virtual void solve(unsigned int i_case) override
	{
		const Convex_hull cops_border(cops_);
		const Convex_hull robbers_border(robbers_);

		write_ln("Data set ", i_case, ':');
		for (auto& c : citizens_)
		{
			write("     Citizen at (", c.x, ',', c.y, ") is ");
			if (cops_.size() > 2 && cops_border.contains(c))
				write_ln("safe.");
			else if (robbers_.size() > 2 && robbers_border.contains(c))
				write_ln("robbed.");
			else
				write_ln("neither.");
		}

		write_ln();
	}

private:
	Points cops_, robbers_, citizens_;
};

MAIN


