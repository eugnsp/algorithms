#include <utility>
#include <memory>

namespace std
{
template<class T, class U = T>
T exchange(T& obj, U&& new_value)
{
    T old_value = std::move(obj);
    obj = std::forward<U>(new_value);
    return old_value;
}

template<class T, class... Args>
std::unique_ptr<T> make_unique(Args&&... args)
{
	return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
}
}

#include <cassert>
#include <cstddef>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <sstream>
#include <string>
#include <type_traits>

std::istream* istream;

bool ignore_line()
{
	return !!istream->ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

char peek()
{
	const auto ch = istream->peek();

	assert(istream->good());
	return static_cast<char>(ch);
}

bool read()
{
	return true;
}

template<typename T>
bool read(T& arg)
{
	return !!((*istream) >> arg);
}

template<typename T, typename... Ts>
bool read(T& arg, Ts&... args)
{
	return read(arg) && read(args...);
}

template<typename T1, typename T2>
bool read(std::pair<T1, T2>& pair)
{
	return read(pair.first, pair.second);
}

bool read_ln_non_empty(std::string& str)
{
	return !!std::getline(*istream, str) && !str.empty();
}

bool read_ln(std::string& str)
{
	return !!std::getline(*istream, str);
}

template<typename... Ts>
bool read_ln(Ts&... args)
{
	return read(args...) && ignore_line();
}

template<class T = void, class V, class Fn>
bool read_vec(std::size_t count, V& vec, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename V::value_type, T>::type;

	vec.reserve(vec.size() + count);
	for (std::size_t i = 0; i < count; ++i)
	{
		S y;
		if (!read(y))
			return false;
		vec.push_back(fn(y));
	}
	return true;
}

template<class V>
bool read_vec(std::size_t count, V& vec)
{
	using T = typename V::value_type;
	return read_vec<T>(count, vec, [](T x) { return x; });
}

template<typename T = void, class V, class Fn>
bool read_size_vec(V& vec, Fn fn)
{
	std::size_t size;
	read(size);
	if (size == 0)
		return false;

	vec.clear();
	return read_vec<T>(size, vec, fn);
}

template<class V>
bool read_size_vec(V& vec)
{
	std::size_t size;

	vec.clear();
	if (!read(size) || size == 0)
		return false;

	return read_vec(size, vec);
}

template<class V>
bool read_vec_ln(V& vec)
{
	using T = typename V::value_type;

	std::string str;
	if (!read_ln(str))
		return false;

	std::istringstream ss(str);

	T x;
	while (ss >> x)
		vec.push_back(x);

	return !vec.empty();
}

void write()
{}

template<typename T>
void write(const T& arg)
{
	std::cout << arg;
}

template<typename T, typename... Ts>
void write(const T& arg, const Ts&... args)
{
	write(arg);
	write(args...);
}

template<typename... Ts>
void write_ln(const Ts&... args)
{
	write(args..., '\n');
}

template<class It, class Fn, typename Join>
void write_range(It first, It last, Fn fn, Join join)
{
	if (first == last)
		return;

	write(fn(*first++));
	while (first != last)
		write(join, fn(*first++));
}

template<class It, typename Join>
void write_range(It first, It last, Join join)
{
	using T = typename std::iterator_traits<It>::value_type;
	write_range(first, last, [](const T& x) { return x; }, join);
}

template<class Vec, class... Args>
void write_vec(const Vec& vec, Args... args)
{
	write_range(vec.begin(), vec.end(), args...);
}

#include <cassert>
#include <fstream>
#include <iostream>
#include <string>
#include <type_traits>
#include <utility>

class CP0
{
public:
	CP0()
	{
		std::ios_base::sync_with_stdio(false);

#ifdef OFFLINE_JUDGE
		file_.open("input.txt");
		assert(file_);
		istream = &file_;

		std::cout << std::unitbuf;
#else
		istream = &std::cin;
#endif
	}

private:
#ifdef OFFLINE_JUDGE
	std::ifstream file_;
#endif
};

class CP1 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int n_test_cases;
		(*istream) >> n_test_cases;
		ignore_line();

		for (unsigned int i = 1; i <= n_test_cases; ++i)
		{
			read_input();
			assert(!istream->bad());
			solve(i);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP2 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int i = 1;
		while (read_input())
		{
			assert(!istream->bad());
			solve(i++);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual bool read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP3 : public CP0
{
public:
	int run()
	{
		init();

		read_input();
		assert(!istream->bad());
		solve();

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve() = 0;
	virtual void end()
	{}
};

#define MAIN                                                                                                           \
	int main()                                                                                                         \
	{                                                                                                                  \
		CP app;                                                                                                        \
		return app.run();                                                                                              \
	}

#include <cstddef>
#include <vector>
#include <algorithm>
#include <ostream>
#include <cassert>

class Big_uint
{
public:
	explicit Big_uint(unsigned long long = 0);
	static Big_uint minus_inf();

	unsigned char operator[](std::size_t) const;

	Big_uint& operator=(unsigned long long);

	Big_uint& operator+=(unsigned long long);

	bool is_zero() const;
	bool is_finite() const;
	bool is_minus_inf() const;

	friend bool operator==(const Big_uint&, const Big_uint&);

	std::size_t size() const;

	Big_uint& mul_10();
	friend Big_uint mul_10(const Big_uint&);

private:
	void append(unsigned long long, bool append_if_zero);

private:
	std::vector<unsigned char> data_;
};


inline Big_uint::Big_uint(unsigned long long u)
{
	*this = u;
}

inline Big_uint Big_uint::minus_inf()
{
	Big_uint r;
	r.data_.assign({'M'});
	return r;
}

inline unsigned char Big_uint::operator[](std::size_t i) const
{
	assert(is_finite());
	return data_[i];
}

inline Big_uint& Big_uint::operator=(unsigned long long u)
{
	data_.clear();
	append(u, true);
	return *this;
}

inline Big_uint& Big_uint::operator+=(unsigned long long u)
{
	assert(is_finite());

	auto carry = u;
	for (auto& d : data_)
	{
		d += carry % 10;
		carry /= 10;
		carry += d / 10;
		d %= 10;
		if (carry == 0)
			break;
	}
	append(carry, false);

	return *this;
}

inline bool Big_uint::is_zero() const
{
	return data_.size() == 1 && data_.front() == 0;
}

inline bool Big_uint::is_finite() const
{
	return !is_minus_inf();
}

inline bool Big_uint::is_minus_inf() const
{
	return data_.size() == 1 && data_.front() == 'M';
}

inline std::size_t Big_uint::size() const
{
	assert(is_finite());
	return data_.size();
}

inline Big_uint& Big_uint::mul_10()
{
	assert(is_finite());
	if (!is_zero())
		data_.insert(data_.begin(), 0);

	return *this;
}

inline void Big_uint::append(unsigned long long u, bool append_if_zero)
{
	if (!append_if_zero && u == 0)
		return;

	do
	{
		data_.push_back(u % 10);
		u /= 10;
	} while (u > 0);
}

/************************************************************************/

inline bool operator<(const Big_uint& u1, const Big_uint& u2)
{
	if (u2.is_minus_inf())
		return false;

	if (u1.is_minus_inf())
		return true;

	if (u1.size() != u2.size())
		return u1.size() < u2.size();

	for (std::size_t i = u1.size() - 1; i != static_cast<std::size_t>(-1); --i)
		if (u1[i] != u2[i])
			return (u1[i] < u2[i]);

	return false;
}

inline bool operator>(const Big_uint& u1, const Big_uint& u2)
{
	return u2 < u1;
}

inline bool operator==(const Big_uint& u1, const Big_uint& u2)
{
	return u1.data_ == u2.data_;
}

inline bool operator!=(const Big_uint& u1, const Big_uint& u2)
{
	return !(u1 == u2);
}

inline bool operator<=(const Big_uint& u1, const Big_uint& u2)
{
	return !(u1 > u2);
}

inline bool operator>=(const Big_uint& u1, const Big_uint& u2)
{
	return !(u1 < u2);
}

inline Big_uint operator+(Big_uint u1, unsigned long long u2)
{
	u1 += u2;
	return u1;
}

inline Big_uint operator+(unsigned long long u1, Big_uint u2)
{
	return u2 + u1;
}

inline std::ostream& operator<<(std::ostream& out, const Big_uint& u)
{
	if (u.is_minus_inf())
		out << "-INF";
	else
		for (std::size_t i = u.size() - 1; i != static_cast<std::size_t>(-1); --i)
			out << static_cast<char>('0' + u[i]);

	return out;
}

inline Big_uint mul_10(const Big_uint& u)
{
	assert(u.is_finite());

	Big_uint r(0);
	if (!u.is_zero())
	{
		r.data_.resize(u.size() + 1);
		std::copy(u.data_.begin(), u.data_.end(), r.data_.begin() + 1);
	}

	return r;
}

#include <cstddef>
#include <utility>

template<typename I = std::size_t>
struct Position
{
	using Type = I;

	I row = 0;
	I col = 0;

	Position() = default;

	constexpr Position(I row, I col) : row(row), col(col)
	{}

	Position& operator+=(const Position& pos)
	{
		row += pos.row;
		col += pos.col;
		return *this;
	}

	Position& operator-=(const Position& pos)
	{
		row -= pos.row;
		col -= pos.col;
		return *this;
	}

	void to_zero_based()
	{
		--row;
		--col;
	}
};

template<typename I>
bool operator==(const Position<I>& pos1, const Position<I>& pos2)
{
	return pos1.row == pos2.row && pos1.col == pos2.col;
}

template<typename I>
bool operator!=(const Position<I>& pos1, const Position<I>& pos2)
{
	return !(pos1 == pos2);
}

template<typename I>
bool operator<(const Position<I>& pos1, const Position<I>& pos2)
{
	return std::make_pair(pos1.row, pos1.col) < std::make_pair(pos2.row, pos2.col);
}

template<typename I>
Position<I> operator+(Position<I> pos1, const Position<I>& pos2)
{
	return (pos1 += pos2);
}

template<typename I>
Position<I> operator-(Position<I> pos1, const Position<I>& pos2)
{
	return (pos1 -= pos2);
}

template<typename I>
bool read(Position<I>& pos)
{
	return read(pos.row, pos.col);
}

#include <type_traits>

template<typename T = void, class Matrix, class Fn>
bool read_matrix(Matrix& mat, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename Matrix::Type, T>::type;

	for (typename Matrix::Size row = 0; row < mat.rows(); ++row)
		for (typename Matrix::Size col = 0; col < mat.cols(); ++col)
		{
			S s;
			if (!read(s))
				return false;
			mat(row, col) = fn(s);
		}

	return true;
}

template<class Matrix>
bool read_matrix(Matrix& mat)
{
	return read_matrix<typename Matrix::Type>(mat,
		[](const typename Matrix::Type& x) { return x; });
}

template<typename T = void, class Matrix, class Fn>
bool read_transposed_matrix(Matrix& mat, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename Matrix::Type, T>::type;

	for (typename Matrix::Size row = 0; row < mat.rows(); ++row)
		for (typename Matrix::Size col = 0; col < mat.cols(); ++col)
		{
			S s;
			if (!read(s))
				return false;
			mat(col, row) = fn(s);
		}

	return true;
}

template<class Matrix>
bool read_transposed_matrix(Matrix& mat)
{
	return read_transposed_matrix<typename Matrix::Type>(mat,
		[](const typename Matrix::Type& x) { return x; });
}

template<class Matrix>
bool write_matrix(Matrix& mat)
{
	for (typename Matrix::Size row = 0; row < mat.rows(); ++row)
	{
		for (typename Matrix::Size col = 0; col < mat.cols(); ++col)
			write(mat(row, col), ' ');
		write_ln();
	}

	return true;
}

#include <algorithm>
#include <cassert>
#include <cstddef>
#include <iosfwd>
#include <iomanip>
#include <vector>
#include <utility>

template<typename T, typename S = std::size_t>
class Matrix
{
public:
	using Type = T;
	using Size = S;

	using Container = std::vector<Type>;
	using Reference = typename Container::reference;
	using Const_reference = typename Container::const_reference;

	using Col_iterator = typename Container::iterator;
	using Col_const_iterator = typename Container::const_iterator;

public:
	Matrix() = default;

	Matrix(Size rows, Size cols) : data_(rows * cols), rows_(rows), cols_(cols)
	{}

	Matrix(Size rows, Size cols, const Type& value) : Matrix(rows, cols)
	{
		fill(value);
	}

	Matrix(const std::vector<std::vector<Type>>& data) :
		Matrix(static_cast<Size>(data.front().size()), static_cast<Size>(data.size()))
	{
		for (Size col = 0; col < cols(); ++col)
		{
			assert(data[col].size() == data.front().size());
			std::copy(data[col].begin(), data[col].end(), begin_col(col));
		}
	}

	Matrix(const Matrix&) = default;
	Matrix(Matrix&&) = default;

	Matrix& operator=(const Matrix&) = default;
	Matrix& operator=(Matrix&&) = default;

	Reference operator()(S row, S col)
	{
		assert(row < rows_ && col < cols_);
		return data_[row + col * rows_];
	}

	Const_reference operator()(S row, S col) const
	{
		assert(row < rows_ && col < cols_);
		return data_[row + col * rows_];
	}

	Reference operator()(Position<S> pos)
	{
		return (*this)(pos.row, pos.col);
	}

	Type operator()(Position<S> pos) const
	{
		return (*this)(pos.row, pos.col);
	}

	const Container& data() const
	{
		return data_;
	}

	Col_iterator begin_col(S col)
	{
		assert(col < cols_);
		return data_.begin() + rows_ * col;
	}

	Col_iterator end_col(S col)
	{
		return begin_col(col) + rows_;
	}

	Col_const_iterator begin_col(S col) const
	{
		assert(col < cols_);
		return data_.begin() + rows_ * col;
	}

	Col_const_iterator end_col(S col) const
	{
		return begin_col(col) + rows_;
	}

	S rows() const
	{
		return rows_;
	}

	S cols() const
	{
		return cols_;
	}

	void resize(S rows, S cols)
	{
		rows_ = rows;
		cols_ = cols;
		data_.resize(rows_ * cols_);
	}

	void fill(const Type& value)
	{
		std::fill(data_.begin(), data_.end(), value);
	}

	void resize_and_fill(S rows, S cols, const Type& value)
	{
		resize(rows, cols);
		fill(value);
	}

	void swap_rows(S row1, S row2)
	{
		assert(row1 < rows_ && row2 < rows_);
		assert(row1 != row2);

		for (S col = 0; col < cols_; ++col)
			std::swap((*this)(row1, col), (*this)(row2, col));
	}

	void swap_cols(S col1, S col2)
	{
		assert(col1 < cols_ && col2 < cols_);
		assert(col1 != col2);

		std::swap_ranges(
			data_.begin() + rows_ * col1,
			data_.begin() + rows_ * (col1 + 1),
			data_.begin() + rows_ * col2);
	}

	void swap(Matrix& other) noexcept
	{
		std::swap(data_, other.data_);
		std::swap(rows_, other.rows_);
		std::swap(cols_, other.cols_);
	}

private:
	Container data_;
	S rows_ = 0;
	S cols_ = 0;
};


template<class Matrix>
bool is_inside_extents(const Matrix& matrix, Position<typename Matrix::Size> pos)
{
	return pos.row < matrix.rows() && pos.col < matrix.cols();
}

template<typename V, typename S>
void swap(Matrix<V, S>& x, Matrix<V, S>& y) noexcept
{
	x.swap(y);
}

template<typename V, typename S>
Matrix<V, S> operator*(const Matrix<V, S>& x, const Matrix<V, S>& y)
{
	assert(x.cols() == y.rows());

	Matrix<V, S> res(x.rows(), y.cols(), 0);
	for (S j = 0; j < y.cols(); ++j)
		for (S i = 0; i < x.rows(); ++i)
			for (S k = 0; k < x.cols(); ++k)
				res(i, j) += x(i, k) * y(k, j);

	return res;
}

#include <utility>

template<typename T>
struct Identity
{
	using Type = T;
};

template<typename T, typename U>
T exchange(T& value, U&& new_value)
{
	auto old_value = std::move(value);
	value = std::forward<U>(new_value);
	return old_value;
}

template<typename T>
T power(T base, unsigned int exp)
{
	T r = 1;
	while (exp)
	{
		if (exp & 1u)
			r *= base;
		base *= base;
		exp >>= 1;
	}

	return r;
}

template<typename T>
bool between(T value, typename Identity<T>::Type x, typename Identity<T>::Type y)
{
	if (x < y)
		return x <= value && value <= y;
	else
		return y <= value && value <= x;
}

template<typename T>
void sort2(T& x, T& y)
{
	if (y < x)
		std::swap(x, y);
}

template<typename T>
T abs_diff(T x, T y)
{
	return y > x ? y - x : x - y;
}

template<typename T>
std::pair<T, T> minmax(T x, T y)
{
	using P = std::pair<T, T>;
	return (y < x) ? P{y, x} : P{x, y};
}

template<typename T>
char to_lcase_letter(T n)
{
	return static_cast<char>('a' + n);
}

template<typename T>
char to_ucase_letter(T n)
{
	return static_cast<char>('A' + n);
}

template<typename T>
char to_digit(T n)
{
	return static_cast<char>('0' + n);
}

#include <algorithm>
#include <cassert>
#include <cstddef>

constexpr std::size_t ms_per_digit[] = {6, 2, 5, 5, 4, 5, 6, 3, 7, 6};

class CP : public CP2
{
private:
	virtual bool read_input() override
	{
		if (!read(n_matches_, divisor_) || n_matches_ == 0)
			return false;

		assert(between(n_matches_, 1, 100));
		assert(between(divisor_, 1, 3000));

		return true;
	}

	virtual void solve(unsigned int i_case) override
	{
		/*********************************************************************
		mn(i, j) is the maximum number that can be made using (i) matches and
			that has a remained (j) when it is divided by (divisor).

		The recurrence relation:
			mn(i + ms_per_digit[d], (10 * j + d) % divisor) =
					max {0 <= d <= 9, mn(i, j) is valid} [10 * mn(i, j) + d],
				where (ms_per_digit[d]) is how many matches are needed
				for a (d)-th digit.

		The base case:
			mn(0, 0) = 0.
			mn(i, j) = <invalid> if (i) matches cannot be used to make
								a single digit number with a remainder (j).
		**********************************************************************/

		Matrix<Big_uint> mn(n_matches_ + 1, divisor_, Big_uint::minus_inf());
		mn(0, 0) = 0;

		for (std::size_t i = 0; i < n_matches_; ++i)
			for (unsigned int j = 0; j < divisor_; ++j)
			{
				if (mn(i, j).is_minus_inf())
					continue;

				for (unsigned int d = 0; d < 10; ++d)
				{
					if (i + ms_per_digit[d] > n_matches_)
						continue;

					auto& m = mn(i + ms_per_digit[d], (10 * j + d) % divisor_);
					m = std::max(m, mul_10(mn(i, j)) + d);
				}
			}

		auto max_number = Big_uint::minus_inf();
		for (std::size_t i = 1; i <= n_matches_; ++i)
			max_number = std::max(max_number, mn(i, 0));

		write("Case ", i_case, ": ");
		if (max_number.is_finite())
			write_ln(max_number);
		else
			write_ln(-1);
	}

private:
	std::size_t n_matches_;
	unsigned int divisor_;
};

MAIN


