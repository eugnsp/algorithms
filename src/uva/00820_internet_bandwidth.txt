#include <utility>
#include <memory>

namespace std
{
template<class T, class U = T>
T exchange(T& obj, U&& new_value)
{
    T old_value = std::move(obj);
    obj = std::forward<U>(new_value);
    return old_value;
}

template<class T, class... Args>
std::unique_ptr<T> make_unique(Args&&... args)
{
	return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
}
}

#include <cassert>
#include <cstddef>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <sstream>
#include <string>
#include <type_traits>

std::istream* istream;

bool ignore_line()
{
	return !!istream->ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

char peek()
{
	const auto ch = istream->peek();

	assert(istream->good());
	return static_cast<char>(ch);
}

bool read()
{
	return true;
}

template<typename T>
bool read(T& arg)
{
	return !!((*istream) >> arg);
}

template<typename T, typename... Ts>
bool read(T& arg, Ts&... args)
{
	return read(arg) && read(args...);
}

template<typename T1, typename T2>
bool read(std::pair<T1, T2>& pair)
{
	return read(pair.first, pair.second);
}

bool read_ln_non_empty(std::string& str)
{
	return !!std::getline(*istream, str) && !str.empty();
}

bool read_ln(std::string& str)
{
	return !!std::getline(*istream, str);
}

template<typename... Ts>
bool read_ln(Ts&... args)
{
	return read(args...) && ignore_line();
}

template<class T = void, class V, class Fn>
bool read_vec(std::size_t count, V& vec, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename V::value_type, T>::type;

	vec.reserve(vec.size() + count);
	for (std::size_t i = 0; i < count; ++i)
	{
		S y;
		if (!read(y))
			return false;
		vec.push_back(fn(y));
	}
	return true;
}

template<class V>
bool read_vec(std::size_t count, V& vec)
{
	using T = typename V::value_type;
	return read_vec<T>(count, vec, [](T x) { return x; });
}

template<typename T = void, class V, class Fn>
bool read_size_vec(V& vec, Fn fn)
{
	std::size_t size;
	read(size);
	if (size == 0)
		return false;

	vec.clear();
	return read_vec<T>(size, vec, fn);
}

template<class V>
bool read_size_vec(V& vec)
{
	std::size_t size;

	vec.clear();
	if (!read(size) || size == 0)
		return false;

	return read_vec(size, vec);
}

template<class V>
bool read_vec_ln(V& vec)
{
	using T = typename V::value_type;

	std::string str;
	if (!read_ln(str))
		return false;

	std::istringstream ss(str);

	T x;
	while (ss >> x)
		vec.push_back(x);

	return !vec.empty();
}

void write()
{}

template<typename T>
void write(const T& arg)
{
	std::cout << arg;
}

template<typename T, typename... Ts>
void write(const T& arg, const Ts&... args)
{
	write(arg);
	write(args...);
}

template<typename... Ts>
void write_ln(const Ts&... args)
{
	write(args..., '\n');
}

template<class It, class Fn, typename Join>
void write_range(It first, It last, Fn fn, Join join)
{
	if (first == last)
		return;

	write(fn(*first++));
	while (first != last)
		write(join, fn(*first++));
}

template<class It, typename Join>
void write_range(It first, It last, Join join)
{
	using T = typename std::iterator_traits<It>::value_type;
	write_range(first, last, [](const T& x) { return x; }, join);
}

template<class Vec, class... Args>
void write_vec(const Vec& vec, Args... args)
{
	write_range(vec.begin(), vec.end(), args...);
}

#include <cassert>
#include <fstream>
#include <iostream>
#include <string>
#include <type_traits>
#include <utility>

class CP0
{
public:
	CP0()
	{
		std::ios_base::sync_with_stdio(false);

#ifdef OFFLINE_JUDGE
		file_.open("input.txt");
		assert(file_);
		istream = &file_;

		std::cout << std::unitbuf;
#else
		istream = &std::cin;
#endif
	}

private:
#ifdef OFFLINE_JUDGE
	std::ifstream file_;
#endif
};

class CP1 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int n_test_cases;
		(*istream) >> n_test_cases;
		ignore_line();

		for (unsigned int i = 1; i <= n_test_cases; ++i)
		{
			read_input();
			assert(!istream->bad());
			solve(i);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP2 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int i = 1;
		while (read_input())
		{
			assert(!istream->bad());
			solve(i++);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual bool read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP3 : public CP0
{
public:
	int run()
	{
		init();

		read_input();
		assert(!istream->bad());
		solve();

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve() = 0;
	virtual void end()
	{}
};

#define MAIN                                                                                                           \
	int main()                                                                                                         \
	{                                                                                                                  \
		CP app;                                                                                                        \
		return app.run();                                                                                              \
	}

#include <algorithm>
#include <cassert>
#include <limits>
#include <queue>
#include <utility>
#include <vector>

using Flow = unsigned int;
using Size = unsigned int;
constexpr auto unvisited_vertex = static_cast<Size>(-1);

struct Edge
{
	Size to;
	Flow flow;
};

using Adjacency_list = std::vector<std::vector<Edge>>;

class Graph
{
public:
	Graph(const Adjacency_list& graph)
	{
		const auto n_vertices = graph.size();
		edge_indices_.resize(n_vertices);
		Size edge_index = 0;

		for (Size v = 0; v < n_vertices; ++v)
			for (auto& edge : graph[v])
			{
				edges_.push_back({edge.to, edge.flow});
				edges_.push_back({v, edge.flow});

				edge_indices_[v].push_back(edge_index++);
				edge_indices_[edge.to].push_back(edge_index++);
			}
	}

	Size vertices() const
	{
		return static_cast<Size>(edge_indices_.size());
	}

	const std::vector<Size>& edges(Size vertex) const
	{
		return edge_indices_[vertex];
	}

	Edge& edge(Size index)
	{
		return edges_[index];
	}

	const Edge& edge(Size index) const
	{
		return edges_[index];
	}

	Edge& opposite_edge(Size index)
	{
		const auto opposite_index = index ^ 1;
		return edges_[opposite_index];
	}

private:
	std::vector<std::vector<Size>> edge_indices_;

	std::vector<Edge> edges_;
};

std::vector<Size> bfs_augmenting_path(const Graph& graph, Size source, Size dest)
{
	std::vector<std::pair<Size, Size>> pred(graph.vertices(), {unvisited_vertex, 0});

	std::queue<Size> queue;
	queue.push(source);

	while (!queue.empty())
	{
		const auto v = queue.front();
		queue.pop();

		if (v == dest)
			break;

		for (auto edge_index : graph.edges(v))
		{
			auto& edge = graph.edge(edge_index);
			if (edge.flow > 0 && pred[edge.to].first == unvisited_vertex)
			{
				pred[edge.to] = {v, edge_index};
				queue.push(edge.to);
			}
		}
	}

	std::vector<Size> edges;
	if (pred[dest].first != unvisited_vertex)
	{
		edges.push_back(pred[dest].second);
		while (pred[dest].first != source)
		{
			dest = pred[dest].first;
			edges.push_back(pred[dest].second);
		}
	}

	return edges;
}

Flow max_network_flow(const Adjacency_list& graph, Size source, Size dest)
{
	Graph res_graph(graph);

	Flow max_flow = 0;
	while (true)
	{
		const auto path = bfs_augmenting_path(res_graph, source, dest);
		if (path.empty())
			break;

		Flow d_flow = std::numeric_limits<Flow>::max();
		for (auto edge_index : path)
		{
			assert(res_graph.edge(edge_index).flow > 0);
			d_flow = std::min(d_flow, res_graph.edge(edge_index).flow);
		}

		for (auto edge_index : path)
		{
			res_graph.edge(edge_index).flow -= d_flow;
			res_graph.opposite_edge(edge_index).flow += d_flow;
		}

		max_flow += d_flow;
	}

	return max_flow;
}

class CP : public CP2
{
private:
	virtual bool read_input() override
	{
		Size n_nodes;
		if (!read(n_nodes) || n_nodes == 0)
			return false;

		assert(2 <= n_nodes && n_nodes <= 100);
		network_.clear();
		network_.resize(n_nodes);

		Size n_connections;
		read(source_, dest_, n_connections);
		--source_, --dest_; // To zero-based indexing
		assert(source_ < n_nodes && dest_ < n_nodes);

		for (Size i = 0; i < n_connections; ++i)
		{
			Size n1, n2;
			Flow bandwidth;
			read(n1, n2, bandwidth);
			--n1, --n2; // To zero-based indexing
			network_[n1].push_back({n2, bandwidth});
		}

		return true;
	}

	virtual void solve(unsigned int i_case) override
	{
		write_ln("Network ", i_case);
		write_ln("The bandwidth is ", max_network_flow(network_, source_, dest_), '.');
		write_ln();
	}

private:
	Size source_, dest_;
	Adjacency_list network_;
};

MAIN


