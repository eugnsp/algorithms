#include <utility>
#include <memory>

namespace std
{
template<class T, class U = T>
T exchange(T& obj, U&& new_value)
{
    T old_value = std::move(obj);
    obj = std::forward<U>(new_value);
    return old_value;
}

template<class T, class... Args>
std::unique_ptr<T> make_unique(Args&&... args)
{
	return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
}
}

#include <cassert>
#include <cstddef>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <sstream>
#include <string>
#include <type_traits>

std::istream* istream;

bool ignore_line()
{
	return !!istream->ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

char peek()
{
	const auto ch = istream->peek();

	assert(istream->good());
	return static_cast<char>(ch);
}

bool read()
{
	return true;
}

template<typename T>
bool read(T& arg)
{
	return !!((*istream) >> arg);
}

template<typename T, typename... Ts>
bool read(T& arg, Ts&... args)
{
	return read(arg) && read(args...);
}

template<typename T1, typename T2>
bool read(std::pair<T1, T2>& pair)
{
	return read(pair.first, pair.second);
}

bool read_ln_non_empty(std::string& str)
{
	return !!std::getline(*istream, str) && !str.empty();
}

bool read_ln(std::string& str)
{
	return !!std::getline(*istream, str);
}

template<typename... Ts>
bool read_ln(Ts&... args)
{
	return read(args...) && ignore_line();
}

template<class T = void, class V, class Fn>
bool read_vec(std::size_t count, V& vec, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename V::value_type, T>::type;

	vec.reserve(vec.size() + count);
	for (std::size_t i = 0; i < count; ++i)
	{
		S y;
		if (!read(y))
			return false;
		vec.push_back(fn(y));
	}
	return true;
}

template<class V>
bool read_vec(std::size_t count, V& vec)
{
	using T = typename V::value_type;
	return read_vec<T>(count, vec, [](T x) { return x; });
}

template<typename T = void, class V, class Fn>
bool read_size_vec(V& vec, Fn fn)
{
	std::size_t size;
	read(size);
	if (size == 0)
		return false;

	vec.clear();
	return read_vec<T>(size, vec, fn);
}

template<class V>
bool read_size_vec(V& vec)
{
	std::size_t size;

	vec.clear();
	if (!read(size) || size == 0)
		return false;

	return read_vec(size, vec);
}

template<class V>
bool read_vec_ln(V& vec)
{
	using T = typename V::value_type;

	std::string str;
	if (!read_ln(str))
		return false;

	std::istringstream ss(str);

	T x;
	while (ss >> x)
		vec.push_back(x);

	return !vec.empty();
}

void write()
{}

template<typename T>
void write(const T& arg)
{
	std::cout << arg;
}

template<typename T, typename... Ts>
void write(const T& arg, const Ts&... args)
{
	write(arg);
	write(args...);
}

template<typename... Ts>
void write_ln(const Ts&... args)
{
	write(args..., '\n');
}

template<class It, class Fn, typename Join>
void write_range(It first, It last, Fn fn, Join join)
{
	if (first == last)
		return;

	write(fn(*first++));
	while (first != last)
		write(join, fn(*first++));
}

template<class It, typename Join>
void write_range(It first, It last, Join join)
{
	using T = typename std::iterator_traits<It>::value_type;
	write_range(first, last, [](const T& x) { return x; }, join);
}

template<class Vec, class... Args>
void write_vec(const Vec& vec, Args... args)
{
	write_range(vec.begin(), vec.end(), args...);
}

#include <cassert>
#include <fstream>
#include <iostream>
#include <string>
#include <type_traits>
#include <utility>

class CP0
{
public:
	CP0()
	{
		std::ios_base::sync_with_stdio(false);

#ifdef OFFLINE_JUDGE
		file_.open("input.txt");
		assert(file_);
		istream = &file_;

		std::cout << std::unitbuf;
#else
		istream = &std::cin;
#endif
	}

private:
#ifdef OFFLINE_JUDGE
	std::ifstream file_;
#endif
};

class CP1 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int n_test_cases;
		(*istream) >> n_test_cases;
		ignore_line();

		for (unsigned int i = 1; i <= n_test_cases; ++i)
		{
			read_input();
			assert(!istream->bad());
			solve(i);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP2 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int i = 1;
		while (read_input())
		{
			assert(!istream->bad());
			solve(i++);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual bool read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP3 : public CP0
{
public:
	int run()
	{
		init();

		read_input();
		assert(!istream->bad());
		solve();

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve() = 0;
	virtual void end()
	{}
};

#define MAIN                                                                                                           \
	int main()                                                                                                         \
	{                                                                                                                  \
		CP app;                                                                                                        \
		return app.run();                                                                                              \
	}

#include <cmath>

template<typename T>
struct Point
{
	using Type = T;

	T x;
	T y;

	Point() = default;

	Point(T px, T py) : x(px), y(py)
	{}

	Point& operator+=(const Point& point)
	{
		x += point.x;
		y += point.y;
		return *this;
	}

	Point& operator-=(const Point& point)
	{
		x -= point.x;
		y -= point.y;
		return *this;
	}

	Point& operator*=(T scalar)
	{
		x *= scalar;
		y *= scalar;
		return *this;
	}

	Point& operator/=(T scalar)
	{
		x /= scalar;
		y /= scalar;
		return *this;
	}
};

template<typename T>
bool operator==(const Point<T>& point1, const Point<T>& point2)
{
	return point1.x == point2.x && point1.y == point2.y;
}

template<typename T>
bool operator!=(const Point<T>& point1, const Point<T>& point2)
{
	return !(point1 == point2);
}

template<typename T>
bool less_xy(const Point<T>& point1, const Point<T>& point2)
{
	if (point1.x == point2.x)
		return point1.y < point2.y;
	return point1.x < point2.x;
}

template<typename T>
bool less_yx(const Point<T>& point1, const Point<T>& point2)
{
	if (point1.y == point2.y)
		return point1.x < point2.x;
	return point1.y < point2.y;
}

template<typename T>
bool operator<(const Point<T>& point1, const Point<T>& point2)
{
	return less_yx(point1, point2);
}

template<typename T>
Point<T> operator+(Point<T> point1, const Point<T>& point2)
{
	return (point1 += point2);
}

template<typename T>
Point<T> operator-(Point<T> point1, const Point<T>& point2)
{
	return (point1 -= point2);
}

template<typename T>
Point<T> operator/(Point<T> point, T scalar)
{
	return (point /= scalar);
}

template<typename T>
Point<T> operator*(T scalar, Point<T> point)
{
	return (point *= scalar);
}

template<typename T>
Point<T> operator*(Point<T> point, T scalar)
{
	return scalar * point;
}

template<typename T>
T dot(const Point<T>& point1, const Point<T>& point2)
{
	return point1.x * point2.x + point1.y * point2.y;
}

template<typename T>
T cross(const Point<T>& point1, const Point<T>& point2)
{
	return point1.x * point2.y - point1.y * point2.x;
}

template<typename T>
T norm_sq(const Point<T>& point)
{
	return dot(point, point);
}

template<typename T>
T norm(const Point<T>& point)
{
	return std::sqrt(dot(point, point));
}

template<typename T>
double distance_sq(const Point<T>& point1, const Point<T>& point2)
{
	auto dv = point1 - point2;
	return norm_sq(dv);
}

template<typename T>
double distance(const Point<T>& point1, const Point<T>& point2)
{
	return std::sqrt(distance_sq(point1, point2));
}

template<typename T>
bool read(Point<T>& point)
{
	return read(point.x, point.y);
}

template<typename T>
void write(const Point<T>& point)
{
	return write('(', point.x, ',', point.y, ')');
}

#include <cstddef>
#include <utility>

template<typename I = std::size_t>
struct Position
{
	using Type = I;

	I row = 0;
	I col = 0;

	Position() = default;

	constexpr Position(I row, I col) : row(row), col(col)
	{}

	Position& operator+=(const Position& pos)
	{
		row += pos.row;
		col += pos.col;
		return *this;
	}

	Position& operator-=(const Position& pos)
	{
		row -= pos.row;
		col -= pos.col;
		return *this;
	}

	void to_zero_based()
	{
		--row;
		--col;
	}
};

template<typename I>
bool operator==(const Position<I>& pos1, const Position<I>& pos2)
{
	return pos1.row == pos2.row && pos1.col == pos2.col;
}

template<typename I>
bool operator!=(const Position<I>& pos1, const Position<I>& pos2)
{
	return !(pos1 == pos2);
}

template<typename I>
bool operator<(const Position<I>& pos1, const Position<I>& pos2)
{
	return std::make_pair(pos1.row, pos1.col) < std::make_pair(pos2.row, pos2.col);
}

template<typename I>
Position<I> operator+(Position<I> pos1, const Position<I>& pos2)
{
	return (pos1 += pos2);
}

template<typename I>
Position<I> operator-(Position<I> pos1, const Position<I>& pos2)
{
	return (pos1 -= pos2);
}

template<typename I>
bool read(Position<I>& pos)
{
	return read(pos.row, pos.col);
}

#include <type_traits>

template<typename T = void, class Matrix, class Fn>
bool read_matrix(Matrix& mat, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename Matrix::Type, T>::type;

	for (typename Matrix::Size row = 0; row < mat.rows(); ++row)
		for (typename Matrix::Size col = 0; col < mat.cols(); ++col)
		{
			S s;
			if (!read(s))
				return false;
			mat(row, col) = fn(s);
		}

	return true;
}

template<class Matrix>
bool read_matrix(Matrix& mat)
{
	return read_matrix<typename Matrix::Type>(mat,
		[](const typename Matrix::Type& x) { return x; });
}

template<typename T = void, class Matrix, class Fn>
bool read_transposed_matrix(Matrix& mat, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename Matrix::Type, T>::type;

	for (typename Matrix::Size row = 0; row < mat.rows(); ++row)
		for (typename Matrix::Size col = 0; col < mat.cols(); ++col)
		{
			S s;
			if (!read(s))
				return false;
			mat(col, row) = fn(s);
		}

	return true;
}

template<class Matrix>
bool read_transposed_matrix(Matrix& mat)
{
	return read_transposed_matrix<typename Matrix::Type>(mat,
		[](const typename Matrix::Type& x) { return x; });
}

template<class Matrix>
bool write_matrix(Matrix& mat)
{
	for (typename Matrix::Size row = 0; row < mat.rows(); ++row)
	{
		for (typename Matrix::Size col = 0; col < mat.cols(); ++col)
			write(mat(row, col), ' ');
		write_ln();
	}

	return true;
}

#include <array>
#include <cassert>
#include <cstddef>

template<typename T, std::size_t rows_, std::size_t cols_>
class Matrix
{
public:
	using Type = T;
	using Size = std::size_t;

public:
	Matrix() = default;

	Matrix(const Type& value)
	{
		fill(value);
	}

	template<typename... Ts>
	Matrix(const Ts&... values) : data_{values...}
	{}

	Type& operator[](Size index)
	{
		return data_[index];
	}

	const Type& operator[](Size index) const
	{
		assert(index < size());
		return data_[index];
	}

	Type& operator()(Size row, Size col)
	{
		assert(row < rows() && col < cols());
		return data_[index(row, col)];
	}

	const Type& operator()(Size row, Size col) const
	{
		assert(row < rows() && col < cols());
		return data_[index(row, col)];
	}

	Type& operator()(Position<Size> pos)
	{
		return (*this)(pos.row, pos.col);
	}

	const Type& operator()(Position<Size> pos) const
	{
		return (*this)(pos.row, pos.col);
	}

	void fill(const Type& value)
	{
		data_.fill(value);
	}

	static constexpr Size rows()
	{
		return rows_;
	}

	static constexpr Size cols()
	{
		return cols_;
	}

	static constexpr Size size()
	{
		return rows() * cols();
	}

	static Size index(Size row, Size col)
	{
		return row + rows() * col;
	}

	static Size index(Position<Size> pos)
	{
		return index(pos.row, pos.col);
	}

	static Position<Size> pos(Size index)
	{
		return {index % rows(), index / rows()};
	}

private:
	std::array<Type, rows_ * cols_> data_;
};

template<class Matrix>
bool is_inside_extents(Position<typename Matrix::Size> pos)
{
	return pos.row < Matrix::rows() && pos.col < Matrix::cols();
}

#include <cassert>
#include <iomanip>
#include <list>
#include <queue>
#include <vector>

struct Side
{
	std::size_t index;

	Point<double> normal;
	double c;
};

using Sides = std::list<Side>;

struct Queue_element
{
	double time;
	Sides::const_iterator side;
	std::size_t index;

	bool operator<(const Queue_element& other) const
	{
		return other.time < time;
	}
};

using Queue = std::priority_queue<Queue_element>;

Point<double> linear_solve(const Matrix<double, 2, 2>& m, const Point<double>& r)
{
	const auto det = m(0, 0) * m(1, 1) - m(0, 1) * m(1, 0);
	return {cross(r, {m(0, 1), m(1, 1)}) / det, cross({m(0, 0), m(1, 0)}, r) / det};
}

double collapse_time(const Sides& sides, const Sides::const_iterator side)
{
	const auto prev = std::prev(side != sides.begin() ? side : sides.end());
	const auto next = std::next(side) != sides.end() ? std::next(side) : sides.begin();

	const auto side_m_prev = side->normal - prev->normal;
	const auto side_m_next = side->normal - next->normal;
	const Matrix<double, 2, 2> m{side_m_prev.x, side_m_next.x, side_m_prev.y, side_m_next.y};

	const auto rc = linear_solve(m, {prev->c - side->c, next->c - side->c});
	return dot(side->normal, rc) + side->c;
}

Queue make_initial_queue(const Sides& sides)
{
	Queue queue;

	std::size_t index = 0;
	for (auto side = sides.begin(); side != sides.end(); ++side)
		queue.push({collapse_time(sides, side), side, index++});

	return queue;
}

double inscribed_circle_radius(const std::vector<Point<double>>& points)
{

	std::list<Side> sides;

	std::size_t index = 0;
	for (auto curr = points.begin(), next = std::next(curr); curr != points.end(); ++curr, ++next)
	{
		if (next == points.end())
			next = points.begin();

		const auto curr_m_next = *curr - *next;
		const auto distance = norm(curr_m_next);

		const auto normal = Point<double>{curr_m_next.y, -curr_m_next.x} / distance;
		const auto c = cross(*curr, *next) / distance;
		sides.push_back({index++, normal, c});
	}

	std::vector<bool> collapsed(points.size(), false);

	auto queue = make_initial_queue(sides);
	while (sides.size() >= 3)
	{
		const auto top = queue.top();
		queue.pop();
		if (collapsed[top.index])
			continue;

		collapsed[top.index] = true;

		const auto& side = top.side;
		const auto prev = std::prev(side != sides.begin() ? side : sides.end());
		const auto next = std::next(side) != sides.end() ? std::next(side) : sides.begin();
		sides.erase(side);

		const auto t_prev = collapse_time(sides, prev);
		const auto t_next = collapse_time(sides, next);

		queue.push({t_prev, prev, prev->index});
		queue.push({t_next, next, next->index});
	}

	while (!queue.empty() && collapsed[queue.top().index])
		queue.pop();

	assert(!queue.empty());
	return queue.top().time;
}

class CP : public CP2
{
private:
	virtual bool read_input() override
	{
		return read_size_vec(points_);
	}

	virtual void solve(unsigned int) override
	{
		const auto r = inscribed_circle_radius(points_);
		write_ln(std::fixed, std::setprecision(3), r);
	}

private:
	std::vector<Point<double>> points_;
};

MAIN


