#include <utility>
#include <memory>

namespace std
{
template<class T, class U = T>
T exchange(T& obj, U&& new_value)
{
    T old_value = std::move(obj);
    obj = std::forward<U>(new_value);
    return old_value;
}

template<class T, class... Args>
std::unique_ptr<T> make_unique(Args&&... args)
{
	return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
}
}

#include <cassert>
#include <cstddef>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <sstream>
#include <string>
#include <type_traits>

std::istream* istream;

bool ignore_line()
{
	return !!istream->ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

char peek()
{
	const auto ch = istream->peek();

	assert(istream->good());
	return static_cast<char>(ch);
}

bool read()
{
	return true;
}

template<typename T>
bool read(T& arg)
{
	return !!((*istream) >> arg);
}

template<typename T, typename... Ts>
bool read(T& arg, Ts&... args)
{
	return read(arg) && read(args...);
}

template<typename T1, typename T2>
bool read(std::pair<T1, T2>& pair)
{
	return read(pair.first, pair.second);
}

bool read_ln_non_empty(std::string& str)
{
	return !!std::getline(*istream, str) && !str.empty();
}

bool read_ln(std::string& str)
{
	return !!std::getline(*istream, str);
}

template<typename... Ts>
bool read_ln(Ts&... args)
{
	return read(args...) && ignore_line();
}

template<class T = void, class V, class Fn>
bool read_vec(std::size_t count, V& vec, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename V::value_type, T>::type;

	vec.reserve(vec.size() + count);
	for (std::size_t i = 0; i < count; ++i)
	{
		S y;
		if (!read(y))
			return false;
		vec.push_back(fn(y));
	}
	return true;
}

template<class V>
bool read_vec(std::size_t count, V& vec)
{
	using T = typename V::value_type;
	return read_vec<T>(count, vec, [](T x) { return x; });
}

template<typename T = void, class V, class Fn>
bool read_size_vec(V& vec, Fn fn)
{
	std::size_t size;
	read(size);
	if (size == 0)
		return false;

	vec.clear();
	return read_vec<T>(size, vec, fn);
}

template<class V>
bool read_size_vec(V& vec)
{
	std::size_t size;

	vec.clear();
	if (!read(size) || size == 0)
		return false;

	return read_vec(size, vec);
}

template<class V>
bool read_vec_ln(V& vec)
{
	using T = typename V::value_type;

	std::string str;
	if (!read_ln(str))
		return false;

	std::istringstream ss(str);

	T x;
	while (ss >> x)
		vec.push_back(x);

	return !vec.empty();
}

void write()
{}

template<typename T>
void write(const T& arg)
{
	std::cout << arg;
}

template<typename T, typename... Ts>
void write(const T& arg, const Ts&... args)
{
	write(arg);
	write(args...);
}

template<typename... Ts>
void write_ln(const Ts&... args)
{
	write(args..., '\n');
}

template<class It, class Fn, typename Join>
void write_range(It first, It last, Fn fn, Join join)
{
	if (first == last)
		return;

	write(fn(*first++));
	while (first != last)
		write(join, fn(*first++));
}

template<class It, typename Join>
void write_range(It first, It last, Join join)
{
	using T = typename std::iterator_traits<It>::value_type;
	write_range(first, last, [](const T& x) { return x; }, join);
}

template<class Vec, class... Args>
void write_vec(const Vec& vec, Args... args)
{
	write_range(vec.begin(), vec.end(), args...);
}

#include <cassert>
#include <fstream>
#include <iostream>
#include <string>
#include <type_traits>
#include <utility>

class CP0
{
public:
	CP0()
	{
		std::ios_base::sync_with_stdio(false);

#ifdef OFFLINE_JUDGE
		file_.open("input.txt");
		assert(file_);
		istream = &file_;

		std::cout << std::unitbuf;
#else
		istream = &std::cin;
#endif
	}

private:
#ifdef OFFLINE_JUDGE
	std::ifstream file_;
#endif
};

class CP1 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int n_test_cases;
		(*istream) >> n_test_cases;
		ignore_line();

		for (unsigned int i = 1; i <= n_test_cases; ++i)
		{
			read_input();
			assert(!istream->bad());
			solve(i);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP2 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int i = 1;
		while (read_input())
		{
			assert(!istream->bad());
			solve(i++);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual bool read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP3 : public CP0
{
public:
	int run()
	{
		init();

		read_input();
		assert(!istream->bad());
		solve();

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve() = 0;
	virtual void end()
	{}
};

#define MAIN                                                                                                           \
	int main()                                                                                                         \
	{                                                                                                                  \
		CP app;                                                                                                        \
		return app.run();                                                                                              \
	}

#include <algorithm>
#include <array>
#include <cassert>
#include <map>
#include <memory>
#include <string>
#include <vector>

using Word = std::string;
using Words = std::vector<Word>;

class Sms
{
private:
	static constexpr auto invalid_n_keys = static_cast<std::size_t>(-1);

	struct Node
	{
		std::array<std::unique_ptr<Node>, 26> children;
		std::string key_sequence;

		union
		{
			std::size_t n_keys = 0;
			std::size_t same_digits_list_index;
		};

		auto& child(char ch)
		{
			return children[letter_to_index(ch)];
		}

		auto& child(char ch) const
		{
			return children[letter_to_index(ch)];
		}
	};

	struct Memo_node
	{
		const Node* node_ptr = nullptr;
		std::size_t n_keys = invalid_n_keys;
		std::size_t word_length = 0;
	};

	using Memo = std::map<std::string::iterator, Memo_node>;

public:
	Sms(const Words& dictionary)
	{
		build_trie(dictionary);
	}

	std::string key_sequence(Word text) const
	{
		Memo memo;
		min_key_sequence(text.begin(), text.end(), memo);

		std::string key_sequence;
		for (auto it = text.begin();; key_sequence += 'R')
		{
			const auto& memo_node = memo.at(it);
			auto node = memo_node.node_ptr;
			assert(node != nullptr);

			key_sequence += node->key_sequence;
			it += memo_node.word_length;
			if (it == text.end())
				break;
		}

		return key_sequence;
	}

private:
	static std::size_t letter_to_index(char letter)
	{
		assert('a' <= letter && letter <= 'z');
		return static_cast<std::size_t>(letter - 'a');
	}

	static char letter_to_digit(char letter)
	{
		assert('a' <= letter && letter <= 'z');

		constexpr char l_to_d[] = {2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9};
		return '0' + l_to_d[letter_to_index(letter)];
	}

	static Word text_to_digits(Word text)
	{
		std::transform(text.begin(), text.end(), text.begin(), letter_to_digit);
		return text;
	}

	void build_trie(const Words& dictionary)
	{
		std::map<std::string, std::size_t> same_digits_list_index;
		std::vector<Node*> leaves;
		leaves.reserve(dictionary.size());

		for (auto& word : dictionary)
		{
			auto node = &dictionary_;
			for (auto ch : word)
			{
				auto& child = node->child(ch);
				if (!child)
					child.reset(new Node);
				node = child.get();
			}

			const auto digits = text_to_digits(word);
			node->same_digits_list_index = same_digits_list_index[digits]++;
			node->key_sequence = digits;

			leaves.push_back(node);
		}

		for (auto leaf : leaves)
		{
			const auto index = leaf->same_digits_list_index;
			if (index == 0)
				leaf->n_keys = leaf->key_sequence.length();
			else
			{
				const auto same_digits_list_size = same_digits_list_index[leaf->key_sequence];
				const auto inv_index = same_digits_list_size - index;
				const auto min_index = std::min(index, inv_index);
				leaf->n_keys = leaf->key_sequence.length() + min_index;
				leaf->key_sequence += (index <= inv_index ? 'U' : 'D') + ('(' + std::to_string(min_index) + ')');
			}
		}
	}

	std::size_t min_key_sequence(std::string::iterator first, std::string::iterator last, Memo& memo) const
	{
		if (memo.count(first) > 0)
			return memo.at(first).n_keys;

		auto& memo_node = memo[first];
		Memo_node min_node;

		auto node = &dictionary_;
		for (std::size_t word_length = 1; first != last; ++first, ++word_length)
		{
			const auto& child = node->child(*first);
			if (!child)
				break;

			node = child.get();
			if (node->n_keys != 0) // Found a word
			{
				auto n_keys = (first + 1 == last) ? 0 : min_key_sequence(first + 1, last, memo);
				if (n_keys == invalid_n_keys)
					continue;

				n_keys += node->n_keys + 1;
				if (n_keys < min_node.n_keys)
					min_node = Memo_node{node, n_keys, word_length};
			}
		}

		memo_node = min_node;
		return min_node.n_keys;
	}

private:
	Node dictionary_;
};

class CP : public CP2
{
private:
	virtual bool read_input() override
	{
		return read_size_vec(dictionary_) && read_size_vec(texts_);
	}

	virtual void solve(unsigned int) override
	{
		Sms sms(dictionary_);
		for (auto& text : texts_)
			write_ln(sms.key_sequence(text));
	}

private:
	Words dictionary_;
	Words texts_;
};

MAIN


