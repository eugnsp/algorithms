#include <utility>
#include <memory>

namespace std
{
template<class T, class U = T>
T exchange(T& obj, U&& new_value)
{
    T old_value = std::move(obj);
    obj = std::forward<U>(new_value);
    return old_value;
}

template<class T, class... Args>
std::unique_ptr<T> make_unique(Args&&... args)
{
	return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
}
}

#include <cassert>
#include <cstddef>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <sstream>
#include <string>
#include <type_traits>

std::istream* istream;

bool ignore_line()
{
	return !!istream->ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

char peek()
{
	const auto ch = istream->peek();

	assert(istream->good());
	return static_cast<char>(ch);
}

bool read()
{
	return true;
}

template<typename T>
bool read(T& arg)
{
	return !!((*istream) >> arg);
}

template<typename T, typename... Ts>
bool read(T& arg, Ts&... args)
{
	return read(arg) && read(args...);
}

template<typename T1, typename T2>
bool read(std::pair<T1, T2>& pair)
{
	return read(pair.first, pair.second);
}

bool read_ln_non_empty(std::string& str)
{
	return !!std::getline(*istream, str) && !str.empty();
}

bool read_ln(std::string& str)
{
	return !!std::getline(*istream, str);
}

template<typename... Ts>
bool read_ln(Ts&... args)
{
	return read(args...) && ignore_line();
}

template<class T = void, class V, class Fn>
bool read_vec(std::size_t count, V& vec, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename V::value_type, T>::type;

	vec.reserve(vec.size() + count);
	for (std::size_t i = 0; i < count; ++i)
	{
		S y;
		if (!read(y))
			return false;
		vec.push_back(fn(y));
	}
	return true;
}

template<class V>
bool read_vec(std::size_t count, V& vec)
{
	using T = typename V::value_type;
	return read_vec<T>(count, vec, [](T x) { return x; });
}

template<typename T = void, class V, class Fn>
bool read_size_vec(V& vec, Fn fn)
{
	std::size_t size;
	read(size);
	if (size == 0)
		return false;

	vec.clear();
	return read_vec<T>(size, vec, fn);
}

template<class V>
bool read_size_vec(V& vec)
{
	std::size_t size;

	vec.clear();
	if (!read(size) || size == 0)
		return false;

	return read_vec(size, vec);
}

template<class V>
bool read_vec_ln(V& vec)
{
	using T = typename V::value_type;

	std::string str;
	if (!read_ln(str))
		return false;

	std::istringstream ss(str);

	T x;
	while (ss >> x)
		vec.push_back(x);

	return !vec.empty();
}

void write()
{}

template<typename T>
void write(const T& arg)
{
	std::cout << arg;
}

template<typename T, typename... Ts>
void write(const T& arg, const Ts&... args)
{
	write(arg);
	write(args...);
}

template<typename... Ts>
void write_ln(const Ts&... args)
{
	write(args..., '\n');
}

template<class It, class Fn, typename Join>
void write_range(It first, It last, Fn fn, Join join)
{
	if (first == last)
		return;

	write(fn(*first++));
	while (first != last)
		write(join, fn(*first++));
}

template<class It, typename Join>
void write_range(It first, It last, Join join)
{
	using T = typename std::iterator_traits<It>::value_type;
	write_range(first, last, [](const T& x) { return x; }, join);
}

template<class Vec, class... Args>
void write_vec(const Vec& vec, Args... args)
{
	write_range(vec.begin(), vec.end(), args...);
}

#include <cassert>
#include <fstream>
#include <iostream>
#include <string>
#include <type_traits>
#include <utility>

class CP0
{
public:
	CP0()
	{
		std::ios_base::sync_with_stdio(false);

#ifdef OFFLINE_JUDGE
		file_.open("input.txt");
		assert(file_);
		istream = &file_;

		std::cout << std::unitbuf;
#else
		istream = &std::cin;
#endif
	}

private:
#ifdef OFFLINE_JUDGE
	std::ifstream file_;
#endif
};

class CP1 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int n_test_cases;
		(*istream) >> n_test_cases;
		ignore_line();

		for (unsigned int i = 1; i <= n_test_cases; ++i)
		{
			read_input();
			assert(!istream->bad());
			solve(i);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP2 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int i = 1;
		while (read_input())
		{
			assert(!istream->bad());
			solve(i++);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual bool read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP3 : public CP0
{
public:
	int run()
	{
		init();

		read_input();
		assert(!istream->bad());
		solve();

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve() = 0;
	virtual void end()
	{}
};

#define MAIN                                                                                                           \
	int main()                                                                                                         \
	{                                                                                                                  \
		CP app;                                                                                                        \
		return app.run();                                                                                              \
	}

#include <array>
#include <cassert>
#include <memory>
#include <stack>
#include <utility>
#include <vector>

struct Node;
using Node_ptr = std::unique_ptr<Node>;

enum class Node_type
{
	NUMBER,
	OPERATOR
};

enum class Token_type
{
	NUMBER,
	OPERATOR,
	OPEN_PAREN,
	CLOSE_PAREN,
	NONE
};

struct Node
{
	Node_type type;
	char value;
	bool parenthesized = false;

	Node_ptr left;
	Node_ptr right;

	Node(Node_type type, char value = 0, Node_ptr left = {}, Node_ptr right = {}) :
		type(type), value(value), left(std::move(left)), right(std::move(right))
	{}
};

struct Token
{
	Token_type type;
	char value;

	Token(Token_type type, char value = 0) : type(type), value(value)
	{}
};

template<class Fn>
void for_each_token(const std::string& expr, Fn fn)
{
	Token_type prev_token = Token_type::NONE;

	auto it = expr.begin();
	while (it != expr.end())
	{
		if (*it == '(')
			fn(Token{prev_token = Token_type::OPEN_PAREN});
		else if (*it == ')')
			fn(Token{prev_token = Token_type::CLOSE_PAREN});
		else if (*it == '+' || *it == '*')
			fn(Token{prev_token = Token_type::OPERATOR, *it});
		else if ('0' <= *it && *it <= '9')
		{
			while (it != expr.end() && '0' <= *it && *it <= '9')
				++it;
			fn(Token{prev_token = Token_type::NUMBER});
			continue;
		}

		++it;
	}
}

class Parser
{
public:
	static Node_ptr parse(const std::string& expr)
	{
		Nodes_stack nodes;
		Tokens_stack tokens;

		for_each_token(expr, [&](const Token& token) {
			switch (token.type)
			{
			case Token_type::NUMBER:
				add_node(nodes, Node_type::NUMBER);
				break;

			case Token_type::OPERATOR:
				while (!tokens.empty() && tokens.top().type == Token_type::OPERATOR &&
					   operator_precedence(tokens.top()) >= operator_precedence(token))
					compose_node(nodes, tokens);

				[[fallthrough]];

			case Token_type::OPEN_PAREN:
				tokens.push(token);
				break;

			case Token_type::CLOSE_PAREN:
				while (!tokens.empty() && tokens.top().type != Token_type::OPEN_PAREN)
					compose_node(nodes, tokens);

				assert(!tokens.empty());
				tokens.pop();
				nodes.top()->parenthesized = true;
			}
		});

		while (!tokens.empty())
			compose_node(nodes, tokens);

		return std::move(nodes.top());
	}

private:
	using Nodes_stack = std::stack<Node_ptr>;
	using Tokens_stack = std::stack<Token>;

	static unsigned char operator_precedence(const Token& token)
	{
		assert(token.type == Token_type::OPERATOR);
		return (token.value == '*');
	}

	template<typename... Ts>
	static void add_node(Nodes_stack& nodes, Ts&&... args)
	{
		nodes.push(std::make_unique<Node>(std::forward<Ts>(args)...));
	}

	static void compose_node(Nodes_stack& nodes, Tokens_stack& tokens)
	{
		const auto& token = tokens.top();
		if (token.type == Token_type::OPERATOR)
		{
			auto right = std::move(nodes.top());
			nodes.pop();
			auto left = std::move(nodes.top());
			nodes.pop();
			add_node(nodes, Node_type::OPERATOR, token.value, std::move(left), std::move(right));
		}
		tokens.pop();
	}
};

auto catalan_numbers()
{
	std::array<unsigned long long, 37> catalan{}; // C_36 is the last that fits into ULL
	catalan[0] = 1;
	catalan[1] = 1;
	catalan[2] = 2;

	for (unsigned int i = 3; i < catalan.size(); ++i)
		for (unsigned int j = 0; j < i; ++j)
			catalan[i] += catalan[j] * catalan[i - 1 - j];

	return catalan;
}

template<typename T>
void compute_compontent_sizes(const Node_ptr& node, char parent_operator, std::vector<T>& compontent_sizes)
{
	if (!node || node->type == Node_type::NUMBER)
		return;

	const auto is_new_component = (node->parenthesized || node->value != parent_operator);
	if (is_new_component)
		compontent_sizes.push_back(1);
	else
		++compontent_sizes.back();

	compute_compontent_sizes(node->left, node->value, compontent_sizes);
	compute_compontent_sizes(node->right, node->value, compontent_sizes);
}

unsigned long long count_tree_representations(const Node_ptr& node)
{
	std::vector<unsigned int> compontent_sizes;
	compute_compontent_sizes(node, 0, compontent_sizes);

	unsigned long long n = 1;
	static auto catalan = catalan_numbers();
	for (auto nc : compontent_sizes)
		n *= catalan[nc];

	return n;
}

class CP : public CP2
{
private:
	virtual bool read_input() override
	{
		return read_ln_non_empty(expr_);
	}

	virtual void solve(unsigned int) override
	{
		auto expr_tree = Parser::parse(expr_);
		write_ln(count_tree_representations(expr_tree));
	}

private:
	std::string expr_;
};

MAIN


