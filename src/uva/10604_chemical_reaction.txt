#include <utility>
#include <memory>

namespace std
{
template<class T, class U = T>
T exchange(T& obj, U&& new_value)
{
    T old_value = std::move(obj);
    obj = std::forward<U>(new_value);
    return old_value;
}

template<class T, class... Args>
std::unique_ptr<T> make_unique(Args&&... args)
{
	return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
}
}

#include <cassert>
#include <cstddef>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <sstream>
#include <string>
#include <type_traits>

std::istream* istream;

bool ignore_line()
{
	return !!istream->ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

char peek()
{
	const auto ch = istream->peek();

	assert(istream->good());
	return static_cast<char>(ch);
}

bool read()
{
	return true;
}

template<typename T>
bool read(T& arg)
{
	return !!((*istream) >> arg);
}

template<typename T, typename... Ts>
bool read(T& arg, Ts&... args)
{
	return read(arg) && read(args...);
}

template<typename T1, typename T2>
bool read(std::pair<T1, T2>& pair)
{
	return read(pair.first, pair.second);
}

bool read_ln_non_empty(std::string& str)
{
	return !!std::getline(*istream, str) && !str.empty();
}

bool read_ln(std::string& str)
{
	return !!std::getline(*istream, str);
}

template<typename... Ts>
bool read_ln(Ts&... args)
{
	return read(args...) && ignore_line();
}

template<class T = void, class V, class Fn>
bool read_vec(std::size_t count, V& vec, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename V::value_type, T>::type;

	vec.reserve(vec.size() + count);
	for (std::size_t i = 0; i < count; ++i)
	{
		S y;
		if (!read(y))
			return false;
		vec.push_back(fn(y));
	}
	return true;
}

template<class V>
bool read_vec(std::size_t count, V& vec)
{
	using T = typename V::value_type;
	return read_vec<T>(count, vec, [](T x) { return x; });
}

template<typename T = void, class V, class Fn>
bool read_size_vec(V& vec, Fn fn)
{
	std::size_t size;
	read(size);
	if (size == 0)
		return false;

	vec.clear();
	return read_vec<T>(size, vec, fn);
}

template<class V>
bool read_size_vec(V& vec)
{
	std::size_t size;

	vec.clear();
	if (!read(size) || size == 0)
		return false;

	return read_vec(size, vec);
}

template<class V>
bool read_vec_ln(V& vec)
{
	using T = typename V::value_type;

	std::string str;
	if (!read_ln(str))
		return false;

	std::istringstream ss(str);

	T x;
	while (ss >> x)
		vec.push_back(x);

	return !vec.empty();
}

void write()
{}

template<typename T>
void write(const T& arg)
{
	std::cout << arg;
}

template<typename T, typename... Ts>
void write(const T& arg, const Ts&... args)
{
	write(arg);
	write(args...);
}

template<typename... Ts>
void write_ln(const Ts&... args)
{
	write(args..., '\n');
}

template<class It, class Fn, typename Join>
void write_range(It first, It last, Fn fn, Join join)
{
	if (first == last)
		return;

	write(fn(*first++));
	while (first != last)
		write(join, fn(*first++));
}

template<class It, typename Join>
void write_range(It first, It last, Join join)
{
	using T = typename std::iterator_traits<It>::value_type;
	write_range(first, last, [](const T& x) { return x; }, join);
}

template<class Vec, class... Args>
void write_vec(const Vec& vec, Args... args)
{
	write_range(vec.begin(), vec.end(), args...);
}

#include <cassert>
#include <fstream>
#include <iostream>
#include <string>
#include <type_traits>
#include <utility>

class CP0
{
public:
	CP0()
	{
		std::ios_base::sync_with_stdio(false);

#ifdef OFFLINE_JUDGE
		file_.open("input.txt");
		assert(file_);
		istream = &file_;

		std::cout << std::unitbuf;
#else
		istream = &std::cin;
#endif
	}

private:
#ifdef OFFLINE_JUDGE
	std::ifstream file_;
#endif
};

class CP1 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int n_test_cases;
		(*istream) >> n_test_cases;
		ignore_line();

		for (unsigned int i = 1; i <= n_test_cases; ++i)
		{
			read_input();
			assert(!istream->bad());
			solve(i);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP2 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int i = 1;
		while (read_input())
		{
			assert(!istream->bad());
			solve(i++);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual bool read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP3 : public CP0
{
public:
	int run()
	{
		init();

		read_input();
		assert(!istream->bad());
		solve();

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve() = 0;
	virtual void end()
	{}
};

#define MAIN                                                                                                           \
	int main()                                                                                                         \
	{                                                                                                                  \
		CP app;                                                                                                        \
		return app.run();                                                                                              \
	}

#include <cstddef>
#include <utility>

template<typename I = std::size_t>
struct Position
{
	using Type = I;

	I row = 0;
	I col = 0;

	Position() = default;

	constexpr Position(I row, I col) : row(row), col(col)
	{}

	Position& operator+=(const Position& pos)
	{
		row += pos.row;
		col += pos.col;
		return *this;
	}

	Position& operator-=(const Position& pos)
	{
		row -= pos.row;
		col -= pos.col;
		return *this;
	}

	void to_zero_based()
	{
		--row;
		--col;
	}
};

template<typename I>
bool operator==(const Position<I>& pos1, const Position<I>& pos2)
{
	return pos1.row == pos2.row && pos1.col == pos2.col;
}

template<typename I>
bool operator!=(const Position<I>& pos1, const Position<I>& pos2)
{
	return !(pos1 == pos2);
}

template<typename I>
bool operator<(const Position<I>& pos1, const Position<I>& pos2)
{
	return std::make_pair(pos1.row, pos1.col) < std::make_pair(pos2.row, pos2.col);
}

template<typename I>
Position<I> operator+(Position<I> pos1, const Position<I>& pos2)
{
	return (pos1 += pos2);
}

template<typename I>
Position<I> operator-(Position<I> pos1, const Position<I>& pos2)
{
	return (pos1 -= pos2);
}

template<typename I>
bool read(Position<I>& pos)
{
	return read(pos.row, pos.col);
}

#include <type_traits>

template<typename T = void, class Matrix, class Fn>
bool read_matrix(Matrix& mat, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename Matrix::Type, T>::type;

	for (typename Matrix::Size row = 0; row < mat.rows(); ++row)
		for (typename Matrix::Size col = 0; col < mat.cols(); ++col)
		{
			S s;
			if (!read(s))
				return false;
			mat(row, col) = fn(s);
		}

	return true;
}

template<class Matrix>
bool read_matrix(Matrix& mat)
{
	return read_matrix<typename Matrix::Type>(mat,
		[](const typename Matrix::Type& x) { return x; });
}

template<typename T = void, class Matrix, class Fn>
bool read_transposed_matrix(Matrix& mat, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename Matrix::Type, T>::type;

	for (typename Matrix::Size row = 0; row < mat.rows(); ++row)
		for (typename Matrix::Size col = 0; col < mat.cols(); ++col)
		{
			S s;
			if (!read(s))
				return false;
			mat(col, row) = fn(s);
		}

	return true;
}

template<class Matrix>
bool read_transposed_matrix(Matrix& mat)
{
	return read_transposed_matrix<typename Matrix::Type>(mat,
		[](const typename Matrix::Type& x) { return x; });
}

template<class Matrix>
bool write_matrix(Matrix& mat)
{
	for (typename Matrix::Size row = 0; row < mat.rows(); ++row)
	{
		for (typename Matrix::Size col = 0; col < mat.cols(); ++col)
			write(mat(row, col), ' ');
		write_ln();
	}

	return true;
}

#include <algorithm>
#include <cassert>
#include <cstddef>
#include <iosfwd>
#include <iomanip>
#include <vector>
#include <utility>

template<typename T, typename S = std::size_t>
class Matrix
{
public:
	using Type = T;
	using Size = S;

	using Container = std::vector<Type>;
	using Reference = typename Container::reference;
	using Const_reference = typename Container::const_reference;

	using Col_iterator = typename Container::iterator;
	using Col_const_iterator = typename Container::const_iterator;

public:
	Matrix() = default;

	Matrix(Size rows, Size cols) : data_(rows * cols), rows_(rows), cols_(cols)
	{}

	Matrix(Size rows, Size cols, const Type& value) : Matrix(rows, cols)
	{
		fill(value);
	}

	Matrix(const std::vector<std::vector<Type>>& data) :
		Matrix(static_cast<Size>(data.front().size()), static_cast<Size>(data.size()))
	{
		for (Size col = 0; col < cols(); ++col)
		{
			assert(data[col].size() == data.front().size());
			std::copy(data[col].begin(), data[col].end(), begin_col(col));
		}
	}

	Matrix(const Matrix&) = default;
	Matrix(Matrix&&) = default;

	Matrix& operator=(const Matrix&) = default;
	Matrix& operator=(Matrix&&) = default;

	Reference operator()(S row, S col)
	{
		assert(row < rows_ && col < cols_);
		return data_[row + col * rows_];
	}

	Const_reference operator()(S row, S col) const
	{
		assert(row < rows_ && col < cols_);
		return data_[row + col * rows_];
	}

	Reference operator()(Position<S> pos)
	{
		return (*this)(pos.row, pos.col);
	}

	Type operator()(Position<S> pos) const
	{
		return (*this)(pos.row, pos.col);
	}

	const Container& data() const
	{
		return data_;
	}

	Col_iterator begin_col(S col)
	{
		assert(col < cols_);
		return data_.begin() + rows_ * col;
	}

	Col_iterator end_col(S col)
	{
		return begin_col(col) + rows_;
	}

	Col_const_iterator begin_col(S col) const
	{
		assert(col < cols_);
		return data_.begin() + rows_ * col;
	}

	Col_const_iterator end_col(S col) const
	{
		return begin_col(col) + rows_;
	}

	S rows() const
	{
		return rows_;
	}

	S cols() const
	{
		return cols_;
	}

	void resize(S rows, S cols)
	{
		rows_ = rows;
		cols_ = cols;
		data_.resize(rows_ * cols_);
	}

	void fill(const Type& value)
	{
		std::fill(data_.begin(), data_.end(), value);
	}

	void resize_and_fill(S rows, S cols, const Type& value)
	{
		resize(rows, cols);
		fill(value);
	}

	void swap_rows(S row1, S row2)
	{
		assert(row1 < rows_ && row2 < rows_);
		assert(row1 != row2);

		for (S col = 0; col < cols_; ++col)
			std::swap((*this)(row1, col), (*this)(row2, col));
	}

	void swap_cols(S col1, S col2)
	{
		assert(col1 < cols_ && col2 < cols_);
		assert(col1 != col2);

		std::swap_ranges(
			data_.begin() + rows_ * col1,
			data_.begin() + rows_ * (col1 + 1),
			data_.begin() + rows_ * col2);
	}

	void swap(Matrix& other) noexcept
	{
		std::swap(data_, other.data_);
		std::swap(rows_, other.rows_);
		std::swap(cols_, other.cols_);
	}

private:
	Container data_;
	S rows_ = 0;
	S cols_ = 0;
};


template<class Matrix>
bool is_inside_extents(const Matrix& matrix, Position<typename Matrix::Size> pos)
{
	return pos.row < matrix.rows() && pos.col < matrix.cols();
}

template<typename V, typename S>
void swap(Matrix<V, S>& x, Matrix<V, S>& y) noexcept
{
	x.swap(y);
}

template<typename V, typename S>
Matrix<V, S> operator*(const Matrix<V, S>& x, const Matrix<V, S>& y)
{
	assert(x.cols() == y.rows());

	Matrix<V, S> res(x.rows(), y.cols(), 0);
	for (S j = 0; j < y.cols(); ++j)
		for (S i = 0; i < x.rows(); ++i)
			for (S k = 0; k < x.cols(); ++k)
				res(i, j) += x(i, k) * y(k, j);

	return res;
}

#include <algorithm>
#include <cassert>
#include <cstddef>
#include <limits>
#include <vector>

class CP : public CP1
{
private:
	struct Mix
	{
		std::size_t type;
		int heat;
	};

private:
	virtual void read_input() override
	{
		read(n_types_);
		assert(1 <= n_types_ && n_types_ <= 6);

		mixing_table_.resize(n_types_, n_types_);
		for (std::size_t i = 0; i < n_types_; ++i)
			for (std::size_t j = 0; j < n_types_; ++j)
			{
				auto& c = mixing_table_(i, j);
				read(c.type, c.heat);
				--c.type; // To zero-based indexing
			}

		read(n_tubes_);
		assert(2 <= n_tubes_ && n_tubes_ <= 10);

		chemicals_.resize(n_tubes_);
		for (auto& c : chemicals_)
		{
			read(c);
			--c; // To zero-based indexing
		}

		char c_ignore;
		read(c_ignore);
		assert(c_ignore == '/' || c_ignore == '.');
	}

	virtual void solve(unsigned int) override
	{
		/*********************************************************************
		mh(tch) is the minimum heat generated by mixing all chemicals in a set
			of tubes, such that (count = tch[i]) tubes contain chemical
			of the (i)-th type, i < (number of types of chemicals).

		The recurrence relation is:
			mh(tch) = min {i <= j} [mh(tch_ij) + mix(i, j).heat],
				where (tch_ij) is (tch) with i-th and j-th chemicals removed
				and (mix(i, j).type) chemical added.

		The base case:
			mh(tch) = 0, if (tch) contains only one chemical (nothing to mix).
		**********************************************************************/

		std::size_t mh_size = 1;
		for (std::size_t i = 0; i < n_types_; ++i)
			mh_size *= (n_tubes_ + 1);

		mh_.assign(mh_size, std::numeric_limits<int>::max());

		std::vector<std::size_t> tch(n_types_, 0);
		for (auto c : chemicals_)
			++tch[c];

		write_ln(min_heat(tch));
	}

	int min_heat(const std::vector<std::size_t>& tch)
	{
		assert(tch.size() == n_types_);

		const auto ind = index(tch);
		assert(ind < mh_.size());

		auto& m = mh_[ind];
		if (m != std::numeric_limits<int>::max())
			return m;

		for (std::size_t i = 0; i < n_types_; ++i)
			for (std::size_t j = 0; j < n_types_; ++j)
				if ((i != j && tch[i] >= 1 && tch[j] >= 1) || (i == j && tch[i] >= 2))
				{
					const auto& mixed = mixing_table_(i, j);
					auto tch_with_ij_mixed = tch;
					--tch_with_ij_mixed[i];
					--tch_with_ij_mixed[j];
					++tch_with_ij_mixed[mixed.type];

					m = std::min(m, min_heat(tch_with_ij_mixed) + mixed.heat);
				}

		if (m == std::numeric_limits<int>::max())
			m = 0;

		return m;
	}

	std::size_t index(const std::vector<std::size_t>& tch) const
	{
		std::size_t index = 0;
		for (auto c : tch)
			index = (n_tubes_ + 1) * index + c;

		return index;
	}

private:
	std::size_t n_types_;
	std::size_t n_tubes_;
	std::vector<int> mh_;
	Matrix<Mix> mixing_table_;
	std::vector<std::size_t> chemicals_;
};

MAIN


