#include <utility>
#include <memory>

namespace std
{
template<class T, class U = T>
T exchange(T& obj, U&& new_value)
{
    T old_value = std::move(obj);
    obj = std::forward<U>(new_value);
    return old_value;
}

template<class T, class... Args>
std::unique_ptr<T> make_unique(Args&&... args)
{
	return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
}
}

#include <cassert>
#include <cstddef>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <sstream>
#include <string>
#include <type_traits>

std::istream* istream;

bool ignore_line()
{
	return !!istream->ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

char peek()
{
	const auto ch = istream->peek();

	assert(istream->good());
	return static_cast<char>(ch);
}

bool read()
{
	return true;
}

template<typename T>
bool read(T& arg)
{
	return !!((*istream) >> arg);
}

template<typename T, typename... Ts>
bool read(T& arg, Ts&... args)
{
	return read(arg) && read(args...);
}

template<typename T1, typename T2>
bool read(std::pair<T1, T2>& pair)
{
	return read(pair.first, pair.second);
}

bool read_ln_non_empty(std::string& str)
{
	return !!std::getline(*istream, str) && !str.empty();
}

bool read_ln(std::string& str)
{
	return !!std::getline(*istream, str);
}

template<typename... Ts>
bool read_ln(Ts&... args)
{
	return read(args...) && ignore_line();
}

template<class T = void, class V, class Fn>
bool read_vec(std::size_t count, V& vec, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename V::value_type, T>::type;

	vec.reserve(vec.size() + count);
	for (std::size_t i = 0; i < count; ++i)
	{
		S y;
		if (!read(y))
			return false;
		vec.push_back(fn(y));
	}
	return true;
}

template<class V>
bool read_vec(std::size_t count, V& vec)
{
	using T = typename V::value_type;
	return read_vec<T>(count, vec, [](T x) { return x; });
}

template<typename T = void, class V, class Fn>
bool read_size_vec(V& vec, Fn fn)
{
	std::size_t size;
	read(size);
	if (size == 0)
		return false;

	vec.clear();
	return read_vec<T>(size, vec, fn);
}

template<class V>
bool read_size_vec(V& vec)
{
	std::size_t size;

	vec.clear();
	if (!read(size) || size == 0)
		return false;

	return read_vec(size, vec);
}

template<class V>
bool read_vec_ln(V& vec)
{
	using T = typename V::value_type;

	std::string str;
	if (!read_ln(str))
		return false;

	std::istringstream ss(str);

	T x;
	while (ss >> x)
		vec.push_back(x);

	return !vec.empty();
}

void write()
{}

template<typename T>
void write(const T& arg)
{
	std::cout << arg;
}

template<typename T, typename... Ts>
void write(const T& arg, const Ts&... args)
{
	write(arg);
	write(args...);
}

template<typename... Ts>
void write_ln(const Ts&... args)
{
	write(args..., '\n');
}

template<class It, class Fn, typename Join>
void write_range(It first, It last, Fn fn, Join join)
{
	if (first == last)
		return;

	write(fn(*first++));
	while (first != last)
		write(join, fn(*first++));
}

template<class It, typename Join>
void write_range(It first, It last, Join join)
{
	using T = typename std::iterator_traits<It>::value_type;
	write_range(first, last, [](const T& x) { return x; }, join);
}

template<class Vec, class... Args>
void write_vec(const Vec& vec, Args... args)
{
	write_range(vec.begin(), vec.end(), args...);
}

#include <cassert>
#include <fstream>
#include <iostream>
#include <string>
#include <type_traits>
#include <utility>

class CP0
{
public:
	CP0()
	{
		std::ios_base::sync_with_stdio(false);

#ifdef OFFLINE_JUDGE
		file_.open("input.txt");
		assert(file_);
		istream = &file_;

		std::cout << std::unitbuf;
#else
		istream = &std::cin;
#endif
	}

private:
#ifdef OFFLINE_JUDGE
	std::ifstream file_;
#endif
};

class CP1 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int n_test_cases;
		(*istream) >> n_test_cases;
		ignore_line();

		for (unsigned int i = 1; i <= n_test_cases; ++i)
		{
			read_input();
			assert(!istream->bad());
			solve(i);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP2 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int i = 1;
		while (read_input())
		{
			assert(!istream->bad());
			solve(i++);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual bool read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP3 : public CP0
{
public:
	int run()
	{
		init();

		read_input();
		assert(!istream->bad());
		solve();

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve() = 0;
	virtual void end()
	{}
};

#define MAIN                                                                                                           \
	int main()                                                                                                         \
	{                                                                                                                  \
		CP app;                                                                                                        \
		return app.run();                                                                                              \
	}

#include <cassert>
#include <string>
#include <type_traits>

#define CHECK_UNSIGNED_TYPE(T) static_assert(std::is_unsigned<T>::value, "Type should be unsigned")


template<typename T>
constexpr T all_bits()
{
	CHECK_UNSIGNED_TYPE(T);
	return static_cast<T>(-1);
}

template<typename T, typename N>
constexpr T nth_bit(N n)
{
	CHECK_UNSIGNED_TYPE(T);
	return static_cast<T>(1) << n;
}

template<typename T, typename N>
T n_ls_bits(N n)
{
	return (n == 0) ? 0 : all_bits<T>() >> (8 * sizeof(T) - n);
}


template<typename T, typename N>
bool is_bit_set(T mask, N n)
{
	return mask & nth_bit<T>(n);
}

template<unsigned int n, typename T>
bool is_bit_set(T mask)
{
	return mask & nth_bit<T>(n);
}

template<typename T, typename N>
void set_bit(T& mask, N n, bool bit = true)
{
	if (bit)
		mask |= nth_bit<T>(n);
}

template<typename T, typename N>
void reset_bit(T& mask, N n)
{
	mask &= ~nth_bit<T>(n);
}

template<typename T, typename N>
void keep_ls_bits(T& mask, N n)
{
	mask &= n_ls_bits<T>(n);
}

template<typename T>
void reset_ls_set_bit(T& mask)
{
	CHECK_UNSIGNED_TYPE(T);
	mask &= mask - static_cast<T>(1);
}

#ifdef __GNUG__

unsigned int ls_set_bit_pos(unsigned int mask)
{
	return static_cast<unsigned int>(__builtin_ctz(mask));
}

unsigned int ls_set_bit_pos(unsigned long mask)
{
	return static_cast<unsigned int>(__builtin_ctzl(mask));
}

unsigned int ls_set_bit_pos(unsigned long long mask)
{
	return static_cast<unsigned int>(__builtin_ctzll(mask));
}

unsigned int ms_set_bit_pos(unsigned int mask)
{
	return static_cast<unsigned int>(8 * sizeof(unsigned int) - __builtin_clz(mask));
}

unsigned int ms_set_bit_pos(unsigned long mask)
{
	return static_cast<unsigned int>(8 * sizeof(unsigned long) - __builtin_clzl(mask));
}

unsigned int ms_set_bit_pos(unsigned long long mask)
{
	return static_cast<unsigned int>(8 * sizeof(unsigned long long) - __builtin_clzll(mask));
}

#else

template<typename T>
unsigned int ls_set_bit_pos(T mask)
{
	CHECK_UNSIGNED_TYPE(T);
	unsigned int n = 0;
	while (!(mask & static_cast<T>(1)) && n < 8 * sizeof(T))
	{
		mask >>= 1;
		++n;
	}
	return n;
}

template<typename T>
unsigned int ms_set_bit_pos(T mask)
{
	CHECK_UNSIGNED_TYPE(T);
	unsigned int n = 0;
	while (mask != 0)
	{
		mask >>= 1;
		++n;
	}
	return n;
}

#endif

template<typename T, typename N>
T with_bit_set(T mask, N n, bool bit = true)
{
	set_bit(mask, n, bit);
	return mask;
}

template<typename T, typename N>
T with_bit_reset(T mask, N n)
{
	reset_bit(mask, n);
	return mask;
}

template<typename T>
T ls_set_bit(T mask)
{
	CHECK_UNSIGNED_TYPE(T);
	return mask & (~mask + static_cast<T>(1));
}


template<typename T, typename N>
void flip_bit(T& mask, N n)
{
	mask ^= nth_bit<T>(n);
}

template<typename T, typename N>
void flip_n_ls_bits(T& mask, N n)
{
	mask ^= n_ls_bits<T>(n);
}

template<typename T, typename N>
T with_bit_flipped(T mask, N n)
{
	flip_bit(mask, n);
	return mask;
}


#ifdef __GNUG__

unsigned int count_bits(unsigned int mask)
{
	return static_cast<unsigned int>(__builtin_popcount(mask));
}

unsigned int count_bits(unsigned long mask)
{
	return static_cast<unsigned int>(__builtin_popcountl(mask));
}

unsigned int count_bits(unsigned long long mask)
{
	return static_cast<unsigned int>(__builtin_popcountll(mask));
}

#else

template<typename T>
unsigned int count_bits(T mask)
{
	unsigned int n = 0;
	while (mask)
	{
		reset_ls_set_bit(mask);
		++n;
	}
	return n;
}

#endif


template<typename T>
T string_to_mask(const std::string& mask)
{
	CHECK_UNSIGNED_TYPE(T);
	assert(mask.length() <= 8 * sizeof(T));
	return static_cast<T>(std::stoul(mask, 0, 2));
}


template<typename T>
unsigned int floor_log2(T x)
{
	assert(x != 0);
	return ms_set_bit_pos(x) - 1;
}

template<typename T>
unsigned int ceil_log2(T x)
{
	assert(x != 0);
	if (x == 1)
		return 0;
	else
		return ms_set_bit_pos(x - 1);
}

template<typename T>
bool is_pow2(T x)
{
	CHECK_UNSIGNED_TYPE(T);
	return !(x & (x - 1));
}

template<typename T>
T pow2(unsigned int n)
{
	return static_cast<T>(1) << n;
}

template<typename T>
T prev_pow2(T x)
{
	CHECK_UNSIGNED_TYPE(T);
	if (x == 0)
		return x;
	else
		return pow2<T>(floor_log2(x));
}

template<typename T>
T next_pow2(T x)
{
	if (is_pow2(x))
		return x;
	return pow2<T>(floor_log2(x) + 1);
}
#include <cstddef>
#include <utility>

template<typename I = std::size_t>
struct Position
{
	using Type = I;

	I row = 0;
	I col = 0;

	Position() = default;

	constexpr Position(I row, I col) : row(row), col(col)
	{}

	Position& operator+=(const Position& pos)
	{
		row += pos.row;
		col += pos.col;
		return *this;
	}

	Position& operator-=(const Position& pos)
	{
		row -= pos.row;
		col -= pos.col;
		return *this;
	}

	void to_zero_based()
	{
		--row;
		--col;
	}
};

template<typename I>
bool operator==(const Position<I>& pos1, const Position<I>& pos2)
{
	return pos1.row == pos2.row && pos1.col == pos2.col;
}

template<typename I>
bool operator!=(const Position<I>& pos1, const Position<I>& pos2)
{
	return !(pos1 == pos2);
}

template<typename I>
bool operator<(const Position<I>& pos1, const Position<I>& pos2)
{
	return std::make_pair(pos1.row, pos1.col) < std::make_pair(pos2.row, pos2.col);
}

template<typename I>
Position<I> operator+(Position<I> pos1, const Position<I>& pos2)
{
	return (pos1 += pos2);
}

template<typename I>
Position<I> operator-(Position<I> pos1, const Position<I>& pos2)
{
	return (pos1 -= pos2);
}

template<typename I>
bool read(Position<I>& pos)
{
	return read(pos.row, pos.col);
}

#include <type_traits>

template<typename T = void, class Matrix, class Fn>
bool read_matrix(Matrix& mat, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename Matrix::Type, T>::type;

	for (typename Matrix::Size row = 0; row < mat.rows(); ++row)
		for (typename Matrix::Size col = 0; col < mat.cols(); ++col)
		{
			S s;
			if (!read(s))
				return false;
			mat(row, col) = fn(s);
		}

	return true;
}

template<class Matrix>
bool read_matrix(Matrix& mat)
{
	return read_matrix<typename Matrix::Type>(mat,
		[](const typename Matrix::Type& x) { return x; });
}

template<typename T = void, class Matrix, class Fn>
bool read_transposed_matrix(Matrix& mat, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename Matrix::Type, T>::type;

	for (typename Matrix::Size row = 0; row < mat.rows(); ++row)
		for (typename Matrix::Size col = 0; col < mat.cols(); ++col)
		{
			S s;
			if (!read(s))
				return false;
			mat(col, row) = fn(s);
		}

	return true;
}

template<class Matrix>
bool read_transposed_matrix(Matrix& mat)
{
	return read_transposed_matrix<typename Matrix::Type>(mat,
		[](const typename Matrix::Type& x) { return x; });
}

template<class Matrix>
bool write_matrix(Matrix& mat)
{
	for (typename Matrix::Size row = 0; row < mat.rows(); ++row)
	{
		for (typename Matrix::Size col = 0; col < mat.cols(); ++col)
			write(mat(row, col), ' ');
		write_ln();
	}

	return true;
}

#include <algorithm>
#include <cassert>
#include <cstddef>
#include <iosfwd>
#include <iomanip>
#include <vector>
#include <utility>

template<typename T, typename S = std::size_t>
class Matrix
{
public:
	using Type = T;
	using Size = S;

	using Container = std::vector<Type>;
	using Reference = typename Container::reference;
	using Const_reference = typename Container::const_reference;

	using Col_iterator = typename Container::iterator;
	using Col_const_iterator = typename Container::const_iterator;

public:
	Matrix() = default;

	Matrix(Size rows, Size cols) : data_(rows * cols), rows_(rows), cols_(cols)
	{}

	Matrix(Size rows, Size cols, const Type& value) : Matrix(rows, cols)
	{
		fill(value);
	}

	Matrix(const std::vector<std::vector<Type>>& data) :
		Matrix(static_cast<Size>(data.front().size()), static_cast<Size>(data.size()))
	{
		for (Size col = 0; col < cols(); ++col)
		{
			assert(data[col].size() == data.front().size());
			std::copy(data[col].begin(), data[col].end(), begin_col(col));
		}
	}

	Matrix(const Matrix&) = default;
	Matrix(Matrix&&) = default;

	Matrix& operator=(const Matrix&) = default;
	Matrix& operator=(Matrix&&) = default;

	Reference operator()(S row, S col)
	{
		assert(row < rows_ && col < cols_);
		return data_[row + col * rows_];
	}

	Const_reference operator()(S row, S col) const
	{
		assert(row < rows_ && col < cols_);
		return data_[row + col * rows_];
	}

	Reference operator()(Position<S> pos)
	{
		return (*this)(pos.row, pos.col);
	}

	Type operator()(Position<S> pos) const
	{
		return (*this)(pos.row, pos.col);
	}

	const Container& data() const
	{
		return data_;
	}

	Col_iterator begin_col(S col)
	{
		assert(col < cols_);
		return data_.begin() + rows_ * col;
	}

	Col_iterator end_col(S col)
	{
		return begin_col(col) + rows_;
	}

	Col_const_iterator begin_col(S col) const
	{
		assert(col < cols_);
		return data_.begin() + rows_ * col;
	}

	Col_const_iterator end_col(S col) const
	{
		return begin_col(col) + rows_;
	}

	S rows() const
	{
		return rows_;
	}

	S cols() const
	{
		return cols_;
	}

	void resize(S rows, S cols)
	{
		rows_ = rows;
		cols_ = cols;
		data_.resize(rows_ * cols_);
	}

	void fill(const Type& value)
	{
		std::fill(data_.begin(), data_.end(), value);
	}

	void resize_and_fill(S rows, S cols, const Type& value)
	{
		resize(rows, cols);
		fill(value);
	}

	void swap_rows(S row1, S row2)
	{
		assert(row1 < rows_ && row2 < rows_);
		assert(row1 != row2);

		for (S col = 0; col < cols_; ++col)
			std::swap((*this)(row1, col), (*this)(row2, col));
	}

	void swap_cols(S col1, S col2)
	{
		assert(col1 < cols_ && col2 < cols_);
		assert(col1 != col2);

		std::swap_ranges(
			data_.begin() + rows_ * col1,
			data_.begin() + rows_ * (col1 + 1),
			data_.begin() + rows_ * col2);
	}

	void swap(Matrix& other) noexcept
	{
		std::swap(data_, other.data_);
		std::swap(rows_, other.rows_);
		std::swap(cols_, other.cols_);
	}

private:
	Container data_;
	S rows_ = 0;
	S cols_ = 0;
};


template<class Matrix>
bool is_inside_extents(const Matrix& matrix, Position<typename Matrix::Size> pos)
{
	return pos.row < matrix.rows() && pos.col < matrix.cols();
}

template<typename V, typename S>
void swap(Matrix<V, S>& x, Matrix<V, S>& y) noexcept
{
	x.swap(y);
}

template<typename V, typename S>
Matrix<V, S> operator*(const Matrix<V, S>& x, const Matrix<V, S>& y)
{
	assert(x.cols() == y.rows());

	Matrix<V, S> res(x.rows(), y.cols(), 0);
	for (S j = 0; j < y.cols(); ++j)
		for (S i = 0; i < x.rows(); ++i)
			for (S k = 0; k < x.cols(); ++k)
				res(i, j) += x(i, k) * y(k, j);

	return res;
}

#include <algorithm>
#include <cassert>
#include <limits>
#include <string>
#include <vector>

using Size = unsigned int;
using Mask = Size;

class Twenty_questions
{
private:
	static constexpr auto max_size = std::numeric_limits<Size>::max();

public:
	Twenty_questions(Size n_features, const std::vector<Mask>& objects) : n_features_(n_features), objects_(objects)
	{
		const auto n_masks = nth_bit<Mask>(n_features_);
		mq_.resize(n_masks, n_masks);
	}

	Size min_n_questions() const
	{
		mq_.fill(max_size);

		const auto all_objects_mask = 0;
		return min_questions(all_objects_mask, all_objects_mask);
	}

private:
	Size min_questions(Mask questions, Mask answers) const
	{
		auto& m = mq_(questions, answers);
		if (m != max_size)
			return m;

		const auto n_objects = std::count_if(objects_.cbegin(), objects_.cend(),
			[&questions, &answers](Mask object) { return (object & questions) == answers; });

		if (n_objects <= 1)
			return (m = 0);

		for (Size i = 0; i < n_features_; ++i)
		{
			if (is_bit_set(questions, i))
				continue;

			const auto with_ith_question = with_bit_set(questions, i);
			const auto min_q = std::max(min_questions(with_ith_question, answers),
				min_questions(with_ith_question, with_bit_flipped(answers, i)));

			m = std::min(m, min_q + 1);
		}

		return m;
	}

private:
	const Size n_features_;
	const std::vector<Mask>& objects_;

	mutable Matrix<Size> mq_;
};

class CP : public CP2
{
private:
	virtual bool read_input() override
	{
		Size n_objects;
		if (!read(n_features_, n_objects) || (n_features_ == 0 && n_objects == 0))
			return false;

		assert(0 < n_features_ && n_features_ <= 11);
		assert(0 < n_objects && n_objects <= 128);

		read_vec<std::string>(n_objects, objects_, [](const std::string& str) { return string_to_mask<Mask>(str); });

		return true;
	}

	virtual void solve(unsigned int) override
	{
		const Twenty_questions qs(n_features_, objects_);
		write_ln(qs.min_n_questions());
	}

private:
	Size n_features_;
	std::vector<Mask> objects_;
};

MAIN


