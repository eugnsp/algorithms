#include <utility>
#include <memory>

namespace std
{
template<class T, class U = T>
T exchange(T& obj, U&& new_value)
{
    T old_value = std::move(obj);
    obj = std::forward<U>(new_value);
    return old_value;
}

template<class T, class... Args>
std::unique_ptr<T> make_unique(Args&&... args)
{
	return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
}
}

#include <cassert>
#include <cstddef>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <sstream>
#include <string>
#include <type_traits>

std::istream* istream;

bool ignore_line()
{
	return !!istream->ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

char peek()
{
	const auto ch = istream->peek();

	assert(istream->good());
	return static_cast<char>(ch);
}

bool read()
{
	return true;
}

template<typename T>
bool read(T& arg)
{
	return !!((*istream) >> arg);
}

template<typename T, typename... Ts>
bool read(T& arg, Ts&... args)
{
	return read(arg) && read(args...);
}

template<typename T1, typename T2>
bool read(std::pair<T1, T2>& pair)
{
	return read(pair.first, pair.second);
}

bool read_ln_non_empty(std::string& str)
{
	return !!std::getline(*istream, str) && !str.empty();
}

bool read_ln(std::string& str)
{
	return !!std::getline(*istream, str);
}

template<typename... Ts>
bool read_ln(Ts&... args)
{
	return read(args...) && ignore_line();
}

template<class T = void, class V, class Fn>
bool read_vec(std::size_t count, V& vec, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename V::value_type, T>::type;

	vec.reserve(vec.size() + count);
	for (std::size_t i = 0; i < count; ++i)
	{
		S y;
		if (!read(y))
			return false;
		vec.push_back(fn(y));
	}
	return true;
}

template<class V>
bool read_vec(std::size_t count, V& vec)
{
	using T = typename V::value_type;
	return read_vec<T>(count, vec, [](T x) { return x; });
}

template<typename T = void, class V, class Fn>
bool read_size_vec(V& vec, Fn fn)
{
	std::size_t size;
	read(size);
	if (size == 0)
		return false;

	vec.clear();
	return read_vec<T>(size, vec, fn);
}

template<class V>
bool read_size_vec(V& vec)
{
	std::size_t size;

	vec.clear();
	if (!read(size) || size == 0)
		return false;

	return read_vec(size, vec);
}

template<class V>
bool read_vec_ln(V& vec)
{
	using T = typename V::value_type;

	std::string str;
	if (!read_ln(str))
		return false;

	std::istringstream ss(str);

	T x;
	while (ss >> x)
		vec.push_back(x);

	return !vec.empty();
}

void write()
{}

template<typename T>
void write(const T& arg)
{
	std::cout << arg;
}

template<typename T, typename... Ts>
void write(const T& arg, const Ts&... args)
{
	write(arg);
	write(args...);
}

template<typename... Ts>
void write_ln(const Ts&... args)
{
	write(args..., '\n');
}

template<class It, class Fn, typename Join>
void write_range(It first, It last, Fn fn, Join join)
{
	if (first == last)
		return;

	write(fn(*first++));
	while (first != last)
		write(join, fn(*first++));
}

template<class It, typename Join>
void write_range(It first, It last, Join join)
{
	using T = typename std::iterator_traits<It>::value_type;
	write_range(first, last, [](const T& x) { return x; }, join);
}

template<class Vec, class... Args>
void write_vec(const Vec& vec, Args... args)
{
	write_range(vec.begin(), vec.end(), args...);
}

#include <cassert>
#include <fstream>
#include <iostream>
#include <string>
#include <type_traits>
#include <utility>

class CP0
{
public:
	CP0()
	{
		std::ios_base::sync_with_stdio(false);

#ifdef OFFLINE_JUDGE
		file_.open("input.txt");
		assert(file_);
		istream = &file_;

		std::cout << std::unitbuf;
#else
		istream = &std::cin;
#endif
	}

private:
#ifdef OFFLINE_JUDGE
	std::ifstream file_;
#endif
};

class CP1 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int n_test_cases;
		(*istream) >> n_test_cases;
		ignore_line();

		for (unsigned int i = 1; i <= n_test_cases; ++i)
		{
			read_input();
			assert(!istream->bad());
			solve(i);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP2 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int i = 1;
		while (read_input())
		{
			assert(!istream->bad());
			solve(i++);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual bool read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP3 : public CP0
{
public:
	int run()
	{
		init();

		read_input();
		assert(!istream->bad());
		solve();

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve() = 0;
	virtual void end()
	{}
};

#define MAIN                                                                                                           \
	int main()                                                                                                         \
	{                                                                                                                  \
		CP app;                                                                                                        \
		return app.run();                                                                                              \
	}

#include <algorithm>
#include <cassert>
#include <cstddef>
#include <iterator>
#include <string>
#include <utility>
#include <vector>

constexpr auto stop_sig = -999999;

char to_digit(unsigned char n)
{
	assert(n <= 9);
	return static_cast<char>('0' + n);
}

class Big_int
{
public:
	template<typename T>
	explicit Big_int(const T value)
	{
		assign(value);
	}

	template<typename T>
	Big_int& operator=(const T value)
	{
		assign(value);
		return *this;
	}

	template<typename T>
	void operator*=(T factor)
	{
		assert(factor != 0);
		if (factor < 0)
		{
			factor = -factor;
			is_negative_ = !is_negative_;
		}

		T carry = 0;
		for (auto& digit : data_)
		{
			const auto add = factor * digit + carry;
			digit = add % 10;
			carry = add / 10;
		}

		while (carry != 0)
			data_.push_back(std::exchange(carry, carry / 10) % 10);
	}

	bool operator<(const Big_int& other) const
	{
		if (is_negative_ != other.is_negative_)
			return is_negative_;
		if (data_.size() != other.data_.size())
			return data_.size() < other.data_.size();

		for (std::size_t i = data_.size(); i > 0; --i)
			if (data_[i - 1] != other.data_[i - 1])
				return (data_[i - 1] < other.data_[i - 1]) != is_negative_;
		return false;
	}

	bool is_negative() const
	{
		return is_negative_;
	}

	std::string to_string() const
	{
		std::string str;
		if (is_negative_)
			str.push_back('-');
		str.reserve(str.size() + data_.size());
		std::transform(data_.rbegin(), data_.rend(), std::back_inserter(str), to_digit);
		return str;
	}

private:
	template<typename T>
	void assign(T value)
	{
		is_negative_ = (value < 0);
		if (value < 0)
			value = -value;

		data_.clear();
		do
			data_.push_back(std::exchange(value, value / 10) % 10);
		while (value != 0);
	}

private:
	bool is_negative_;
	std::vector<unsigned char> data_;
};

template<class It, typename T = typename std::iterator_traits<It>::value_type>
Big_int max_product(const It first, const It last)
{
	assert(first != last);

	Big_int left_prod{1};
	Big_int right_prod{1};
	Big_int max{*first};

	for (auto it = first; it != last; ++it)
		if (*it != 0)
		{
			left_prod *= *it;
			max = std::max(max, left_prod);
		}
		else
		{
			left_prod = 1;
			if (max.is_negative())
				max = 0;
		}

	for (auto it = std::make_reverse_iterator(last); it != std::make_reverse_iterator(first); ++it)
		if (*it != 0)
		{
			right_prod *= *it;
			max = std::max(max, right_prod);
		}
		else
		{
			right_prod = 1;
			if (max.is_negative())
				max = 0;
		}

	return max;
}

using T = int;

class CP : public CP2
{
private:
	virtual bool read_input() override
	{
		seq_.clear();

		T value;
		while (read(value) && value != stop_sig)
			seq_.push_back(value);

		return !seq_.empty();
	}

	virtual void solve(unsigned int) override
	{
		const auto max = max_product(seq_.begin(), seq_.end());
		write_ln(max.to_string());
	}

private:
	std::vector<int> seq_;
};

MAIN


