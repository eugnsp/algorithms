#include <utility>
#include <memory>

namespace std
{
template<class T, class U = T>
T exchange(T& obj, U&& new_value)
{
    T old_value = std::move(obj);
    obj = std::forward<U>(new_value);
    return old_value;
}

template<class T, class... Args>
std::unique_ptr<T> make_unique(Args&&... args)
{
	return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
}
}

#include <cassert>
#include <cstddef>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <sstream>
#include <string>
#include <type_traits>

std::istream* istream;

bool ignore_line()
{
	return !!istream->ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

char peek()
{
	const auto ch = istream->peek();

	assert(istream->good());
	return static_cast<char>(ch);
}

bool read()
{
	return true;
}

template<typename T>
bool read(T& arg)
{
	return !!((*istream) >> arg);
}

template<typename T, typename... Ts>
bool read(T& arg, Ts&... args)
{
	return read(arg) && read(args...);
}

template<typename T1, typename T2>
bool read(std::pair<T1, T2>& pair)
{
	return read(pair.first, pair.second);
}

bool read_ln_non_empty(std::string& str)
{
	return !!std::getline(*istream, str) && !str.empty();
}

bool read_ln(std::string& str)
{
	return !!std::getline(*istream, str);
}

template<typename... Ts>
bool read_ln(Ts&... args)
{
	return read(args...) && ignore_line();
}

template<class T = void, class V, class Fn>
bool read_vec(std::size_t count, V& vec, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename V::value_type, T>::type;

	vec.reserve(vec.size() + count);
	for (std::size_t i = 0; i < count; ++i)
	{
		S y;
		if (!read(y))
			return false;
		vec.push_back(fn(y));
	}
	return true;
}

template<class V>
bool read_vec(std::size_t count, V& vec)
{
	using T = typename V::value_type;
	return read_vec<T>(count, vec, [](T x) { return x; });
}

template<typename T = void, class V, class Fn>
bool read_size_vec(V& vec, Fn fn)
{
	std::size_t size;
	read(size);
	if (size == 0)
		return false;

	vec.clear();
	return read_vec<T>(size, vec, fn);
}

template<class V>
bool read_size_vec(V& vec)
{
	std::size_t size;

	vec.clear();
	if (!read(size) || size == 0)
		return false;

	return read_vec(size, vec);
}

template<class V>
bool read_vec_ln(V& vec)
{
	using T = typename V::value_type;

	std::string str;
	if (!read_ln(str))
		return false;

	std::istringstream ss(str);

	T x;
	while (ss >> x)
		vec.push_back(x);

	return !vec.empty();
}

void write()
{}

template<typename T>
void write(const T& arg)
{
	std::cout << arg;
}

template<typename T, typename... Ts>
void write(const T& arg, const Ts&... args)
{
	write(arg);
	write(args...);
}

template<typename... Ts>
void write_ln(const Ts&... args)
{
	write(args..., '\n');
}

template<class It, class Fn, typename Join>
void write_range(It first, It last, Fn fn, Join join)
{
	if (first == last)
		return;

	write(fn(*first++));
	while (first != last)
		write(join, fn(*first++));
}

template<class It, typename Join>
void write_range(It first, It last, Join join)
{
	using T = typename std::iterator_traits<It>::value_type;
	write_range(first, last, [](const T& x) { return x; }, join);
}

template<class Vec, class... Args>
void write_vec(const Vec& vec, Args... args)
{
	write_range(vec.begin(), vec.end(), args...);
}

#include <cassert>
#include <fstream>
#include <iostream>
#include <string>
#include <type_traits>
#include <utility>

class CP0
{
public:
	CP0()
	{
		std::ios_base::sync_with_stdio(false);

#ifdef OFFLINE_JUDGE
		file_.open("input.txt");
		assert(file_);
		istream = &file_;

		std::cout << std::unitbuf;
#else
		istream = &std::cin;
#endif
	}

private:
#ifdef OFFLINE_JUDGE
	std::ifstream file_;
#endif
};

class CP1 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int n_test_cases;
		(*istream) >> n_test_cases;
		ignore_line();

		for (unsigned int i = 1; i <= n_test_cases; ++i)
		{
			read_input();
			assert(!istream->bad());
			solve(i);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP2 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int i = 1;
		while (read_input())
		{
			assert(!istream->bad());
			solve(i++);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual bool read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP3 : public CP0
{
public:
	int run()
	{
		init();

		read_input();
		assert(!istream->bad());
		solve();

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve() = 0;
	virtual void end()
	{}
};

#define MAIN                                                                                                           \
	int main()                                                                                                         \
	{                                                                                                                  \
		CP app;                                                                                                        \
		return app.run();                                                                                              \
	}

#include <algorithm>
#include <array>
#include <cassert>
#include <iterator>
#include <string>
#include <utility>
#include <vector>

using Graph = std::vector<std::vector<std::size_t>>;

class Min_bandwidth
{
public:
	Min_bandwidth(const Graph& graph) : graph_(graph), size_(graph_.size())
	{
		seen_positions_.assign(size_, false);
		curr_permutation_.resize(size_);
		min_bandwidth_ = static_cast<std::size_t>(-1);
		backtrack();
	}

	std::size_t bandwidth() const
	{
		return min_bandwidth_;
	}

	std::vector<std::size_t> permutation() const
	{
		std::vector<std::size_t> inv_permutation(size_);
		for (std::size_t i = 0; i < size_; ++i)
			inv_permutation[min_permutation_[i]] = i;
		return inv_permutation;
	}

private:
	std::size_t get_bandwidth()
	{
		std::size_t bandwidth = 0;
		for (std::size_t i = 0; i < size_; ++i)
		{
			const auto pi = curr_permutation_[i];
			for (const auto j : graph_[i])
			{
				const auto pj = curr_permutation_[j];
				const auto dist = pi > pj ? pi - pj : pj - pi;
				bandwidth = std::max(bandwidth, dist);
			}
		}

		return bandwidth;
	}

	void backtrack(std::size_t pos = 0)
	{
		if (pos == size_)
			if (const auto bandwidth = get_bandwidth(); bandwidth < min_bandwidth_)
			{
				min_bandwidth_ = bandwidth;
				min_permutation_ = curr_permutation_;
			}

		for (std::size_t j = 0; j < size_; ++j)
		{
			if (seen_positions_[j])
				continue;

			seen_positions_[j] = true;
			curr_permutation_[j] = pos;
			backtrack(pos + 1);
			seen_positions_[j] = false;
		}
	}

	const Graph& graph_;
	const std::size_t size_;

	std::vector<char> seen_positions_;
	std::vector<std::size_t> curr_permutation_;
	std::vector<std::size_t> min_permutation_;
	std::size_t min_bandwidth_;
};

class Vertex_map
{
public:
	std::size_t init_and_get_size(const std::string& descr)
	{
		std::vector<char> letters;
		const auto is_letter = [](char ch) { return 'A' <= ch && ch <= 'Z'; };
		std::copy_if(descr.begin(), descr.end(), std::back_inserter(letters), is_letter);
		std::sort(letters.begin(), letters.end());
		const auto last = std::unique(letters.begin(), letters.end());
		letters.erase(last, letters.end());

		std::fill(map_.begin(), map_.end(), invalid_index);
		std::size_t i = 0;
		for (auto vertex : letters)
			map_[char_to_index(vertex)] = i++;

		return letters.size();
	}

	std::size_t operator[](char vertex) const
	{
		return map_[char_to_index(vertex)];
	}

	char find(std::size_t index) const
	{
		const auto it = std::find(map_.begin(), map_.end(), index);
		assert(it != map_.end());
		return index_to_char(it - map_.begin());
	}

private:
	static std::size_t char_to_index(char ch)
	{
		return static_cast<std::size_t>(ch - 'A');
	}

	static char index_to_char(std::ptrdiff_t index)
	{
		return static_cast<char>(index + 'A');
	}

private:
	static constexpr std::size_t invalid_index = -1;
	static constexpr std::size_t map_max_size = 'Z' - 'A' + 1;

	std::array<std::size_t, map_max_size> map_;
};

template<typename T>
void push_if_not_there(std::vector<T>& vec, T value)
{
	if (const auto it = std::find(vec.begin(), vec.end(), value); it == vec.end())
		vec.push_back(std::move(value));
}

class CP : public CP2
{
private:
	virtual bool read_input() override
	{
		std::string descr;
		if (!read_ln(descr) || descr == "#")
			return false;

		const auto size = map_.init_and_get_size(descr);
		graph_.clear();
		graph_.resize(size);

		for (std::size_t i = 0; i < descr.length(); ++i)
		{
			const auto v = map_[descr[i++]];
			assert(descr[i] == ':');

			while (++i < descr.length() && descr[i] != ';')
				push_if_not_there(graph_[v], map_[descr[i]]);
		}

		return true;
	}

	virtual void solve(unsigned int) override
	{
		Min_bandwidth min_bandwidth{graph_};
		const auto perm = min_bandwidth.permutation();
		write_range(perm.begin(), perm.end(), [this](auto i) { return map_.find(i); }, ' ');
		write_ln(" -> ", min_bandwidth.bandwidth());
	}

private:
	Vertex_map map_;
	Graph graph_;
};

MAIN

