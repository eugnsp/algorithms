#include <utility>
#include <memory>

namespace std
{
template<class T, class U = T>
T exchange(T& obj, U&& new_value)
{
    T old_value = std::move(obj);
    obj = std::forward<U>(new_value);
    return old_value;
}

template<class T, class... Args>
std::unique_ptr<T> make_unique(Args&&... args)
{
	return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
}
}

#include <cassert>
#include <cstddef>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <sstream>
#include <string>
#include <type_traits>

std::istream* istream;

bool ignore_line()
{
	return !!istream->ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

char peek()
{
	const auto ch = istream->peek();

	assert(istream->good());
	return static_cast<char>(ch);
}

bool read()
{
	return true;
}

template<typename T>
bool read(T& arg)
{
	return !!((*istream) >> arg);
}

template<typename T, typename... Ts>
bool read(T& arg, Ts&... args)
{
	return read(arg) && read(args...);
}

template<typename T1, typename T2>
bool read(std::pair<T1, T2>& pair)
{
	return read(pair.first, pair.second);
}

bool read_ln_non_empty(std::string& str)
{
	return !!std::getline(*istream, str) && !str.empty();
}

bool read_ln(std::string& str)
{
	return !!std::getline(*istream, str);
}

template<typename... Ts>
bool read_ln(Ts&... args)
{
	return read(args...) && ignore_line();
}

template<class T = void, class V, class Fn>
bool read_vec(std::size_t count, V& vec, Fn fn)
{
	using S = typename std::conditional<std::is_void<T>::value, typename V::value_type, T>::type;

	vec.reserve(vec.size() + count);
	for (std::size_t i = 0; i < count; ++i)
	{
		S y;
		if (!read(y))
			return false;
		vec.push_back(fn(y));
	}
	return true;
}

template<class V>
bool read_vec(std::size_t count, V& vec)
{
	using T = typename V::value_type;
	return read_vec<T>(count, vec, [](T x) { return x; });
}

template<typename T = void, class V, class Fn>
bool read_size_vec(V& vec, Fn fn)
{
	std::size_t size;
	read(size);
	if (size == 0)
		return false;

	vec.clear();
	return read_vec<T>(size, vec, fn);
}

template<class V>
bool read_size_vec(V& vec)
{
	std::size_t size;

	vec.clear();
	if (!read(size) || size == 0)
		return false;

	return read_vec(size, vec);
}

template<class V>
bool read_vec_ln(V& vec)
{
	using T = typename V::value_type;

	std::string str;
	if (!read_ln(str))
		return false;

	std::istringstream ss(str);

	T x;
	while (ss >> x)
		vec.push_back(x);

	return !vec.empty();
}

void write()
{}

template<typename T>
void write(const T& arg)
{
	std::cout << arg;
}

template<typename T, typename... Ts>
void write(const T& arg, const Ts&... args)
{
	write(arg);
	write(args...);
}

template<typename... Ts>
void write_ln(const Ts&... args)
{
	write(args..., '\n');
}

template<class It, class Fn, typename Join>
void write_range(It first, It last, Fn fn, Join join)
{
	if (first == last)
		return;

	write(fn(*first++));
	while (first != last)
		write(join, fn(*first++));
}

template<class It, typename Join>
void write_range(It first, It last, Join join)
{
	using T = typename std::iterator_traits<It>::value_type;
	write_range(first, last, [](const T& x) { return x; }, join);
}

template<class Vec, class... Args>
void write_vec(const Vec& vec, Args... args)
{
	write_range(vec.begin(), vec.end(), args...);
}

#include <cassert>
#include <fstream>
#include <iostream>
#include <string>
#include <type_traits>
#include <utility>

class CP0
{
public:
	CP0()
	{
		std::ios_base::sync_with_stdio(false);

#ifdef OFFLINE_JUDGE
		file_.open("input.txt");
		assert(file_);
		istream = &file_;

		std::cout << std::unitbuf;
#else
		istream = &std::cin;
#endif
	}

private:
#ifdef OFFLINE_JUDGE
	std::ifstream file_;
#endif
};

class CP1 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int n_test_cases;
		(*istream) >> n_test_cases;
		ignore_line();

		for (unsigned int i = 1; i <= n_test_cases; ++i)
		{
			read_input();
			assert(!istream->bad());
			solve(i);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP2 : public CP0
{
public:
	int run()
	{
		init();

		unsigned int i = 1;
		while (read_input())
		{
			assert(!istream->bad());
			solve(i++);
			std::cout.flush();
		}

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual bool read_input() = 0;
	virtual void solve(unsigned int) = 0;
	virtual void end()
	{}
};

class CP3 : public CP0
{
public:
	int run()
	{
		init();

		read_input();
		assert(!istream->bad());
		solve();

		end();
		return 0;
	}

protected:
	virtual void init()
	{}
	virtual void read_input() = 0;
	virtual void solve() = 0;
	virtual void end()
	{}
};

#define MAIN                                                                                                           \
	int main()                                                                                                         \
	{                                                                                                                  \
		CP app;                                                                                                        \
		return app.run();                                                                                              \
	}

#include <cstddef>
#include <vector>
#include <algorithm>
#include <type_traits>
#include <cassert>

struct Change
{
	std::size_t n;
	std::size_t coin_index;
};

template<class Coins>
std::vector<Change> coin_change(const Coins& coins, typename Coins::value_type amount)
{
	using Coin = typename Coins::value_type;

	static_assert(std::is_unsigned<Coin>::value, "Coin denomination type should be unsigned");
	assert(std::all_of(coins.begin(), coins.end(), [](Coin c) { return c > 0; }));
	assert(amount > 0);

	constexpr auto max_size = static_cast<std::size_t>(-1);
	std::vector<Change> m(amount + 1, {max_size, 0});

	m[0].n = 0;
	for (std::size_t j = 0; j < coins.size(); ++j)
	{
		const auto coin = coins[j];
		for (auto i = coin; i <= amount; ++i)
		{
			auto r = m[i - coin].n;
			if (r != max_size && ++r < m[i].n)
			{
				m[i].n = r;
				m[i].coin_index = j;
			}
		}
	}

	return m;
}

template<class Coins>
std::vector<Change> zero_one_coin_change(const Coins& coins, typename Coins::value_type amount)
{
	using Coin = typename Coins::value_type;

	static_assert(std::is_unsigned<Coin>::value, "Coin denomination type should be unsigned");
	assert(std::all_of(coins.begin(), coins.end(), [](Coin c) { return c > 0; }));
	assert(amount > 0);

	constexpr auto max_size = static_cast<std::size_t>(-1);
	std::vector<Change> m(amount + 1, {max_size, 0});

	m[0].n = 0;
	for (std::size_t j = 0; j < coins.size(); ++j)
	{
		const auto coin = coins[j];
		for (auto i = amount; i >= coin; --i)
		{
			auto r = m[i - coin].n;
			if (r != max_size && ++r < m[i].n)
			{
				m[i].n = r;
				m[i].coin_index = j;
			}
		}
	}

	return m;
}

template<typename Size, class Coins>
Size n_ways_change(const Coins& coins, typename Coins::value_type amount)
{
	using Coin = typename Coins::value_type;

	static_assert(std::is_unsigned<Coin>::value, "Coin denomination type should be unsigned");
	static_assert(std::is_unsigned<Size>::value, "Size type should be unsigned");
	assert(std::all_of(coins.begin(), coins.end(), [](Coin c) { return c > 0; }));
	assert(amount > 0);

	std::vector<Size> n_ways(amount + 1, 0);
	n_ways[0] = 1;

	for (auto coin : coins)
		for (Coin i = 1; i <= amount; ++i)
			if (i >= coin)
				n_ways[i] += n_ways[i - coin];

	return n_ways.back();
}

#include <array>

class CP : public CP2
{
private:
	virtual bool read_input() override
	{
		return read(amount_);
	}

	virtual void solve(unsigned int) override
	{
		const std::array<unsigned int, 5> coins = {1, 5, 10, 25, 50};

		const auto n = n_ways_change<unsigned int>(coins, amount_);
		if (n > 1)
			write_ln("There are ", n, " ways to produce ", amount_, " cents change.");
		else
			write_ln("There is only 1 way to produce ", amount_, " cents change.");
	}

private:
	unsigned int amount_;
};

MAIN


